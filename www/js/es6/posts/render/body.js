'use strict';System.register(['main'],function(_export,_context){var config;return {setters:[function(_main){config=_main.config;}],execute:function(){var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally {try{if(!_n&&_i["return"])_i["return"]();}finally {if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i);}else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();const ref_re=function(){let pattern='>>('+'\\d+'+'|>\\/watch\\?v=[\\w-]{11}(?:#t=[\\dhms]{1,9})?'+'|>\\/soundcloud\\/[\\w-]{1,40}\\/[\\w-]{1,80}'+'|>\\/pastebin\\/\\w+';const targets={};const boards=config.boards;for(let board of boards.enabled){targets[board]=`../${ board }/`;}for(let _ref in boards.psuedo.concat(boards.links)){var _ref2=_slicedToArray(_ref,2);let name=_ref2[0];let link=_ref2[1];targets[name]=link;}for(let target of targets){pattern+='|>\\/${board}\\/(?:\\w+\\/?)?';}pattern+=')';return new RegExp(pattern);}();}};});
//# sourceMappingURL=../../maps/posts/render/body.js.map
