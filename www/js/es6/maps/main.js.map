{"version":3,"sources":["main.js"],"names":[],"mappings":"yQAKY,4CACA,yCACJ,sBAAS,6CACT,mBAAO,mDACR,sCAGK,sCAEL,wDAGP,MAAM,MAAM,IAAI,YAAJ,EAAN,CAAN,CAGA,MAAM,cAAgB,CAAhB,CACN,GAAI,aAAa,aAAb,EAA8B,aAA9B,CAA6C,CAChD,IAAK,IAAI,MAAJ,IAAc,OAAO,GAAP,EAAnB,CAAiC,CAGhC,MAAM,MAAQ,OAAO,MAAP,CAAc,OAAd,CAAsB,KAAtB,EAAR,CAH0B,KAIhC,CAAM,IAAN,CAAW,EAAX,CAAe,GAAf,EAJgC,IAK3B,IAAI,IAAJ,IAAY,KAAjB,CAAwB,CACvB,OAAO,MAAP,CAAc,MAAd,CAAsB,CAAC,IAAD,CAAtB,EADuB,CAAxB,CALD,YASA,CAAa,aAAb,CAA6B,aAA7B,CAVgD,CAAjD,GAcI,kBAAkB,IAAlB,CAAuB,SAAS,IAAT,CAA3B,CAA2C,CAC1C,OAAO,KAAP,CAAe,IAAf,CAD0C,CAA3C,QAKA,CAAS,IAAT,CAAc,WAAd,CAA0B,QAAQ,SACjC,CAAC;;aAAD,GAEc,KAAK,aAAL,EAAmB;;;eAFjC,GAKgB,KAAK,MAAL,EAAY;;SAL5B,CADiC,CAAlC,EAiCA","file":"main.js","sourcesContent":["/*\n * Client entry point.\n * NOTE: All modules use strict mode through the Babel transpiler\n */\n\nimport * as dom4 from '../vendor/dom4' // DOM level 4 polyfill\nimport * as Cookie from '../vendor/js-cookie'\nimport {parseEl, parseHTML} from './util'\nimport {defer, execDeferred} from './defer'\nimport lang from 'lang'\n\n// TEMP: Will later get imported by the post modules\nimport * as state from './state'\n\nimport OptionsPanel from './options/view'\n\n//Renders the options panel, after more important computation has been done\ndefer(() => new OptionsPanel())\n\n// Clear cookies, if versions mismatch.\nconst cookieVersion = 3\nif (localStorage.cookieVersion != cookieVersion) {\n\tfor (let cookie in Cookie.get()) {\n\t\t// Clear legacy cookies that were set for each board separatly.\n\t\t// Otherwise, they would override the new ones.\n\t\tconst paths = config.boards.enabled.slice()\n\t\tpaths.push('', '/')\n\t\tfor (let path of paths) {\n\t\t\tCookie.remove(cookie, {path})\n\t\t}\n\t}\n\tlocalStorage.cookieVersion = cookieVersion\n}\n\n// You can invoke the client-side debug mode with the `debug=true` query string\nif (/[&\\?]debug=true/.test(location.href)) {\n\tconfig.debug = true\n}\n\n// Load language-specific CSS\ndocument.head.appendChild(parseEl(parseHTML\n\t`<style>\n\t\t.locked:after {\n\t\t\tcontent: \"${lang.thread_locked}\";\n\t\t}\n\t\t.locked > header nav:after {\n\t\t\tcontent: \" (${lang.locked})\";\n\t\t}\n\t</style>`))\n\n/*\n// 2nd tier dependacy modules. These are needed before the websocket\n// connection is opened, because they populate the dispatcher handler object.\nextend(main, {\n\tloop: require('./loop'),\n\ttime: require('./time'),\n\tamusement: require('./amusement')\n});\n\n// Load post models and views\nmain.posts = require('./posts')\nmain.Extract = require('./extract')\n// Start the client\nmain.client = require('./client')\nmain.conection = require('./connection')\n\n// Load independant auxilary modules\nextend(main, {\n\thistory: require('./history'),\n\thide: require('./hide')\n})\n*/\n\nexecDeferred()\n//events.request('loading:hide')\n"],"sourceRoot":"/source/"}