{"version":3,"sources":["posts/render/body.js"],"names":[],"mappings":"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","file":"posts/render/body.js","sourcesContent":["import {config} from '../state'\nimport {escape} from 'underscore'\nimport {renderPostLink} from './etc'\n\n// Render the text body of a post\nexport function renderBody(data) {\n\tif (!data.state) {\n\t\t// Initial post state [new_line, no_qoute, no_spoiler]\n\t\tdata.state = [0, 0, 0]\n\t}\n\tlet html = renderFragment(data.body, data.state, data.dice)\n\tif (data.state[1]) { // Close quote on post end\n\t\thtml += '</em>'\n\t}\n\tif (data.state[2]) { // Same with spoilers\n\t\thtml += '</del>'\n\t}\n\treturn html\n}\n\n// Parse commited text body fragment\nexport function renderFragment(frag, data) {\n\tconst lines = frag.split('\\n'),\n\t\t{state} = data\n\tlet html = ''\n\tfor (let i = 0; i < lines.length; i++) {\n\t\t// Start a new line\n\t\tif (state[0] && i % 2) {\n\t\t\t// Close quoute\n\t\t\tif (state[1] % 2) {\n\t\t\t\thtml += '</em>'\n\t\t\t\tstate[1]++\n\t\t\t}\n\t\t\thtml += '<br>'\n\t\t\tstate[0] = 0\n\t\t}\n\n\t\t// Quote or line starts with link/embed\n\t\tconst line = lines[i]\n\t\tif (!state[0] && line.startsWith('>')) {\n\t\t\thtml += '<em>'\n\t\t\tstate[1]++\n\t\t}\n\n\t\t// Bodies may be empty\n\t\tif (frag) {\n\t\t\tfor (let word of line.split(' ')) {\n\t\t\t\thtml += parseWord(word, data)\n\t\t\t\tstate[0] = 1\n\t\t\t}\n\t\t}\n\t}\n\treturn html\n}\n\n// Convert a word to it's appropriate HTML representation\nfunction parseWord(word, data) {\n\t// `[spoiler]` and `[/spoiler]` are treated the same way. You can't nest\n\t// them.\n\tconst split = word.split(/\\[\\/?spoiler]/i)\n\tlet html = ''\n\tfor (let i = 0; i < split.length; i++) {\n\t\t// Insert spoiler tags\n\t\tif (i % 2) {\n\t\t\thtml += `<${data.state[2]++ % 2 ? '/' : ''}del>`\n\n\t\t\t// TODO: Do we need special logic for postForms here?\n\t\t}\n\n\t\tconst bit = split[i]\n\t\tif (/^>>\\d+$/.test(bit)) {\n\t\t\t// Post links\n\t\t\thtml += parsePostLink(bit, data.links)\n\t\t} else if (/^>>>\\/\\w+\\//.test(bit)) {\n\t\t\t// Internal and custom reference URLs\n\t\t\thtml += parseReference(bit)\n\t\t} else if (/^https?:\\/\\/[^-A-Za-z0-9+&@#/%?=~_]$/.test(bit)) {\n\t\t\t// Generic URLs\n\t\t\thtml += parseURL(bit)\n\t\t} else if (/<strong>.+<\\/strong>/.test(bit)) {\n\t\t\t// Hash command results. Already verified server-side.\n\t\t\thtml += bit\n\t\t} else {\n\t\t\thtml += escape(bit)\n\t\t}\n\t}\n\treturn html\n}\n\n// Verify and render a link to other posts\nfunction parsePostLink(bit, links) {\n\tif (!links) {\n\t\treturn bit\n\t}\n\tconst num = bit.match(/^>>\\/(\\d+)$/)[1],\n\t\tverified = links[num]\n\tif (!verified) {\n\t\treturn bit\n\t}\n\treturn renderPostLink(num, verified.board, verified.OP)\n}\n\n// Generate all possible refference name and link pairs\nconst refTargets = {},\n\t{boards} = config\nfor (let board of boards.enabled) {\n\trefTargets[board] = `../${board}/`\n}\nfor (let [name, link] of boards.psuedo.concat(boards.links)) {\n\trefTargets[name] = link\n}\n\n// Parse internal or customly set reference URL\nfunction parseReference(bit) {\n\tconst name = bit.match(/^>>>\\/(\\w+)\\/$/)[1],\n\t\thref = refTargets[name]\n\tif (!href) {\n\t\treturn bit\n\t}\n\treturn newTabLink(href, bit)\n}\n\n// Render and anchor link that opens in a new tab\nfunction newTabLink(href, text) {\n\treturn `<a href=\"${href}\" target=\"_blank\">${text}</a>`\n}\n\n// Render generic URLs and embed, if aplicable\nfunction parseURL(bit) {\n\n\t// TODO: Embeds\n\n\treturn newTabLink(encodeURI(href), bit)\n}\n"],"sourceRoot":"/source/"}