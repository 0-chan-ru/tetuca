{"version":3,"sources":["posts/models.js"],"names":[],"mappings":"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","file":"posts/models.js","sourcesContent":["/*\nGeneral post backbone models\n */\n\nlet main = require('../main'),\n\t{_, Backbone, state} = main;\n\nexports.Post = Backbone.Model.extend({\n\tidAttribute: 'num',\n\tinitialize() {\n\t\tstate.posts.add(this);\n\t},\n\t// Proxy commands to the view(s). Using a central channel helps us reduce\n\t// listener count overhead.\n\tdispatch(command, ...args) {\n\t\tthis.trigger('dispatch', command, ...args);\n\t},\n\tremove() {\n\t\t// Remove view\n\t\tthis.stopListening().dispatch('remove');\n\t\t// Remove from post collection\n\t\tstate.posts.remove(this);\n\t},\n\tupdate(frag, links, dice) {\n\t\tconst updates = {\n\t\t\tbody: this.get('body') + frag\n\t\t};\n\t\tif (links)\n\t\t\t_.extend(this.get('links'), links);\n\t\tif (dice)\n\t\t\tupdates.dice = (this.get('dice') || []).concat(dice);\n\t\tthis.set(updates);\n\t},\n\t// Calling a method is always less overhead than binding a dedicated\n\t// listener for each post's image\n\tsetImage(image, silent) {\n\t\tthis.set('image', image);\n\t\tif (!silent)\n\t\t\tthis.dispatch('renderImage', image);\n\t},\n\tsetSpoiler(spoiler, info) {\n\t\tlet image = this.get('image');\n\t\timage.spoiler = spoiler;\n\t\tthis.dispatch('renderImage', image);\n\t\tthis.moderationInfo(info);\n\t},\n\tremoveImage(info) {\n\t\t// Staff won't have the image removed, but rerendered with\n\t\t// indication, that it has been deleted and extra information\n\t\tthis.moderationInfo(info) \n\t\t\t|| this.unset('image').dispatch('renderImage');\n\t},\n\tdeletePost(info) {\n\t\tthis.moderationInfo(info) || this.remove();\n\t},\n\tsetBan(display, info) {\n\t\t// Displaying the 'USER WAS BANNED FOR THIS POST' message and\n\t\t// renderring the moderation info are independant actions\n\t\tif (display)\n\t\t\tthis.set('ban', true).dispatch('renderBan');\n\t\tthis.moderationInfo(info);\n\t},\n\taddBacklink(num, op) {\n\t\tlet backlinks = this.get('backlinks') || {};\n\t\tbacklinks[num] = op;\n\t\tthis.set({backlinks})\n\t\t\t.dispatch('renderBacklinks', backlinks);\n\t},\n\t// Add info about the moderation action taken. This is only used on\n\t// authenticated staff clients, but for sanity, lets keep it here in\n\t// common model methods.\n\tmoderationInfo(info) { \n\t\tif (!info)\n\t\t\treturn false;\n\t\tconst mod = this.get('mod') || [];\n\t\tmod.push(info);\n\t\tthis.set('mod', mod)\n\t\t\t.dispatch('renderModerationInfo', mod);\n\t\treturn true;\n\t}\n});\n\nexports.Thread = exports.Post.extend({\n\tdefaults: {\n\t\treplies: [],\n\t\tomit: 0,\n\t\timage_omit: 0\n\t},\n\tinitialize() {\n\t\t// Omitted images can only be calculated, if there are omitted posts\n\t\tif (this.get('omit'))\n\t\t\tthis.getImageOmit();\n\t\tstate.posts.add(this);\n\t},\n\tremove() {\n\t\tthis.stopListening().dispatch('remove');\n\t\tstate.posts.remove(this);\n\n\t\t// Propagate model removal to all replies\n\t\tconst replies = this.get('replies');\n\t\tfor (let i = 0, lim = replies.length; i < lim; i++) {\n\t\t\tlet model = state.posts.get(replies[i]);\n\t\t\tif (model)\n\t\t\t\tmodel.remove();\n\t\t}\n\t},\n\t/*\n\t With the current renderring and storage implementations we can not get the\n\t image omit count during the server-side render.\n\t */\n\tgetImageOmit() {\n\t\tlet image_omit = this.get('imgctr') -1;\n\t\tconst replies = this.get('replies');\n\n\t\tfor (let i = 0, lim = replies.length; i < lim; i++) {\n\t\t\tlet model = state.posts.get(replies[i]);\n\t\t\tif (!model)\n\t\t\t\tcontinue;\n\t\t\tif (model.get('image'))\n\t\t\t\timage_omit--;\n\t\t}\n\t\tthis.set('image_omit', image_omit);\n\t},\n\ttoggleLocked(val, info) {\n\t\tthis.moderationInfo(info);\n\t\tthis.set('locked', val).dispatch('renderLocked', val);\n\t}\n});\n"],"sourceRoot":"/source/"}