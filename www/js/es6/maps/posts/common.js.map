{"version":3,"sources":["posts/common.js"],"names":[],"mappings":"iGAIM,WAAO,QAAQ,SAAR,CAAP,CACL,aAAS,QAAQ,UAAR,CAAT,OACC,EAA6D,KAA7D,QAAG,SAA0D,KAA1D,eAAU,OAAgD,KAAhD,aAAQ,KAAwC,KAAxC,WAAM,KAAkC,KAAlC,WAAM,SAA4B,KAA5B,eAAU,QAAkB,KAAlB,cAAS,MAAS,KAAT,MAEtD,OAAO,OAAP,CAAiB,OAAO,QAAP,CAAgB,MAAhB,CAAuB,CACvC,UAAW,OAAX,CAEA,YAAa,CACZ,KAAK,QAAL,CAAc,KAAK,KAAL,CAAY,UAA1B,CAAsC,KAAK,QAAL,CAAtC,CADY,CAAb,CAIA,YAAa,CACZ,GAAI,QAAQ,GAAR,CAAY,WAAZ,CAAJ,CACC,KAAK,SAAL,GADD,OAEO,IAAP,CAHY,CAAb,CAMA,SAAS,OAAT,CAA2B,+BAAN,mFAAM,IAC1B,CAAK,OAAL,EAAc,GAAG,IAAH,CAAd,CAD0B,CAA3B,CAIA,WAAW,IAAX,CAAiB,CAChB,GAAI,CAAC,KAAK,UAAL,CACJ,KAAK,UAAL,CAAkB,KAAK,EAAL,CAAQ,KAAR,CAAc,YAAd,CAAlB,CADD,MAKM,MAAQ,KAAK,KAAL,CAAW,UAAX,CANE,IAOhB,CAAK,UAAL,CAAgB,SAAhB,CAA4B,SAAS,QAAT,CAAkB,KAAlB,EAAyB,IAAzB,CAA8B,MAAM,IAAN,CAA1D,CAPgB,CAAjB,CASA,YAAa,CACZ,KAAK,EAAL,CAAQ,KAAR,CAAc,MAAd,EAAsB,SAAtB,CAAkC,SAAS,IAAT,CAAc,KAAK,KAAL,CAAW,GAAX,CAAe,MAAf,CAAd,CAAlC,CADY,CAAb,CAGA,gBAAgB,KAAhB,CAAuB,CACtB,KAAK,EAAL,CAAQ,KAAR,CAAc,OAAd,EAAuB,SAAvB,CAAmC,SAAS,SAAT,CAAmB,KAAnB,CAAnC,CADsB,CAAvB,CAIA,KAAM,EAAN,CAIA,WAAY,CACX,KAAK,EAAL,CAAQ,KAAR,CAAc,OAAd,EAAuB,SAAvB,CAAmC,CAAC,gBAAD,GAAmB,KAAK,IAAL,EAAU,GAA7B,CAAnC,CADW,CAAZ,CAIA,YAAa,CACZ,KAAK,EAAL,CAAQ,KAAR,CAAc,OAAd,EAAuB,SAAvB,CAAmC,SAAS,IAAT,CAAc,KAAK,KAAL,CAAW,UAAX,CAAjD,CADY,CAAb,CAGA,qBAAqB,IAArB,CAA2B,CAC1B,MAAM,GAAK,KAAK,YAAL,EAAL,CADoB,EAE1B,CAAG,KAAH,CAAS,SAAT,EAAoB,MAApB,GAF0B,EAG1B,CAAG,KAAH,CAAS,YAAT,EAAuB,MAAvB,CAA8B,KAAK,QAAL,CAAc,SAAS,OAAT,CAAiB,IAAjB,CAAd,CAA9B,EAH0B,CAA3B,CAKA,cAAe,CACd,OAAO,KAAK,EAAL,CAAQ,KAAR,CAAc,YAAd,CAAP,CADc,CAAf,CAGA,WAAY,CACX,MAAM,GAAK,KAAK,YAAL,EAAL,CADK,EAEX,CAAG,KAAH,CAAS,aAAT,EAAwB,MAAxB,GAFW,EAGX,CAAG,KAAH,CAAS,YAAT,EAAuB,KAAvB,CAA6B,KAAK,QAAL,CAAc,SAAS,MAAT,EAAd,CAA7B,EAHW,CAAZ,CAKA,cAAc,OAAd,CAAuB,OACf,GAAM,KAAN,GADe,GAElB,OAAJ,CACC,GAAG,SAAH,CAAa,GAAb,CAAiB,SAAjB,EADD,KAEK,CACJ,GAAG,SAAH,CAAa,MAAb,CAAoB,SAApB,EADI,EAEJ,CAAG,KAAH,CAAS,YAAT,EAAuB,SAAvB,GAFI,CAFL,CAFD,CAzDgB,CAAjB","file":"posts/common.js","sourcesContent":["/*\n * Common methods to both OP and regular posts\n */\n\nconst main = require('../main'),\n\timager = require('./imager'),\n\t{_, Backbone, common, util, lang, oneeSama, options, state} = main;\n\nmodule.exports = imager.Hidamari.extend({\n\tclassName: 'glass',\n\t// One-way communication channel to the model\n\tinitialize() {\n\t\tthis.listenTo(this.model, 'dispatch', this.redirect);\n\t},\n\t// Extra initialisation logic for posts renderred client-side\n\tclientInit() {\n\t\tif (options.get('anonymise'))\n\t\t\tthis.anonymise();\n\t\treturn this;\n\t},\n\t// Proxy to the appropriate method\n\tredirect(command, ...args) {\n\t\tthis[command](...args);\n\t},\n\t// Update the post's text body\n\tupdateBody(frag) {\n\t\tif (!this.blockquote)\n\t\t\tthis.blockquote = this.el.query('blockquote');\n\n\t\t// This will rerender the HTML content on each update. Might be\n\t\t// some overhead involved, but simplifies live updates greatly.\n\t\tconst model = this.model.attributes;\n\t\tthis.blockquote.innerHTML = oneeSama.setModel(model).body(model.body);\n\t},\n\trenderTime() {\n\t\tthis.el.query('time').outerHTML = oneeSama.time(this.model.get('time'));\n\t},\n\trenderBacklinks(links) {\n\t\tthis.el.query('small').innerHTML = oneeSama.backlinks(links);\n\t},\n\t// Admin JS injections\n\tfun() {\n\t\t// Fun goes here\n\t},\n\t// Self-delusion tripfag filter\n\tanonymise() {\n\t\tthis.el.query('.name').innerHTML = `<b class=\"name\">${lang.anon}<b>`;\n\t},\n\t// Restore regular name\n\trenderName() {\n\t\tthis.el.query('.name').outerHTML = oneeSama.name(this.model.attributes);\n\t},\n\trenderModerationInfo(info) {\n\t\tconst el = this.getContainer();\n\t\tel.query('.modLog').remove();\n\t\tel.query('blockquote').before(util.parseDOM(oneeSama.modInfo(info)));\n\t},\n\tgetContainer() {\n\t\treturn this.el.query('.container');\n\t},\n\trenderBan() {\n\t\tconst el = this.getContainer();\n\t\tel.query('.banMessage').remove();\n\t\tel.query('blockquote').after(util.parseDOM(oneeSama.banned()));\n\t},\n\trenderEditing(editing) {\n\t\tconst {el} = this;\n\t\tif (editing)\n\t\t\tel.classList.add('editing');\n\t\telse {\n\t\t\tel.classList.remove('editing');\n\t\t\tel.query('blockquote').normalize();\n\t\t}\n\t}\n});\n"],"sourceRoot":"/source/"}