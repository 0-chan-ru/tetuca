{"version":3,"sources":["client/drop.js"],"names":[],"mappings":"iGAIM,WAAO,QAAQ,QAAR,CAAP,OACJ,IAAc,KAAd,UAAK,MAAS,KAAT,MAEP,SAAS,UAAT,CAAoB,CAApB,CAAuB,CACtB,EAAE,eAAF,GADsB,CAEtB,CAAE,cAAF,GAFsB,MAGf,MAAS,EAAE,YAAF,CAAT,MAHe,GAIlB,CAAC,MAAM,MAAN,CACJ,OADD,IAEI,SAAW,KAAK,OAAL,CAAa,UAAb,CAAX,CANkB,GAOlB,CAAC,QAAD,CAAW,CACd,MAAM,OAAS,MAAM,IAAN,CAAW,GAAX,CAAe,QAAf,CAAT,CADQ,GAEV,MAAJ,CACC,KAAK,OAAL,CAAa,aAAb,CAA4B,MAA5B,EADD,KAEK,CACJ,MAAM,QAAU,EAAE,MAAF,CAAS,OAAT,CAAiB,SAAjB,CAAV,CADF,GAEA,OAAJ,CACC,KAAK,OAAL,CAAa,aAAb,CAA4B,IAAI,MAAJ,CAAW,OAAX,CAA5B,EADD,CAJD,CAFD,KAUK,CACJ,MAAM,MAAQ,SAAS,KAAT,CAAe,UAAf,CADV,GAEA,MAAM,SAAN,EAAmB,MAAM,QAAN,CACtB,OADD,CAZD,GAgBI,CAAC,QAAD,CACH,SAAW,KAAK,OAAL,CAAa,UAAb,CAAX,CADD,GAEI,MAAM,MAAN,CAAe,CAAf,CAAkB,CACrB,SAAS,WAAT,CAAqB,iBAArB,EADqB,QAAtB,MAOM,MAAQ,SAAS,aAAT,EAAR,CACL,KAAO,IAAI,QAAJ,EAAP,CAjCqB,IAkCtB,CAAK,MAAL,CAAY,OAAZ,CAAqB,MAAM,CAAN,CAArB,EAlCsB,IAmCjB,IAAI,GAAJ,IAAW,KAAhB,CAAuB,CACtB,KAAK,MAAL,CAAY,GAAZ,CAAiB,MAAM,GAAN,CAAjB,EADsB,CAAvB,MAIM,IAAM,IAAI,cAAJ,EAAN,CAvCgB,GAwCtB,CAAI,IAAJ,CAAS,MAAT,CAAiB,IAAI,SAAJ,EAAjB,EAxCsB,GAyCtB,CAAI,gBAAJ,CAAqB,QAArB,CAA+B,kBAA/B,EAzCsB,GA0CtB,CAAI,kBAAJ,CAAyB,YAAzB,CA1CsB,GA2CtB,CAAI,IAAJ,CAAS,IAAT,EA3CsB,QA6CtB,CAAS,eAAT,GA7CsB,CAAvB,SAgDS,YAAT,EAAwB,CACvB,GAAI,KAAK,UAAL,EAAmB,CAAnB,EAAwB,KAAK,MAAL,EAAe,GAAf,CAC3B,OADD,MAEM,IAAM,KAAK,YAAL,CAHW,GAMnB,CAAC,6BAA6B,IAA7B,CAAkC,GAAlC,CAAD,CACH,KAAK,OAAL,CAAa,UAAb,EAAyB,WAAzB,CAAqC,GAArC,EADD,CAND,SAUS,SAAT,CAAmB,CAAnB,CAAsB,CACrB,EAAE,eAAF,GADqB,CAErB,CAAE,cAAF,GAFqB,CAAtB,SAKS,eAAT,CAAyB,EAAzB,CAA6B,CAC5B,GAAG,WAAH,CAAgB,SAAhB,EAD4B,EAE5B,CAAG,UAAH,CAAe,SAAf,EAF4B,EAG5B,CAAG,UAAH,CAAe,SAAf,EAH4B,EAI5B,CAAG,MAAH,CAAW,UAAX,EAJ4B,SAMnB,EAAT,CAAY,IAAZ,CAAkB,IAAlB,CAAwB,CACvB,GAAG,gBAAH,CAAoB,IAApB,CAA0B,IAA1B,CAAgC,KAAhC,EADuB,CAAxB,CAND,GAWI,CAAC,KAAK,QAAL,CACJ,KAAK,KAAL,CAAW,MAAM,gBAAgB,KAAK,QAAL,CAAc,CAAd,CAAhB,CAAN,CAAX,CADD","file":"client/drop.js","sourcesContent":["/*\n File drag and drop uploads\n */\n\nconst main = require('./main'),\n\t{etc, state} = main;\n\nfunction dragonDrop(e) {\n\te.stopPropagation();\n\te.preventDefault();\n\tconst {files} = e.dataTransfer;\n\tif (!files.length)\n\t\treturn;\n\tlet postForm = main.request('postForm');\n\tif (!postForm) {\n\t\tconst thread = state.page.get('thread');\n\t\tif (thread)\n\t\t\tmain.request('openPostBox', thread);\n\t\telse {\n\t\t\tconst section = e.target.closest('section');\n\t\t\tif (section)\n\t\t\t\tmain.request('openPostBox', etc.getNum(section));\n\t\t}\n\t}\n\telse {\n\t\tconst attrs = postForm.model.attributes;\n\t\tif (attrs.uploading || attrs.uploaded)\n\t\t\treturn;\n\t}\n\n\tif (!postForm)\n\t\tpostForm = main.request('postForm');\n\tif (files.length > 1) {\n\t\tpostForm.uploadError('Too many files.');\n\t\treturn;\n\t}\n\n\t// Drag and drop does not supply a fakepath to file, so we have to use\n\t// a separate upload form from the postForm one. Meh.\n\tconst extra = postForm.prepareUpload(),\n\t\tdata = new FormData();\n\tdata.append('image', files[0]);\n\tfor (let key in extra) {\n\t\tdata.append(key, extra[key]);\n\t}\n\t\n\tconst xhr = new XMLHttpRequest();\n\txhr.open('POST', etc.uploadURL());\n\txhr.setRequestHeader('Accept', 'application/json');\n\txhr.onreadystatechange = upload_shita;\n\txhr.send(data);\n\n\tpostForm.notifyUploading();\n}\n\nfunction upload_shita() {\n\tif (this.readyState != 4 || this.status == 202)\n\t\treturn;\n\tconst err = this.responseText;\n\t\n\t// Everything just fine. Don't need to report.\n\tif (!/legitimate imager response/.test(err))\n\t\tmain.request('postForm').uploadError(err);\n}\n\nfunction stop_drag(e) {\n\te.stopPropagation();\n\te.preventDefault();\n}\n\nfunction setupUploadDrop(el) {\n\tgo('dragenter', stop_drag);\n\tgo('dragexit', stop_drag);\n\tgo('dragover', stop_drag);\n\tgo('drop', dragonDrop);\n\n\tfunction go(name, func) {\n\t\tel.addEventListener(name, func, false);\n\t}\n}\n\nif (!main.isMobile)\n\tmain.defer(() => setupUploadDrop(main.$threads[0]));\n\n"],"sourceRoot":"/source/"}