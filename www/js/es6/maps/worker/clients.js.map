{"version":3,"sources":["worker/clients.js"],"names":[],"mappings":"6JAIQ,0BAAU,8BAAY,gDACtB,gDAED,MAAM,KAAO,EAAP,sBACN,MAAM,OAAS,IAAI,UAAJ,EAAT,0BAIb,KAAK,SAAL,CAAiB,OAChB,IAAI,MAAJ,CAAW,GAAX,CADgB,CAKjB,MAAM,MAAN,CACC,YAAY,GAAZ,CAAiB,CAChB,KAAK,IAAL,CAAY,IAAI,KAAJ,CAAU,CAAV,CAAZ,CADgB,IAEhB,CAAK,IAAL,CAAU,SAAV,CAAsB,KAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,CAAtB,CAFgB,IAGhB,CAAK,QAAL,CAAc,IAAI,IAAJ,CAAd,CAHgB,IAMZ,EAAJ,CANgB,GAOb,CACF,GAAK,SAAS,CAAT,CAAL,CADE,CAAH,MAES,MAAM,IAAN,EATO,IAUhB,CAAK,EAAL,CAAU,EAAV,CAVgB,IAWhB,CAAK,EAAL,EAAW,IAAX,CAXgB,CAAjB,QAgBA,CAAS,GAAT,CAAc,CACb,KAAK,UAAL,GADa,MAEP,MAAQ,KAAK,QAAL,CAAc,GAAd,CAAR,CAFO,MAGb,CAAO,IAAP,CAAa,KAAb,EAHa,MAIN,MAAiB,MAAjB,MAJM,MAIC,OAAU,MAAV,OAJD,MAKb,CAAO,GAAP,CAAW,OAAS,MAAT,CAAkB,KAAlB,CAAyB,IAApC,EALa,CAAd,UASA,EAAa,CACZ,OAAO,MAAP,CAAc,KAAK,KAAL,CAAY,IAA1B,EADY,MAEZ,CAAO,MAAP,CAAc,KAAK,MAAL,CAAa,IAA3B,EAFY,CAAb,QAOA,CAAS,IAAT,CAAe,CACd,MAAM,MAAQ,CACb,MAAO,KAAK,KAAL,CAAW,qBAAX,EAAkC,CAAlC,CAAP,CACA,OAAQ,KAAK,KAAL,CAAW,oCAAX,CAAR,CACA,MAAO,KAAK,KAAL,CAAW,iBAAX,CAAP,CAHK,CADQ,IAMT,IAAI,GAAJ,IAAW,CAAC,QAAD,CAAW,OAAX,CAAhB,CAAqC,CACpC,MAAM,IAAM,MAAM,GAAN,CAAN,CAD8B,KAEpC,CAAM,GAAN,EAAa,IAAM,SAAS,IAAI,CAAJ,CAAT,CAAN,CAAyB,CAAzB,CAFuB,CAArC,OAIO,KAAP,CAVc,CAAf,MAcA,EAAS,CACR,KAAK,UAAL,GADQ,IAER,CAAK,IAAL,CAAU,KAAV,GAFQ,OAGD,KAAK,KAAK,EAAL,CAAZ,CAHQ,CAAT,OAOA,CAAQ,GAAR,CAAa,CACZ,OAAQ,IAAI,IAAJ,EACR,KAAK,QAAQ,UAAR,CACJ,KAAK,MAAL,GADD,MADA,QAKC,MAAM,IAAI,KAAJ,CAAU,gCAAkC,IAAI,IAAJ,CAAlD,CADD,CALY,CAAb,CAtDD","file":"worker/clients.js","sourcesContent":["/*\n Functions for sending and receiving messages from clients\n*/\n\nimport {randomID, WeakSetMap, message} from '../common'\nimport {extend} from 'underscore'\n\nexport const byID = {}\nexport const byPage = new WeakSetMap()\n\n// Establish a private communication channel and SW-side instance of tab. Only\n// these assingnment requests are sent through the global SW channel.\nself.onmessage = msg =>\n\tnew Client(msg)\n\n// Handles interctions with the client browser tabs. In an MVC sense, these\n// contain only the View part.\nclass Client {\n\tconstructor(msg) {\n\t\tthis.port = msg.ports[0]\n\t\tthis.port.onmessage = this.receive.bind(this)\n\t\tthis.setState(msg.data)\n\n\t\t// Dedup client ID\n\t\tlet id\n\t\tdo {\n\t\t\tid = randomID(8)\n\t\t} while (id in byID)\n\t\tthis.id = id\n\t\tbyID[id] = this\n\t}\n\n\t// Replace previous client state with new one parsed from the supplied URL,\n\t// assing to the client lookup map\n\tsetState(url) {\n\t\tthis.unsetState()\n\t\tconst state = this.parseURL(url)\n\t\textend(this, state)\n\t\tconst {board, thread} = state\n\t\tbyPage.add(thread ? thread : board, this)\n\t}\n\n\t// Remove client from client byPage map\n\tunsetState() {\n\t\tbyPage.remove(this.board, this)\n\t\tbyPage.remove(this.thread, this)\n\t}\n\n\t// Parse the client URL into a board name, thread number and last to display\n\t// post number setting\n\tparseURL(href) {\n\t\tconst state = {\n\t\t\tboard: href.match(/\\/([a-zA-Z0-9]+?)\\//)[1],\n\t\t\tthread: href.match(/\\/(\\d+)(:?#\\d+)?(?:[\\?&]\\w+=\\w+)*$/),\n\t\t\tlastN: href.match(/[\\?&]last=(\\d+)/)\n\t\t}\n\t\tfor (let key of ['thread', 'lastN']) {\n\t\t\tconst val = state[key]\n\t\t\tstate[key] = val ? parseInt(val[1]) : 0\n\t\t}\n\t\treturn state\n\t}\n\n\t// Remove the client's instance\n\tremove() {\n\t\tthis.unsetState()\n\t\tthis.port.close()\n\t\tdelete byID[this.id]\n\t}\n\n\t// Receive and parse messages from the browser tab\n\treceive(msg) {\n\t\tswitch (msg.data) {\n\t\tcase message.disconnect:\n\t\t\tthis.remove()\n\t\t\tbreak\n\t\tdefault:\n\t\t\tthrow new Error('Unknown client message type: ' + msg.data)\n\t\t}\n\t}\n}\n"],"sourceRoot":"/source/"}