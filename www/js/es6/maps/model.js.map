{"version":3,"sources":["model.js"],"names":[],"mappings":"6NAUa,oDAAQ","file":"model.js","sourcesContent":["import {extend} from '../vendor/underscore'\n\n/**\n * Generic model class, that all other model classes extend\n */\nexport default class Model {\n\t/**\n\t * Constructs a new model object with the specified attribute object\n\t * @param {Object} attrs\n\t */\n\tconstructor(attrs = {}) {\n\t\tthis.attrs = attrs\n\t\tthis.views = []\n\t\tthis.changeHooks = {}\n\t}\n\n\t/**\n\t * Retrieve a strored value of specific key from the model's attribute\n\t * object\n\t * @param {string} key\n\t * @returns {*}\n\t */\n\tget(key) {\n\t\treturn this.attrs[key]\n\t}\n\n\t/**\n\t * Set a key to a target value\n\t * @param {string} key\n\t * @param {*} val\n\t */\n\tset(key, val) {\n\t\tthis.attrs[key] = val\n\t\tthis.execChangeHooks(key)\n\t}\n\n\t/**\n\t * Extend the model attribute hash, with the suplied object. Shorthand, for\n\t * setting multiple fields simultaniously.\n\t * @param {Object} attrs\n\t */\n\tsetAttrs(attrs) {\n\t\textend(this.attrs, attrs)\n\t\tfor (let key in attrs) {\n\t\t\tthis.execChangeHooks(key)\n\t\t}\n\t}\n\n\t/**\n\t * Append value to an array strored at the given key. If the array does not\n\t * exist, it is created.\n\t * @param {string} key\n\t * @param {*} val\n\t */\n\tappend(key, val) {\n\t\tif (this.attrs[key]) {\n\t\t\tthis.attrs[key].push(val)\n\t\t} else {\n\t\t\tthis.attrs[key] = [val]\n\t\t}\n\t\tthis.execChangeHooks(key)\n\t}\n\n\t/**\n\t * Extend an object at target key. If key does not exist, simply assign the\n\t * object to the key.\n\t * @param {string} key\n\t * @param {Object} object\n\t */\n\textend(key, object) {\n\t\tif (this.attrs[key]) {\n\t\t\textend(this.attrs[key], object)\n\t\t} else {\n\t\t\tthis.attrs[key] = object\n\t\t}\n\t\tthis.execChangeHooks(key)\n\t}\n\n\t/**\n\t * Attach a view to a model. Simply adds the view to the model's view array.\n\t * Each model's method will then provide individual logic for calling the\n\t * attached views' methods.\n\t * @param {View} view\n\t */\n\tattach(view) {\n\t\tthis.views.push(view)\n\t}\n\n\t/**\n\t * Detach a view from the model. Removes reference, so model and/or view\n\t * can be garbage collected.\n\t * @param {View} view\n\t */\n\tdetach(view) {\n\t\tthis.views.splice(this.views.indexOf(view), 1)\n\t}\n\n\t/**\n\t * Remove the model from its collection, if any, and remove all its views\n\t */\n\tremove() {\n\t\tif (this.collection) {\n\t\t\tthis.collection.remove(this)\n\t\t}\n\t\tfor (let view of this.views) {\n\t\t\tview.remove()\n\t\t}\n\t}\n\n\t/**\n\t * Add a function to be executed, when .set(), .setAttrs(), .append() or\n\t * .extend() modify a key's value.\n\t * @param {string} key\n\t * @param {function} func\n\t */\n\tonChange(key, func) {\n\t\tif (this.changeHooks[key]) {\n\t\t\tthis.changeHooks[key].push(func)\n\t\t} else {\n\t\t\tthis.changeHooks[key] = [func]\n\t\t}\n\t}\n\n\t/**\n\t * Execute handlers hooked into key change, if any\n\t * @param {string} key\n\t */\n\texecChangeHooks(key) {\n\t\tif (!this.changeHooks[key]) {\n\t\t\treturn\n\t\t}\n\t\tconst val = this.get(key)\n\t\tfor (let func of this.changeHooks[key]) {\n\t\t\tfunc(val)\n\t\t}\n\t}\n}\n"],"sourceRoot":"/source/"}