{"version":3,"sources":["fsm.js"],"names":[],"mappings":"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","file":"fsm.js","sourcesContent":["// Finite State Machine\nexport default class FSM {\n    // Create a new finite state machine\n    constructor(start) {\n        this.state = start\n        this.spec = {\n            acts: {},\n            ons: {},\n            wilds: {},\n            preflights: {}\n        }\n    }\n\n    // Clone the current FSM\n    clone() {\n        const second = new FSM(this.state)\n        second.spec = this.spec\n        return second\n    }\n\n    // Assign a handler to be execute on arrival to a new state\n    on(key, f) {\n        const ons = this.spec.ons[key]\n        if (ons) {\n            ons.push(f)\n        } else {\n            this.spec.ons[key] = [f]\n        }\n    }\n\n    // Assign sanity check to perform before transition to a new state\n    preflight(key, f) {\n        const pres = this.spec.preflights[key]\n        if (pres) {\n            pres.push(f)\n        } else {\n            this.spec.preflights[key] = [f]\n        }\n    }\n\n    // Specify transition and an optional handler to execute on it\n    act(trans_spec, on_func) {\n        const halves = trans_spec.split('->')\n        if (halves.length != 2) {\n            throw new Error(\"Bad FSM spec: \" + trans_spec)\n        }\n        const parts = halves[0].split(','),\n            dest = halves[1].match(/^\\s*(\\w+)\\s*$/)[1]\n        let tok\n        for (let i = parts.length - 1; i >= 0; i--) {\n            const part = parts[i],\n                m = part.match(/^\\s*(\\*|\\w+)\\s*(?:\\+\\s*(\\w+)\\s*)?$/)\n            if (!m) {\n                throw new Error(\"Bad FSM spec portion: \" + part)\n            }\n            if (m[2]) {\n                tok = m[2]\n            }\n            if (!tok) {\n                throw new Error(\"Tokenless FSM action: \" + part)\n            }\n            const src = m[1]\n            if (src == '*') {\n                this.spec.wilds[tok] = dest\n            } else {\n                let acts = this.spec.acts[src]\n                if (!acts) {\n                    this.spec.acts[src] = acts = {}\n                }\n                acts[tok] = dest\n            }\n        }\n        if (on_func) {\n            this.on(dest, on_func)\n        }\n    }\n\n    // Transition the FSM to a new state\n    feed(ev, param) {\n        const {spec} = this,\n            from = this.state,\n            acts = spec.acts[from],\n            to = (acts && acts[ev]) || spec.wilds[ev]\n        if (to && from != to) {\n            const ps = spec.preflights[to]\n            for (let i = 0; ps && i < ps.length; i++) {\n                if (!ps[i].call(this, param)) {\n                    return false\n                }\n            }\n            this.state = to\n            const fs = spec.ons[to]\n            for (let i = 0; fs && i < fs.length; i++) {\n                fs[i].call(this, param)\n            }\n        }\n        return true\n    }\n\n    // Returns a function that executes FSM.prototype.feed with the suplied\n    // argument\n    feeder(ev) {\n        return param =>  this.feed(ev, param)\n    }\n}\n"],"sourceRoot":"/source/"}