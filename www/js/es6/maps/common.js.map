{"version":3,"sources":["common.js"],"names":[],"mappings":"iGAMO,MAAM,QAAU,CACtB,WAAY,CAAZ,CADY,4BAKN,SAAS,SAAT,CAAmB,GAAnB,CAAwB,CAC9B,OAAO,MAAM,OAAS,GAAT,CAAN,CAAoB,IAApB,CAAyB,OAAO,IAAI,IAAJ,EAAP,CAAhC,CAD8B,CAAxB,+BAMA,SAAS,QAAT,CAAkB,GAAlB,CAAuB,CAC7B,IAAI,GAAK,EAAL,CADyB,IAExB,IAAI,EAAI,CAAJ,CAAO,EAAI,GAAJ,CAAS,GAAzB,CAA8B,CAC7B,IAAI,KAAO,CAAC,KAAK,MAAL,GAAgB,EAAhB,CAAD,CAAqB,QAArB,CAA8B,EAA9B,EAAkC,CAAlC,CAAP,CADyB,GAEzB,KAAK,MAAL,GAAgB,GAAhB,CAAqB,CACxB,KAAO,KAAK,WAAL,EAAP,CADwB,CAAzB,EAGA,EAAM,IAAN,CAL6B,CAA9B,OAOO,EAAP,CAT6B,CAAvB,6BAaA,MAAM,UAAN,CACN,aAAc,CACb,KAAK,GAAL,CAAW,IAAI,GAAJ,EAAX,CADa,CAAd,GAKA,CAAI,GAAJ,CAAS,IAAT,CAAe,CACd,GAAI,CAAC,KAAK,GAAL,CAAS,GAAT,CAAa,GAAb,CAAD,CAAoB,CACvB,KAAK,GAAL,CAAS,GAAT,CAAa,GAAb,CAAkB,IAAI,OAAJ,EAAlB,EADuB,CAAxB,IAGA,CAAK,GAAL,CAAS,GAAT,CAAa,GAAb,EAAkB,GAAlB,CAAsB,IAAtB,EAJc,CAAf,MAQA,CAAO,GAAP,CAAY,IAAZ,CAAkB,CACjB,MAAM,IAAM,KAAK,GAAL,CAAS,GAAT,CAAa,GAAb,CAAN,CADW,GAEb,CAAC,GAAD,CAAM,CACT,OADS,CAAV,GAGA,CAAI,MAAJ,CAAW,IAAX,EALiB,GAMb,IAAI,IAAJ,GAAa,CAAb,CAAgB,CACnB,KAAK,GAAL,CAAS,MAAT,CAAgB,GAAhB,EADmB,CAApB,CAND,OAYA,CAAQ,GAAR,CAAa,EAAb,CAAiB,CAChB,MAAM,IAAM,KAAK,GAAL,CAAS,GAAT,CAAa,GAAb,CAAN,CADU,GAEZ,CAAC,GAAD,CAAM,CACT,OADS,CAAV,GAGA,CAAI,OAAJ,CAAY,EAAZ,EALgB,CAAjB,CA1BM","file":"common.js","sourcesContent":["/*\n Utuility functions used both by the client and worker\n*/\n\n// Tokenization map of message types for browser tab <-> serviceWorker\n// communication\nexport const message = {\n\tdisconnect: 0\n}\n\n// Fetches a JSON response from the API and returns a Promise\nexport function fetchJSON(url) {\n\treturn fetch(\"api/\" + url).then(res => res.json())\n}\n\n// Generate a random alphannumeric string of lower and upper case hexadecimal\n// characters\nexport function randomID(len) {\n\tlet id = ''\n\tfor (let i = 0; i < len; i++) {\n\t\tlet char = (Math.random() * 36).toString(36)[0]\n\t\tif (Math.random() < 0.5) {\n\t\t\tchar = char.toUpperCase()\n\t\t}\n\t\tid += char\n\t}\n\treturn id\n}\n\n// Simple map of sets with automatic array creation and removal\nexport class WeakSetMap {\n\tconstructor() {\n\t\tthis.map = new Map()\n\t}\n\n\t// Add item to key\n\tadd(key, item) {\n\t\tif (!this.map.has(key)) {\n\t\t\tthis.map.set(key, new WeakSet())\n\t\t}\n\t\tthis.map.get(key).add(item)\n\t}\n\n\t// Remove and item from a key\n\tremove(key, item) {\n\t\tconst set = this.map.get(key)\n\t\tif (!set) {\n\t\t\treturn\n\t\t}\n\t\tset.delete(item)\n\t\tif (set.size === 0) {\n\t\t\tthis.map.delete(key)\n\t\t}\n\t}\n\n\t// Execute a function for each item under a key\n\tforEach(key, fn) {\n\t\tconst set = this.map.get(key)\n\t\tif (!set) {\n\t\t\treturn\n\t\t}\n\t\tset.forEach(fn)\n\t}\n}\n"],"sourceRoot":"/source/"}