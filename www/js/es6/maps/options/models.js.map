{"version":3,"sources":["options/models.js"],"names":[],"mappings":"4JAAQ,+CACD,2CACA,yCAGP,MAAM,aAAe,EAAf,mBACS,cAGf,MAAM,WAAN,CAEC,YAAY,KAAZ,CAAmB,CAElB,GAAI,MAAM,IAAN,GAAe,SAAf,EAA4B,CAAC,MAAM,IAAN,CAAY,CAC5C,OAD4C,CAA7C,MAGA,CAAO,IAAP,CAAa,KAAb,EALkB,GAQd,CAAC,KAAK,IAAL,CAAW,CACf,KAAK,IAAL,CAAY,UAAZ,CADe,CAAhB,MAKM,IAAM,QAAQ,KAAR,CAAc,KAAK,EAAL,CAAd,CAAyB,KAAK,GAAL,EAAzB,CAbM,OAclB,CAAQ,QAAR,CAAiB,KAAK,EAAL,CAAS,OACzB,KAAK,QAAL,CAAc,GAAd,CADyB,CAA1B,CAdkB,GAgBd,KAAK,WAAL,GAAqB,KAArB,CAA4B,CAC/B,KAAK,OAAL,CAAa,GAAb,EAD+B,CAAhC,YAGA,CAAa,KAAK,EAAL,CAAb,CAAwB,IAAxB,CAnBkB,CAAnB,IAuBA,EAAO,CACN,OAAO,aAAa,KAAK,EAAL,CAAb,EAAyB,EAAzB,CADD,CAAP,GAKA,EAAM,CACL,MAAM,OAAS,KAAK,IAAL,EAAT,CADD,GAED,CAAC,MAAD,CAAS,CACZ,OAAO,KAAK,OAAL,CADK,CAAb,KAEO,CACN,GAAI,SAAW,OAAX,CAAoB,CACvB,OAAO,KAAP,CADuB,CAAxB,GAGI,SAAW,MAAX,CAAmB,CACtB,OAAO,IAAP,CADsB,CAAvB,MAGM,IAAM,SAAS,MAAT,CAAiB,EAAjB,CAAN,CAPA,GAQF,KAAO,MAAQ,CAAR,CAAW,CACrB,OAAO,GAAP,CADqB,CAAtB,OAGO,KAAK,OAAL,CAXD,CAFP,CAFD,QAoBA,CAAS,GAAT,CAAc,CACb,KAAK,OAAL,CAAa,GAAb,EADa,IAEb,CAAK,GAAL,CAAS,GAAT,EAFa,CAAd,OAMA,CAAQ,GAAR,CAAa,CACZ,GAAI,KAAK,IAAL,CAAW,CACd,KAAK,IAAL,CAAU,GAAV,EADc,CAAf,CADD,GAOA,CAAI,GAAJ,CAAS,CACR,GAAI,MAAQ,KAAK,OAAL,EAAgB,KAAK,IAAL,EAAxB,CAAqC,CACxC,aAAa,OAAb,CAAqB,KAAK,EAAL,CAAS,IAAI,QAAJ,EAA9B,EADwC,CAAzC,CADD,QAOA,CAAS,GAAT,CAAc,CACb,GAAI,KAAK,UAAL,CAAiB,CACpB,OAAO,KAAK,UAAL,CAAgB,GAAhB,CAAP,CADoB,CAArB,OAGO,IAAP,CAJa,CAAd,CAtED,IA+EK,IAAI,IAAJ,IAAY,IAAjB,CAAuB,CACtB,IAAI,WAAJ,CAAgB,IAAhB,EADsB,CAAvB","file":"options/models.js","sourcesContent":["import {extend} from 'underscore'\nimport options from '../options'\nimport opts from './opts'\n\n// All loaded option models\nconst optionModels = {}\nexport default optionModels\n\n// Controler for each individual option\nclass OptionModel {\n\t// Create new option model from template model\n\tconstructor(model) {\n\t\t// Condition for loading option. Optional.\n\t\tif (model.load !== undefined && !model.load) {\n\t\t\treturn\n\t\t}\n\t\textend(this, model)\n\n\t\t// No type = checkbox + default false\n\t\tif (!this.type) {\n\t\t\tthis.type = 'checkbox'\n\t\t}\n\n\t\t// Store option value in central stotage options Backbone model\n\t\tconst val = options.attrs[this.id] = this.get()\n\t\toptions.onChange(this.id, val =>\n\t\t\tthis.onChange(val))\n\t\tif (this.execOnStart !== false) {\n\t\t\tthis.execute(val)\n\t\t}\n\t\toptionModels[this.id] = this\n\t}\n\n\t// Read value from localStorage\n\tread() {\n\t\treturn localStorage[this.id] || \"\"\n\t}\n\n\t// Retrieve option value from storage and parse result. If none, return\n\tget() {\n\t\tconst stored = this.read()\n\t\tif (!stored) {\n\t\t\treturn this.default\n\t\t} else {\n\t\t\tif (stored === 'false') {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tif (stored === \"true\") {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tconst num = parseInt(stored, 10)\n\t\t\tif (num || num === 0) {\n\t\t\t\treturn num\n\t\t\t}\n\t\t\treturn this.default\n\t\t}\n\t}\n\n\t// Handler to be executed on field change in central options storage model\n\tonChange(val) {\n\t\tthis.execute(val)\n\t\tthis.set(val)\n\t}\n\n\t// Execute handler function, if any\n\texecute(val) {\n\t\tif (this.exec) {\n\t\t\tthis.exec(val)\n\t\t}\n\t}\n\n\t// Write value to localStorage, if needed\n\tset(val) {\n\t\tif (val !== this.default || this.read()) {\n\t\t\tlocalStorage.setItem(this.id, val.toString())\n\t\t}\n\t}\n\n\t// Perform value validation, if any. Othervise return true.\n\tvalidate(val) {\n\t\tif (this.validation) {\n\t\t\treturn this.validation(val)\n\t\t}\n\t\treturn true\n\t}\n}\n\n// Create an option model for each object in the array\nfor (let spec of opts) {\n\tnew OptionModel(spec)\n}\n"],"sourceRoot":"/source/"}