{"version":3,"sources":["client/options/models.js"],"names":["System","register","_export","_context","_classCallCheck","instance","Constructor","TypeError","extend","options","opts","_createClass","optionModels","OptionModel","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","spec","setters","_underscore","_options","_opts","execute","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","model","_this","this","undefined","load","type","val","attrs","id","get","onChange","execOnStart","value","localStorage","stored","read","num","parseInt","set","exec","setItem","toString","validation","Symbol","iterator","next","done","err"],"mappings":"AAAA,YAAaA,QAAOC,UAAU,aAAa,aAAa,UAAU,SAASC,EAAQC,GAAwJ,QAASC,GAAgBC,EAASC,GAAa,KAAKD,YAAoBC,IAAc,KAAM,IAAIC,WAAU,qCAAxP,GAAIC,GAAOC,EAAQC,EAAKC,EAAaC,EAAaC,EAAYC,EAA0BC,EAAkBC,EAAeC,EAAUC,EAAMC,CAAsJ,QAAQC,SAAS,SAASC,GAA9Yb,EAAAa,EAAAb,QAAA,SAAAc,GACDb,EAAAa,EAAAA,YAAA,SAAAC,GACAb,EAAAa,EAAAA,aAAAC,QAAA,WAAAb,EAAA,WAAA,QAAAc,GAAAC,EAAAC,GAAA,IAAA,GAAAC,GAAA,EAAAA,EAAAD,EAAAE,OAAAD,IAAA,CAAA,GAAAE,GAAAH,EAAAC,EAAAE,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAAC,OAAAC,eAAAT,EAAAI,EAAAM,IAAAN,IAAA,MAAA,UAAAxB,EAAA+B,EAAAC,GAAA,MAAAD,IAAAZ,EAAAnB,EAAAiC,UAAAF,GAAAC,GAAAb,EAAAnB,EAAAgC,GAAAhC,MAGDM,KAAeV,EAAA,UACNU,GAGTC,EAAA,WAEL,QAFKA,GAEO2B,GAAO,GAAAC,GAAAC,IAAA,IAAAtC,EAAAsC,KAFd7B,GAIe8B,SAAfH,EAAMI,MAAuBJ,EAAMI,KAFrB,CAElBpC,EAGOkC,KAAMF,GAGRE,KAAKG,OACTH,KAAKG,KAAO,WADb,IAKMC,GAAMrC,EAAQsC,MAAML,KAAKM,IAAMN,KAAKO,KAbxBxC,GAcVyC,SAASR,KAAKM,GAAI,SAAAF,GAAA,MACzBL,GAAKS,SAASJ,KACXJ,KAAKS,eAAgB,GACxBT,KAAKlB,QAAQsB,GADdlC,EAGa8B,KAAKM,IAAMN,MAiDX,MApEd/B,GAFKE,IAAAuB,IAAA,OAAAgB,MAAA,WA0BJ,MAAOC,cAAaX,KAAKM,KAAO,MAD1BZ,IAAA,MAAAgB,MAAA,WAMN,GAAME,GAASZ,KAAKa,MADf,IAEAD,EAEE,CACN,GAAe,UAAXA,EACH,OAAO,CADR,IAGe,SAAXA,EACH,OAAO,CADR,IAGME,GAAMC,SAASH,EAAQ,GAPvB,OAQFE,IAAe,IAARA,EACHA,EAEDd,KAAAA,WAZP,MAAOA,MAAAA,cADRN,IAAA,WAAAgB,MAAA,SAkBQN,GACRJ,KAAKlB,QAAQsB,GADAJ,KAERgB,IAAIZ,MAFIV,IAAA,UAAAgB,MAAA,SAMNN,GACHJ,KAAKiB,MACRjB,KAAKiB,KAAKb,MADXV,IAAA,MAAAgB,MAAA,SAMGN,IACCA,IAAQJ,KAAAA,YAAgBA,KAAKa,SAChCF,aAAaO,QAAQlB,KAAKM,GAAIF,EAAIe,eADnCzB,IAAA,WAAAgB,MAAA,SAMQN,GACR,MAAIJ,MAAKoB,WACDpB,KAAKoB,WAAWhB,IAEjB,MA1EHjC,KAAAC,GAAA,EAAAC,GAAA,EAAAC,EAAA2B,MAAA,KA+EN,IAAA1B,EAAiBP,EAAAqD,OAAAC,cAAjBlD,GAAAI,EAAAD,EAAAgD,QAAAC,MAAApD,GAAA,EAASK,EAAAD,EAAAkC,MAAc,GAClBvC,GAAYM,GADjB,MAAAgD,GAAApD,GAAA,EAAAC,EAAAmD,EAAA,QAAA,KAAArD,GAAAG,EAAAA,WAAAA,EAAAA,YAAA,QAAA,GAAAF,EAAA,KAAAC","file":"client/options/models.js","sourcesContent":["import {extend} from 'underscore'\nimport options from '../options'\nimport opts from './opts'\n\n// All loaded option models\nconst optionModels = {}\nexport default optionModels\n\n// Controler for each individual option\nclass OptionModel {\n\t// Create new option model from template model\n\tconstructor(model) {\n\t\t// Condition for loading option. Optional.\n\t\tif (model.load !== undefined && !model.load) {\n\t\t\treturn\n\t\t}\n\t\textend(this, model)\n\n\t\t// No type = checkbox + default false\n\t\tif (!this.type) {\n\t\t\tthis.type = 'checkbox'\n\t\t}\n\n\t\t// Store option value in central stotage options Backbone model\n\t\tconst val = options.attrs[this.id] = this.get()\n\t\toptions.onChange(this.id, val =>\n\t\t\tthis.onChange(val))\n\t\tif (this.execOnStart !== false) {\n\t\t\tthis.execute(val)\n\t\t}\n\t\toptionModels[this.id] = this\n\t}\n\n\t// Read value from localStorage\n\tread() {\n\t\treturn localStorage[this.id] || \"\"\n\t}\n\n\t// Retrieve option value from storage and parse result. If none, return\n\tget() {\n\t\tconst stored = this.read()\n\t\tif (!stored) {\n\t\t\treturn this.default\n\t\t} else {\n\t\t\tif (stored === 'false') {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tif (stored === \"true\") {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tconst num = parseInt(stored, 10)\n\t\t\tif (num || num === 0) {\n\t\t\t\treturn num\n\t\t\t}\n\t\t\treturn this.default\n\t\t}\n\t}\n\n\t// Handler to be executed on field change in central options storage model\n\tonChange(val) {\n\t\tthis.execute(val)\n\t\tthis.set(val)\n\t}\n\n\t// Execute handler function, if any\n\texecute(val) {\n\t\tif (this.exec) {\n\t\t\tthis.exec(val)\n\t\t}\n\t}\n\n\t// Write value to localStorage, if needed\n\tset(val) {\n\t\tif (val !== this.default || this.read()) {\n\t\t\tlocalStorage.setItem(this.id, val.toString())\n\t\t}\n\t}\n\n\t// Perform value validation, if any. Othervise return true.\n\tvalidate(val) {\n\t\tif (this.validation) {\n\t\t\treturn this.validation(val)\n\t\t}\n\t\treturn true\n\t}\n}\n\n// Create an option model for each object in the array\nfor (let spec of opts) {\n\tnew OptionModel(spec)\n}\n"],"sourceRoot":"/source/"}