{"version":3,"sources":["client/state.js"],"names":["System","register","_export","_context","extend","Memory","randomID","getID","Model","Collection","syncs","ownPosts","config","configHash","isMobile","$thread","$name","$email","$banner","mine","posts","setters","_underscore","_memory","_util","_model","_collection","execute","clear","$threads","innerHTML","models","each","model","dispatch","reset","exports","events","request","getModel","el","id","get","window","document","query"],"mappings":"AAAA,YAAaA,QAAOC,UAAU,aAAa,WAAW,SAAS,UAAU,gBAAgB,SAASC,EAAQC,GAAU,GAAIC,GAAOC,EAAOC,EAASC,EAAMC,EAAMC,EAAWC,EAAMC,EAASC,EAAOC,EAAWC,EAASC,EAAQC,EAAMC,EAAOC,EAAQC,EAAKC,CAAM,QAAQC,SAAS,SAASC,GAI1QlB,EAAAkB,EAAAlB,QAAA,SAAAmB,GACDlB,EAAAkB,EAAAA,YAAA,SAAAC,GACClB,EAAAkB,EAAAlB,SAAUC,EAAAiB,EAAAjB,OAAA,SAAAkB,GACXjB,EAAAiB,EAAAA,YAAA,SAAAC,GACAjB,EAAAiB,EAAAA,aAAAC,QAAA,WAkCA,QAASC,KAKfC,SAASC,UAAY,GALEC,OAShBC,KAAK,SAAAC,GAAA,MACXA,GAAMC,SAAS,mBAVOd,EAYjBe,QAZiBC,QAef1B,SAfe2B,OAgBhBC,QAAQ,sBAIT,QAASC,GAASC,GACxB,GAAMC,GAAKlC,EAAMiC,EADW,OAEvBC,GAGErB,EAAMsB,IAAID,GAFT,KAzDFvC,EAAA,QAOIQ,MAAQR,EAAA,QAAAQ,GAAAR,EAAA,WAGNS,MAAWT,EAAA,WAAAS,GAAAT,EAAA,SAGXU,EAAS+B,OAAO/B,QAAPV,EAAA,SAAAU,GAAAV,EAAA,aAGTW,EAAa8B,OAAO9B,YAAPX,EAAA,aAAAW,GAAAX,EAAA,WAGbY,EAAW6B,OAAO7B,UAAPZ,EAAA,WAAAY,GAAAZ,EAAA,UAGXa,EAAU6B,SAASC,MAAM,YAAf3C,EAAA,UAAAa,GAAAb,EAAA,QACVc,EAAQ4B,SAASC,MAAM,UAAf3C,EAAA,QAAAc,GAAAd,EAAA,SACRe,EAAS2B,SAASC,MAAM,WAAf3C,EAAA,SAAAe,GAAAf,EAAA,UACTgB,EAAU0B,SAASC,MAAM,YAAf3C,EAAA,UAAAgB,GAAAhB,EAAA,OAGViB,EAAO,GAAId,GAAO,OAAQ,IAAnBH,EAAA,OAAAiB,GAAAjB,EAAA,QAGPkB,EAAQ,GAAIX,IAAJP,EAAA,QAAAkB,GAGdlB,EAAA,QAAA0B,GAoBA1B,EAAA,WAAAqC","file":"client/state.js","sourcesContent":["/*\n * Central model keeping the state of the page\n */\n\nimport {extend} from 'underscore'\nimport Memory from './memory'\nimport {randomID, getID} from './util'\nimport Model from './model'\nimport Collection from './collection'\n\n// Hot-reloadable configuration\n\n// TODO: We need actual listeners to this model for hot reloads\n\n// Tracks the synchronisation counter of each thread\nexport let syncs = {}\n\n// Posts I made in this tab\nexport const ownPosts = {}\n\n// Configuration object, passed from the server\nexport const config = window.config\n\n// Hash of the the configuration object\nexport const configHash = window.configHash\n\n// Indicates, if in mobile mode. Determined server-side.\nexport const isMobile = window.isMobile\n\n// Cached DOM elements\nexport const $thread = document.query('threads')\nexport const $name = document.query('#name')\nexport const $email = document.query('#email')\nexport const $banner = document.query('#banner')\n\n// Remember which posts are mine for two days\nexport const mine = new Memory('mine', 2)\n\n// All posts currently displayed\nexport const posts = new Collection()\n\n// Clear the current post state and HTML\nexport function clear() {\n\t/*\n\t * Emptying the whole element should be faster than removing each post\n\t * individually through models and listeners\n\t */\n\t$threads.innerHTML = ''\n\n\t// The <threads> tag has already been emptied, no need to perform\n\t// element removal with the default `.remove()` method\n\tmodels.each(model =>\n\t\tmodel.dispatch('stopListening'))\n\n\tposts.reset()\n\n\t// Prevent old threads from syncing\n\texports.syncs = {}\n\tevents.request('massExpander:unset')\n}\n\n// Retrieve model of closest parent post\nexport function getModel(el) {\n\tconst id = getID(el)\n\tif (!id) {\n\t\treturn null\n\t}\n\treturn posts.get(id)\n}\n"],"sourceRoot":"/source/"}