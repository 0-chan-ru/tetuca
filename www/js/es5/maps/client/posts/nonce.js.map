{"version":3,"sources":["client/posts/nonce.js"],"names":["System","register","_export","_context","get","nonces","window","localStorage","JSON","parse","postNonces","e","nonceCache","save_nonces","stringify","today_id","Math","floor","Date","now","create","nonce","common","randomID","tab","state","page","day","destroy","setTimeout","main","setters","execute","require","reply","changed","undefined","yesterday","random"],"mappings":"AAAA,YAAaA,QAAOC,YAAY,SAASC,EAAQC,GASjD,QAASC,KACR,GAAIC,EADU,IAEVC,OAAOC,aACV,IACCF,EAASG,KAAKC,MAAMF,aAAaG,YADlC,MAGOC,QAGPN,GAASO,CAPV,OAQOP,OAVR,QAcSQ,GAAYR,GAChBC,OAAOC,aACVA,aAAaG,WAAaF,KAAKM,UAAUT,GAEzCO,EAAaP,EAJf,QAOSU,KACR,MAAOC,MAAKC,MAAMC,KAAKC,MAAL,OADnB,QAISC,KACR,GAAMf,GAASD,IACdiB,EAAQC,EAAOC,SAAS,GAFR,OAAAlB,GAGVgB,IACNG,IAAKC,EAAMC,KAAKtB,IAAI,SACpBuB,IAAKZ,KALWF,EAOLR,GACLgB,EARR,QAiCSO,GAAQP,GAEhBQ,WAAW,WACV,GAAIxB,GAASD,GACRC,GAAOgB,WAELhB,GAAOgB,GAJOR,EAKTR,KACV,KA3EuD,GAAIyB,GAAKR,EAAOG,EAAMb,CAmEjF,QAAAmB,WAAAC,QAAA,WA/DIF,EAAOG,QAAQ,WACjBX,EAAiBQ,EAAjBR,OAAQG,EAASK,EAATL,MAENb,KAcJkB,EAAKI,MAAM,YAAa9B,GAuBxB0B,EAAKI,MAAM,eAAgBd,GAG3BS,WAAW,WACV,GAAKvB,OAAOC,aAAZ,CAAA,GAGIF,GAASD,IAGT+B,EAAAC,OACEC,EAAYtB,IAAa,CARV,KAShB,GAAIM,KAAShB,GACbA,EAAOgB,GAAOM,KAAOU,UAElBhC,GAAOgB,GAHWc,GAIf,EAGPA,IACHtB,EAAYR,KACXW,KAAKC,MAAoB,IAAdD,KAAKsB,WAYnBR,EAAKI,MAAM,gBAAiBN","file":"client/posts/nonce.js","sourcesContent":["/*\nCryptographic nonces for websocket transactions\n */\n\nlet main = require('../main'),\n\t{common, state} = main;\n\nlet nonceCache = {};\n\nfunction get() {\n\tvar nonces;\n\tif (window.localStorage) {\n\t\ttry {\n\t\t\tnonces = JSON.parse(localStorage.postNonces);\n\t\t}\n\t\tcatch (e) {}\n\t}\n\telse\n\t\tnonces = nonceCache;\n\treturn nonces || {};\n}\nmain.reply('nonce:get', get);\n\nfunction save_nonces(nonces) {\n\tif (window.localStorage)\n\t\tlocalStorage.postNonces = JSON.stringify(nonces);\n\telse\n\t\tnonceCache = nonces;\n}\n\nfunction today_id() {\n\treturn Math.floor(Date.now() / (1000*60*60*24));\n}\n\nfunction create() {\n\tconst nonces = get(),\n\t\tnonce = common.randomID(32);\n\tnonces[nonce] = {\n\t\ttab: state.page.get('tabID'),\n\t\tday: today_id()\n\t};\n\tsave_nonces(nonces);\n\treturn nonce;\n}\nmain.reply('nonce:create', create);\n\n// Expire old nonces\nsetTimeout(function() {\n\tif (!window.localStorage)\n\t\treturn;\n\t// we need a lock on postNonces really\n\tlet nonces = get();\n\n\t// people messing with their system clock will mess with expiry, doh\n\tlet changed;\n\tconst yesterday = today_id() - 1;\n\tfor (let nonce in nonces) {\n\t\tif (nonces[nonce].day >= yesterday)\n\t\t\tcontinue;\n\t\tdelete nonces[nonce];\n\t\tchanged = true;\n\t}\n\n\tif (changed)\n\t\tsave_nonces(nonces);\n}, Math.floor(Math.random()*5000));\n\nfunction destroy(nonce) {\n\t// delete only after a delay so all tabs notice that it's ours\n\tsetTimeout(function() {\n\t\tlet nonces = get();\n\t\tif (!nonces[nonce])\n\t\t\treturn;\n\t\tdelete nonces[nonce];\n\t\tsave_nonces(nonces);\n\t}, 10000);\n}\nmain.reply('nonce:destroy', destroy);\n"],"sourceRoot":"/source/"}