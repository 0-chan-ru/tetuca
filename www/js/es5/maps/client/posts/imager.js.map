{"version":3,"sources":["client/posts/imager.js"],"names":["System","register","_export","_context","_taggedTemplateLiteral","strings","raw","Object","freeze","defineProperties","value","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","create","constructor","enumerable","writable","configurable","setPrototypeOf","__proto__","View","$threads","_templateObject","_templateObject2","Imager","ExpanderModel","massExpander","setters","_view","_state","execute","_View","args","this","getPrototypeOf","exports","Hidamari","Backbone","extend","renderImage","arg","image","manual","reveal","model","el","src","get","figure","query","remove","before","util","parseDOM","oneeSama","window","scrollTop","getBoundingClientRect","top","document","body","height","set","thumbnailRevealed","imageExpanded","tallImage","autoExpandImage","img","indexOf","ext","toggleImageExpansion","expand","fit","options","fitImage","open","imagePaths","renderAudio","newWidth","undefined","newHeight","width","dims","expandImage","both","widthFlag","heightFlag","aspect","fullWidth","fullHeight","maxWidth","imageMaxWidth","maxHeight","innerHeight","offsetHeight","innerWidth","parseInt","closest","left","outerWidth","noMargin","isVideo","attrs","cls","autoplay","loop","controls","lastChild","innerHTML","common","parseHTML","append","Model","initialize","_this2","on","e","preventDefault","toggle","massToggle","find","text","main","lang","expander","models","state","posts","i","l","length","dispatch","reply","unset","which","getModel","target","request","follow"],"mappings":"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","file":"client/posts/imager.js","sourcesContent":["/*\n * Thumbnail and image renderring\n */\n\nimport View from '../view'\nimport {$threads} from '../state'\n\n/**\n * Thumbnail and image renderring logic\n */\nclass Imager extends View {\n    /**\n     * Construct a new post image handler\n     * @param {Object} args\n     */\n    constructor(args) {\n        super(args)\n    }\n}\n\nexports.Hidamari = Backbone.View.extend({\n\t/*\n\t Render entire <figure>. Rerenderring completely each time is considerable\n\t overhed, but the alternative is very convoluted logic. I don't really want\n\t to attach a FSM to each view, just for image renderring.\n\t */\n\trenderImage(arg, image, manual) {\n\t\t/*\n\t\t All kinds of listeners call this method, so we need to ensure we\n\t\t always get the appropriate image object.\n\t\t */\n\t\tconst reveal = arg === true,\n\t\t\t{model, el} = this;\n\t\tif (!image || !image.src)\n\t\t\timage = model.get('image');\n\t\tconst figure = el.query('figure');\n\t\tif (figure)\n\t\t\tfigure.remove();\n\n\t\t// Remove image on mod deletion\n\t\tif (!image)\n\t\t\treturn;\n\t\tel.query('blockquote')\n\t\t\t.before(util.parseDOM(oneeSama.image(image, reveal)));\n\n\t\t// Scroll the post back into view, if contracting images taller than\n\t\t// the viewport\n\t\tif (manual && model.get('tallImage')) {\n\t\t\twindow.scrollTop = el.getBoundingClientRect().top\n\t\t\t\t+ document.body.scrollTop\n\t\t\t\t- document.query('#banner').height;\n\t\t}\n\n\t\tmodel.set({\n\t\t\t// Only used in hidden thumbnail mode\n\t\t\tthumbnailRevealed: reveal,\n\t\t\timageExpanded: false,\n\t\t\ttallImage: false\n\t\t});\n\t},\n\tautoExpandImage() {\n\t\tconst img = this.model.get('image');\n\t\tif (!img\n\t\t\t|| !massExpander.get('expand')\n\t\t\t// Don't auto expand webm/PDF/MP3\n\t\t\t|| ['.webm', '.pdf', '.mp3'].indexOf(img.ext) > -1\n\t\t)\n\t\t\treturn this;\n\t\tthis.toggleImageExpansion(true, img);\n\t\treturn this;\n\t},\n\ttoggleImageExpansion(expand, img, manual) {\n\t\tconst fit = options.get('inlinefit');\n\t\tif (!img || fit === 'none')\n\t\t\treturn;\n\t\tif (expand)\n\t\t\tthis.fitImage(img, fit);\n\t\telse\n\t\t\tthis.renderImage(null, img, manual);\n\t},\n\tfitImage(img, fit){\n\t\t// Open PDF in a new tab on click\n\t\tif (img.ext === '.pdf')\n\t\t\treturn window.open(oneeSama.imagePaths().src + img.src, '_blank');\n\n\t\t// Audio controls are always the same height and do not need to be\n\t\t// fitted\n\t\tif (img.ext === '.mp3')\n\t\t\treturn this.renderAudio(img);\n\n\t\tlet newWidth, newHeight,\n\t\t\twidth = newWidth = img.dims[0],\n\t\t\theight = newHeight = img.dims[1];\n\t\tif (fit === 'full')\n\t\t\treturn this.expandImage(img, {width, height});\n\n\t\tconst both = fit === 'both',\n\t\t\twidthFlag = both || fit === 'width',\n\t\t\theightFlag = both || fit === 'height',\n\t\t\taspect = width / height;\n\t\tlet fullWidth, fullHeight;\n\t\tif (widthFlag) {\n\t\t\tconst maxWidth = this.imageMaxWidth();\n\t\t\tif (newWidth > maxWidth) {\n\t\t\t\tnewWidth = maxWidth;\n\t\t\t\tnewHeight = newWidth / aspect;\n\t\t\t\tfullWidth = true;\n\t\t\t}\n\t\t}\n\t\tif (heightFlag) {\n\t\t\tlet maxHeight = window.innerHeight\n\t\t\t\t- document.query('#banner').offsetHeight;\n\t\t\tif (newHeight > maxHeight) {\n\t\t\t\tnewHeight = maxHeight;\n\t\t\t\tnewWidth = newHeight * aspect;\n\t\t\t\tfullHeight = true;\n\t\t\t}\n\t\t}\n\t\tif (newWidth > 50 && newHeight > 50) {\n\t\t\twidth = newWidth;\n\t\t\theight = newHeight;\n\t\t}\n\t\tthis.expandImage(img, width, height, fullHeight && !fullWidth);\n\t},\n\t// Calculate maximum horizontal dimension an image can be expanded to\n\timageMaxWidth() {\n\t\tconst {el, model} = this;\n\t\treturn window.innerWidth\n\t\t\t- parseInt(el.closest('section').getBoundingClientRect().left) * 2\n\t\t\t- util.outerWidth(model.get('op') ? el : el.query('.background'));\n\t},\n\texpandImage(img, width, height, noMargin) {\n\t\tconst isVideo = img.ext === '.webm';\n\t\tconst attrs = {\n\t\t\tsrc: oneeSama.imagePaths().src + img.src,\n\t\t\twidth,\n\t\t\theight\n\t\t};\n\t\tlet cls = 'expanded';\n\t\tif (noMargin)\n\t\t\tcls += ' noMargin';\n\t\tattrs.class = cls;\n\n\t\tif (isVideo)\n\t\t\tattrs.autoplay = attrs.loop = attrs.controls = true\n\n\t\tthis.el.query('figure').lastChild.innerHTML = common.parseHTML\n\t\t\t`<${isVideo ? 'video' : 'img'} ${attrs}>`;\n\t\tthis.model.set({\n\t\t\timageExpanded: true,\n\t\t\ttallImage: height > window.innerHeight\n\t\t});\n\t},\n\trenderAudio(img) {\n\t\tthis.el.query('figure').append(util.parseDOM(common.parseHTML\n\t\t\t`<audio src=\"${oneeSama.imagePaths().src + img.src}\"\n\t\t\t\twidth=\"300\"\n\t\t\t\theight=\"3em\"\n\t\t\t\tautoplay loop controls\n\t\t\t>\n\t\t\t</audio>`));\n\t\tthis.model.set('imageExpanded', true);\n\t}\n});\n\n// Expand all images\nconst ExpanderModel = Backbone.Model.extend({\n\tinitialize() {\n\t\t$threads.on('click', '#expandImages', e => {\n\t\t\te.preventDefault();\n\t\t\tthis.toggle();\n\t\t});\n\t},\n\ttoggle() {\n\t\tconst expand = !this.get('expand');\n\t\tthis.set('expand', expand).massToggle(expand);\n\t\t$threads\n\t\t\t.find('#expandImages')\n\t\t\t.text(main.lang.expander[+expand]);\n\t},\n\t// More efficent than individual listeners\n\tmassToggle(expand) {\n\t\tconst fit = options.get('inlinefit');\n\t\tif (fit === 'none')\n\t\t\treturn;\n\t\tlet models = state.posts.models;\n\t\tfor (let i = 0, l = models.length; i < l; i++) {\n\t\t\tlet model = models[i],\n\t\t\t\timg = model.get('image');\n\t\t\tif (!img)\n\t\t\t\tcontinue;\n\t\t\tif (expand)\n\t\t\t\tmodel.dispatch('fitImage', img, fit);\n\t\t\telse\n\t\t\t\tmodel.dispatch('renderImage', null, img);\n\t\t}\n\t}\n});\n\nconst massExpander = exports.massExpander = new ExpanderModel();\nmain.reply('massExpander:unset', () => massExpander.unset());\n\n// Proxy image clicks to views. More performant than dedicated listeners for\n// each view.\n$threads.on('click', 'img, video', function(e) {\n\tif (options.get('inlinefit') == 'none' || e.which !== 1)\n\t\treturn;\n\tlet model = util.getModel(e.target);\n\tif (!model)\n\t\treturn;\n\te.preventDefault();\n\n\t// Remove image hover preview, if any\n\tmain.request('imager:clicked');\n\tmodel.dispatch('toggleImageExpansion', !model.get('imageExpanded'),\n\t\tmodel.get('image'), true);\n});\n\n// Reveal/hide thumbnail by clicking [Show]/[Hide] in hidden thumbnail mode\n$threads.on('click', '.imageToggle', function(e) {\n\te.preventDefault();\n\tlet model = util.getModel(e.target);\n\tif (!model)\n\t\treturn;\n\tmain.follow(() =>\n\t\tmodel.dispatch('renderImage', !model.get('thumbnailRevealed')));\n});\n"],"sourceRoot":"/source/"}