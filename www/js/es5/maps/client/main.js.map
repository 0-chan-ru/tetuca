{"version":3,"sources":["client/main.js"],"names":["System","register","_export","_context","Cookie","send","cookieVersion","cookie","paths","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","path","setters","_jsCookie","_send","execute","localStorage","get","config","boards","enabled","slice","push","undefined","Symbol","iterator","next","done","value","remove","err"],"mappings":"AAAA,YAAaA,QAAOC,UAAU,YAAY,UAAU,SAASC,EAAQC,GAAU,GAAIC,GAAOC,EAAKC,EAAcC,EAAOC,EAAMC,EAA0BC,EAAkBC,EAAeC,EAAUC,EAAMC,CAAK,QAAQC,SAAS,SAASC,GAKxNZ,EAAAY,GAAA,SAAAC,GACAZ,EAAAY,IAAAC,QAAA,WAIZ,GADMZ,EAAgB,EAClBa,aAAab,eAAiBA,EAAe,CAChD,IAASC,IAAUH,GAAOgB,MAAO,CAG1BZ,EAAQa,OAAOC,OAAOC,QAAQC,QAHJhB,EAI1BiB,KAAK,GAAI,KAJiBhB,GAAA,EAAAC,GAAA,EAAAC,EAAAe,MAAA,KAKhC,IAAAd,EAAiBJ,EAAAmB,OAAAC,cAAjBnB,GAAAI,EAAAD,EAAAiB,QAAAC,MAAArB,GAAA,EAASK,EAAAD,EAAAkB,MAAe3B,EAChB4B,OAAOzB,GAASO,KAAAA,IADxB,MAAAmB,GAAAvB,GAAA,EAAAC,EAAAsB,EAAA,QAAA,KAAAxB,GAAAG,EAAAA,WAAAA,EAAAA,YAAA,QAAA,GAAAF,EAAA,KAAAC,KALDQ,aASab,cAAgBA","file":"client/main.js","sourcesContent":["/*\n * Client entry point.\n * NOTE: All modules use strict mode through the Babel transpiler\n */\n\nimport * as Cookie from 'js-cookie'\nimport * as send from './send'\n\n// Clear cookies, if versions mismatch.\nconst cookieVersion = 3\nif (localStorage.cookieVersion != cookieVersion) {\n\tfor (let cookie in Cookie.get()) {\n\t\t// Clear legacy cookies that were set for each board separatly.\n\t\t// Otherwise, they would override the new ones.\n\t\tconst paths = config.boards.enabled.slice()\n\t\tpaths.push('', '/')\n\t\tfor (let path of paths) {\n\t\t\tCookie.remove(cookie, {path})\n\t\t}\n\t}\n\tlocalStorage.cookieVersion = cookieVersion\n}\n\n// import {parseEl, parseHTML} from './util'\n// import {defer, execDeferred} from './defer'\n// import lang from 'lang'\n//\n// // TEMP: Will later get imported by the post modules\n// import * as state from './state'\n//\n// import OptionsPanel from './options/view'\n//\n// //Renders the options panel, after more important computation has been done\n// defer(() => new OptionsPanel())\n\n// // You can invoke the client-side debug mode with the `debug=true` query string\n// if (/[&\\?]debug=true/.test(location.href)) {\n// \tconfig.debug = true\n// }\n\n// // Load language-specific CSS\n// document.head.appendChild(parseEl(parseHTML\n// \t`<style>\n// \t\t.locked:after {\n// \t\t\tcontent: \"${lang.thread_locked}\";\n// \t\t}\n// \t\t.locked > header nav:after {\n// \t\t\tcontent: \" (${lang.locked})\";\n// \t\t}\n// \t</style>`))\n\n/*\n// 2nd tier dependacy modules. These are needed before the websocket\n// connection is opened, because they populate the dispatcher handler object.\nextend(main, {\n\tloop: require('./loop'),\n\ttime: require('./time'),\n\tamusement: require('./amusement')\n});\n\n// Load post models and views\nmain.posts = require('./posts')\nmain.Extract = require('./extract')\n// Start the client\nmain.client = require('./client')\nmain.conection = require('./connection')\n\n// Load independant auxilary modules\nextend(main, {\n\thistory: require('./history'),\n\thide: require('./hide')\n})\n*/\n\n// execDeferred()\n//events.request('loading:hide')\n"],"sourceRoot":"/source/"}