{"version":3,"sources":["client/main.js"],"names":["System","register","_export","_context","_taggedTemplateLiteral","strings","raw","Object","freeze","defineProperties","value","Cookie","parseEl","parseHTML","defer","execDeferred","lang","state","OptionsPanel","_templateObject","cookieVersion","cookie","paths","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","path","setters","_jsCookie","_util","_defer","_lang","_state","_optionsView","execute","localStorage","get","config","boards","enabled","slice","push","undefined","Symbol","iterator","next","done","remove","err","test","location","href","debug","document","head","appendChild","thread_locked","locked"],"mappings":"AAAA,YAAaA,QAAOC,UAAU,YAAY,SAAS,UAAU,OAAO,UAAU,kBAAkB,SAASC,EAAQC,GAA6M,QAASC,GAAuBC,EAAQC,GAAK,MAAOC,QAAOC,OAAOD,OAAOE,iBAAiBJ,GAASC,KAAKI,MAAMH,OAAOC,OAAOF,OAA/T,GAAIK,GAAOC,EAAQC,EAAUC,EAAMC,EAAaC,EAAKC,EAAMC,EAAaC,EAAgBC,EAAcC,EAAOC,EAAMC,EAA0BC,EAAkBC,EAAeC,EAAUC,EAAMC,CAA2I,QAAQC,SAAS,SAASC,GAKldnB,EAAAmB,GAAA,SAAAC,GACJnB,EAAAmB,EAAAnB,QAASC,EAAAkB,EAAAlB,WAAA,SAAAmB,GACTlB,EAAAkB,EAAAlB,MAAOC,EAAAiB,EAAAjB,cAAA,SAAAkB,GACRjB,EAAAiB,EAAAA,YAAA,SAAAC,GAGKjB,EAAAiB,GAAA,SAAAC,GAELjB,EAAAiB,EAAAA,aAAAC,QAAA,WAOP,GAPOjB,EAAAf,GAAA,4CAAA,2DAAA,wBAAA,4CAAA,2DAAA,wBAGPU,EAAM,WAAA,MAAM,IAAII,KAGVE,EAAgB,EAClBiB,aAAajB,eAAiBA,EAAe,CAChD,IAASC,IAAUV,GAAO2B,MAAO,CAG1BhB,EAAQiB,OAAOC,OAAOC,QAAQC,QAHJpB,EAI1BqB,KAAK,GAAI,KAJiBpB,GAAA,EAAAC,GAAA,EAAAC,EAAAmB,MAAA,KAKhC,IAAAlB,EAAiBJ,EAAAuB,OAAAC,cAAjBvB,GAAAI,EAAAD,EAAAqB,QAAAC,MAAAzB,GAAA,EAASK,EAAAD,EAAAjB,MAAeC,EAChBsC,OAAO5B,GAASO,KAAAA,IADxB,MAAAsB,GAAA1B,GAAA,EAAAC,EAAAyB,EAAA,QAAA,KAAA3B,GAAAG,EAAAA,WAAAA,EAAAA,YAAA,QAAA,GAAAF,EAAA,KAAAC,KALDY,aASajB,cAAgBA,EAI1B,kBAAkB+B,KAAKC,SAASC,QACnCd,OAAOe,OAAQ,GADhBC,SAKSC,KAAKC,YAAY7C,EAAQC,EAAAM,EAGnBH,EAAK0C,cAGH1C,EAAK2C,UA2BtB5C","file":"client/main.js","sourcesContent":["/*\n * Client entry point.\n * NOTE: All modules use strict mode through the Babel transpiler\n */\n\nimport * as Cookie from 'js-cookie'\nimport {parseEl, parseHTML} from './util'\nimport {defer, execDeferred} from './defer'\nimport lang from 'lang'\n\n// TEMP: Will later get imported by the post modules\nimport * as state from './state'\n\nimport OptionsPanel from './options/view'\n\n//Renders the options panel, after more important computation has been done\ndefer(() => new OptionsPanel())\n\n// Clear cookies, if versions mismatch.\nconst cookieVersion = 3\nif (localStorage.cookieVersion != cookieVersion) {\n\tfor (let cookie in Cookie.get()) {\n\t\t// Clear legacy cookies that were set for each board separatly.\n\t\t// Otherwise, they would override the new ones.\n\t\tconst paths = config.boards.enabled.slice()\n\t\tpaths.push('', '/')\n\t\tfor (let path of paths) {\n\t\t\tCookie.remove(cookie, {path})\n\t\t}\n\t}\n\tlocalStorage.cookieVersion = cookieVersion\n}\n\n// You can invoke the client-side debug mode with the `debug=true` query string\nif (/[&\\?]debug=true/.test(location.href)) {\n\tconfig.debug = true\n}\n\n// Load language-specific CSS\ndocument.head.appendChild(parseEl(parseHTML\n\t`<style>\n\t\t.locked:after {\n\t\t\tcontent: \"${lang.thread_locked}\";\n\t\t}\n\t\t.locked > header nav:after {\n\t\t\tcontent: \" (${lang.locked})\";\n\t\t}\n\t</style>`))\n\n/*\n// 2nd tier dependacy modules. These are needed before the websocket\n// connection is opened, because they populate the dispatcher handler object.\nextend(main, {\n\tloop: require('./loop'),\n\ttime: require('./time'),\n\tamusement: require('./amusement')\n});\n\n// Load post models and views\nmain.posts = require('./posts')\nmain.Extract = require('./extract')\n// Start the client\nmain.client = require('./client')\nmain.conection = require('./connection')\n\n// Load independant auxilary modules\nextend(main, {\n\thistory: require('./history'),\n\thide: require('./hide')\n})\n*/\n\nexecDeferred()\n//events.request('loading:hide')\n"],"sourceRoot":"/source/"}