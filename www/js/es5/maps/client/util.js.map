{"version":3,"sources":["client/util.js"],"names":["System","register","_export","_context","config","escape","thumbStyles","setters","_main","_underscore","execute","touchable_spoiler_tag","del","innerHTML","getNum","el","parseInt","getAttribute","slice","getID","closest","parseEls","string","document","createElement","children","childNodes","Array","from","parseEl","firstChild","listener","type","selector","handler","addEventListener","event","target","matches","once","removeEventListener","outerWidth","style","getComputedStyle","props","width","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","prop","value","err","isSage","email","trim","pick_spoiler","metaIndex","imgs","SPOILER_IMAGES","n","length","i","Math","floor","random","index","pad","resonableLastN","Number","isInteger","parseHTML","callSite","output","arguments","replace","parseAttributes","attrs","html","key","val","commaList","items","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","item","checkAuth","action","cls","staff","classes","main","ident","auth","rights"],"mappings":"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","file":"client/util.js","sourcesContent":["/*\n Client-side helper functions\n */\n\nimport {config} from './main'\nimport {escape} from 'underscore'\n\n// Make spoiler tags toggleable on mobile\nexport function touchable_spoiler_tag(del) {\n\tdel.innerHTML = '<del onclick=\"void(0)\">'\n}\n\n// Retrieve post number of post element\nexport function getNum(el) {\n\tif (!el) {\n\t\treturn 0\n\t}\n\treturn parseInt(el.getAttribute('id').slice(1), 10)\n}\n\n// Retrieve post number of closest parent post\nexport function getID(el) {\n\tif (!el) {\n\t\treturn 0\n\t}\n\treturn getNum(el.closest('article, section'))\n}\n\n\n// Parse HTML string to node array\nexport function parseEls(string) {\n\tconst el = document.createElement('div')\n\tel.innerHTML = string\n\tconst children = el.childNodes\n\treturn Array.from(children)\n}\n\n// Parse HTML string to single Element\nexport function parseEl(string) {\n\tconst el = document.createElement('div')\n\tel.innerHTML = string\n\treturn el.firstChild\n}\n\n// Add an event listener that filters targets according to a CSS selector\nexport function listener(el, type, selector, handler) {\n\tel.addEventListener(type, event => {\n\t\tif (event.target.matches(selector)) {\n\t\t\thandler(event)\n\t\t}\n\t})\n}\n\n// Add event listener to element, that will only be executed once\nexport function once(el, type, handler) {\n\tel.addEventListener(type, event => {\n\t\thandler(event)\n\t\tel.removeEventListener(type, handler)\n\t})\n}\n\n// Return width of element with padding and margin\nexport function outerWidth(el) {\n\tconst style =  getComputedStyle(el),\n\t\tprops = ['marginLeft', 'marginRight', 'paddingLeft','paddingRight']\n\tlet width = 0\n\tfor (let prop of props) {\n\t\twidth += parseInt(style[prop]);\n\t}\n\treturn width\n}\n\n\n// Confirms email is saging\nexport function isSage(email) {\n\tif (email) {\n\t\treturn email.trim() === 'sage'\n\t}\n\treturn false\n}\n\n// TODO: Refactor server time syncronisation\n// let cachedOffset;\n// export function serverTime() :number {\n// \tconst d = Date.now();\n// \tif (imports.isNode)\n// \t\treturn d;\n//\n// \t// The offset is intialised as 0, so there is something to return, until\n// \t// we get a propper number from the server.\n// \tif (!cachedOffset)\n// \t\tcachedOffset = imports.main.request('time:offset');\n// \treturn d + cachedOffset;\n// }\n\n// Pick the next spoiler from one of the available spoilers\nexport function pick_spoiler(metaIndex) {\n\tconst imgs = config.SPOILER_IMAGES,\n\t\tn = imgs.length\n\tlet i\n\tif (metaIndex < 0) {\n\t\ti = Math.floor(Math.random() * n)\n\t} else {\n\t\ti = metaIndex % n\n\t}\n\treturn {\n\t\tindex: imgs[i],\n\t\tnext: (i + 1) % n\n\t}\n}\n\nexport const thumbStyles = ['small', 'sharp', 'hide']\n\n// Pad an integer with a leading zero, if below 10\nexport function pad(n) {\n\treturn (n < 10 ? '0' : '') + n\n}\n\n// Various UI-related links wrapped in []\n// export function action_link_html(href , name, id, cls) {\n// \treturn parseHTML\n// \t\t`<span class=\"act\">\n// \t\t\t<a href=\"${href}\"\n// \t\t\t\t${id && ` id=\"${id}\"`}\n// \t\t\t\t${cls && ` class=\"${cls}\"`}\n// \t\t\t>\n// \t\t\t\t${name}\n// \t\t\t</a>\n// \t\t</span>`;\n// }\n\n// Confirm last N posts to view setting matches bounds\nexport function resonableLastN(n) {\n\treturn Number.isInteger(n) && n <= 500\n}\n\n// export function parse_name(name) {\n// \tvar tripcode = '', secure = '';\n// \tvar hash = name.indexOf('#');\n// \tif (hash >= 0) {\n// \t\ttripcode = name.substr(hash + 1);\n// \t\tname = name.substr(0, hash);\n// \t\thash = tripcode.indexOf('#');\n// \t\tif (hash >= 0) {\n// \t\t\tsecure = escape(tripcode.substr(hash + 1));\n// \t\t\ttripcode = tripcode.substr(0, hash);\n// \t\t}\n// \t\ttripcode = escape(tripcode);\n// \t}\n// \tname = name.trim().replace(imports.hotConfig.EXCLUDE_REGEXP, '');\n// \treturn [\n// \t\tname.substr(0, 100), tripcode.substr(0, 128),\n// \t\tsecure.substr(0, 128)\n// \t];\n// }\n\n// Template string tag function for HTML. Strips indentation and trailing\n// newlines. Based on https://gist.github.com/zenparsing/5dffde82d9acef19e43c\nexport function parseHTML(callSite, ...args) {\n\tlet output = callSite[0]\n\tfor (let i = 1; i <= args.length; i++) {\n\t\toutput += args[i - 1] + callSite[i]\n\t}\n\n\t// Strip indentation and remove empty lines from HTML string\n\treturn output.replace(/\\s*\\n\\s*/g, '')\n}\n\n\n// Generate an HTML element attribute list\nexport function parseAttributes(attrs) {\n\tlet html = ''\n\tfor (let key in attrs) {\n\t\thtml += ' '\n\t\tconst val = attrs[key]\n\t\tif (val === true) {\n\t\t\thtml += key\n\t\t} else if (val || val === 0) {\n\t\t\thtml += `${key}=\"${val}\"`\n\t\t}\n\t}\n\treturn html\n}\n\n// Makes a ', ' seperated list out of on array of strings\nexport function commaList(items) {\n\tlet html = ''\n\tfor (let item of items) {\n\t\tif (html) {\n\t\t\thtml += ', '\n\t\t}\n\t\thtml += item\n\t}\n\treturn html\n}\n\n// Acertains client has the proper authorisation to perfrom task. This is only\n// for rendering. The same validation is performed server-side.\nexport function checkAuth(action) {\n\tconst cls = config.staff.classes[main.ident && main.ident.auth]\n\treturn cls && !!cls.rights[action]\n}\n"],"sourceRoot":"/source/"}