{"version":3,"sources":["client/model.js"],"names":["System","register","_export","_context","_classCallCheck","instance","Constructor","TypeError","_extend","View","Collection","_createClass","Model","setters","_underscore","extend","_view","_collection","execute","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","attrs","arguments","undefined","this","views","changeHooks","value","val","execChangeHooks","push","object","view","splice","indexOf","collection","remove","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","func","get","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2"],"mappings":"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","file":"client/model.js","sourcesContent":["import {extend} from 'underscore'\nimport View from './view'\nimport Collection from './collection'\n\n// Generic model class, that all other model classes extend\nexport default class Model {\n\tconstructor(attrs = {}) {\n\t\tthis.attrs = attrs\n\t\tthis.views = []\n\t\tthis.changeHooks = {}\n\t}\n\n\t// Retrieve a strored value of specific key from the model's attribute\n\t// object\n\tget(key) {\n\t\treturn this.attrs[key]\n\t}\n\n\t// Set a key to a target value\n\tset(key, val) {\n\t\tthis.attrs[key] = val\n\t\tthis.execChangeHooks(key)\n\t}\n\n\t// Extend the model attribute hash, with the suplied object. Shorthand, for\n\t// setting multiple fields simultaniously.\n\tsetAttrs(attrs) {\n\t\textend(this.attrs, attrs)\n\t\tfor (let key in attrs) {\n\t\t\tthis.execChangeHooks(key)\n\t\t}\n\t}\n\n\t// Append value to an array strored at the given key. If the array does not\n\t// exist, it is created.\n\tappend(key, val) {\n\t\tif (this.attrs[key]) {\n\t\t\tthis.attrs[key].push(val)\n\t\t} else {\n\t\t\tthis.attrs[key] = [val]\n\t\t}\n\t\tthis.execChangeHooks(key)\n\t}\n\n\t// Extend an object at target key. If key does not exist, simply assign the\n\t// object to the key.\n\textend(key, object) {\n\t\tif (this.attrs[key]) {\n\t\t\textend(this.attrs[key], object)\n\t\t} else {\n\t\t\tthis.attrs[key] = object\n\t\t}\n\t\tthis.execChangeHooks(key)\n\t}\n\n\t// Attach a view to a model. Simply adds the view to the model's view array.\n\t// Each model's method will then provide individual logic for calling the\n\tattach(view) {\n\t\tthis.views.push(view)\n\t}\n\n\t// Detach a view from the model. Removes reference, so model and/or view\n\t// can be garbage collected.\n\tdetach(view) {\n\t\tthis.views.splice(this.views.indexOf(view), 1)\n\t}\n\n\t// Remove the model from its collection, if any, and remove all its views\n\tremove() {\n\t\tif (this.collection) {\n\t\t\tthis.collection.remove(this)\n\t\t}\n\t\tfor (let view of this.views) {\n\t\t\tview.remove()\n\t\t}\n\t}\n\n\n\t// Add a function to be executed, when .set(), .setAttrs(), .append() or\n\t// .extend() modify a key's value.\n\tonChange(key, func) {\n\t\tif (this.changeHooks[key]) {\n\t\t\tthis.changeHooks[key].push(func)\n\t\t} else {\n\t\t\tthis.changeHooks[key] = [func]\n\t\t}\n\t}\n\n\t// Execute handlers hooked into key change, if any\n\t// @param {string} key\n\texecChangeHooks(key) {\n\t\tif (!this.changeHooks[key]) {\n\t\t\treturn\n\t\t}\n\t\tconst val = this.get(key)\n\t\tfor (let func of this.changeHooks[key]) {\n\t\t\tfunc(val)\n\t\t}\n\t}\n}\n"],"sourceRoot":"/source/"}