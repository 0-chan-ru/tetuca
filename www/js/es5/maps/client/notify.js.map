{"version":3,"sources":["client/notify.js"],"names":["System","register","_export","_context","main","$","_","Backbone","config","connSM","etc","state","options","discoFavicon","xhr","NotifyModel","notify","replies","setters","execute","require","XMLHttpRequest","open","responseType","onload","this","status","window","URL","createObjectURL","response","send","Model","extend","initialize","_this","$favicon","check","listenTo","reply","model","get","document","hidden","set","title","addEventListener","e","target","unreadCount","dropped","on","_model$attributes","attributes","alert","icon","render","prefix","attr","Memory","num","post","posts","readAll","isMobile","n","Notification","lang","quoted","image","oneeSama","workMode","thumbPath","body","onclick","focus","location","hash","write","syncwatchStarting"],"mappings":"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","file":"client/notify.js","sourcesContent":["/*\n Unread post etc. notifications\n */\n\nconst main = require('./main'),\n\t{$, _, Backbone, config, connSM, etc, state, options} = main;\n\n// Needs to be available with no connectivity, so we download and cache it\nlet discoFavicon = '',\n\txhr = new XMLHttpRequest();\nxhr.open('GET', '/ass/css/ui/disconnected.ico');\nxhr.responseType = 'blob';\nxhr.onload = function() {\n\tif (this.status === 200)\n\t\tdiscoFavicon = window.URL.createObjectURL(this.response);\n};\nxhr.send();\n\nlet NotifyModel = Backbone.Model.extend({\n\tinitialize() {\n\t\tthis.$favicon = $('#favicon');\n\t\tthis.check(this);\n\n\t\tthis.listenTo(this, 'change', this.check);\n\t\tmain.reply('post:inserted', model => {\n\t\t\t// It's ours, don't notify unread\n\t\t\tif (model.get('mine'))\n\t\t\t\treturn;\n\t\t\tif (document.hidden)\n\t\t\t\tthis.set('unreadCount', this.get('unreadCount') + 1);\n\t\t});\n\t\tmain.reply('notify:title', title => this.set('title', title));\n\n\t\t// Pass visibility changes to notify model\n\t\tdocument.addEventListener('visibilitychange', e => {\n\t\t\tconst hidden = e.target.hidden;\n\t\t\t// Unread post count will reset\n\t\t\tthis.set({\n\t\t\t\thidden: hidden,\n\t\t\t\tunreadCount: 0,\n\t\t\t\treply: !hidden\n\t\t\t});\n\t\t}, false);\n\n\t\tlet dropped = () => this.set('alert', true);\n\t\tconnSM.on('dropped', dropped);\n\t\tconnSM.on('desynced', dropped);\n\t\tconnSM.on('synced', () => notify.set('alert', false));\n\t},\n\tcheck(model) {\n\t\tconst {hidden, unreadCount, reply, alert} = model.attributes;\n\t\tlet icon = '/ass/favicon.ico';\n\t\tif (alert)\n\t\t\treturn this.render(discoFavicon, '--- ');\n\t\telse if (!hidden)\n\t\t\treturn this.render(icon, '');\n\t\tlet prefix = '';\n\t\tif (unreadCount) {\n\t\t\tprefix += `(${unreadCount}) `;\n\t\t\ticon = '/ass/css/ui/unreadFavicon.ico';\n\t\t}\n\t\tif (reply){\n\t\t\tprefix = '>> ' + prefix;\n\t\t\ticon = '/ass/css/ui/replyFavicon.ico';\n\t\t}\n\t\tthis.render(icon, prefix);\n\t},\n\trender(icon, prefix) {\n\t\tdocument.title = prefix + this.get('title');\n\t\tthis.$favicon.attr('href', icon);\n\t}\n});\n\nlet notify = new NotifyModel({\n\tunreadCount: 0,\n\ttitle: document.title\n});\n\n// Remember replies that don't need a new desktop notification for 3 days\n// Own post are remember for 2 days, so lets keep 1 day as a buffer\nlet replies = new main.Memory('replies', 3);\n\nmain.reply('repliedToMe', function (num) {\n\tlet post = state.posts.get(num);\n\tif (!post)\n\t\treturn;\n\tpost = post.attributes;\n\n\t// Already displayed a notification for the reply. Needs to be read\n\t// freshly from local storage each time, not to trigger multiple times,\n\t// if the same post is displayed in multiple tabs.\n\tif (num in replies.readAll())\n\t\treturn;\n\tif (options.get('notification') && document.hidden && !main.isMobile) {\n\t\tlet n = new Notification(main.lang.quoted, {\n\t\t\t// if the post doesn't have a image we use a bigger favicon\n\t\t\ticon: (post.image && options.get('thumbs')!=='hide' && !main.oneeSama.workMode) ? main.oneeSama.thumbPath(post.image)\n\t\t\t\t: '/ass/css/ui/favbig.png',\n\t\t\tbody: post.body\n\t\t});\n\t\tn.onclick = function() {\n\t\t\twindow.focus();\n\t\t\tlocation.hash = '#p' + num;\n\t\t};\n\t}\n\n\tnotify.set({reply: true});\n\t// Record as already notified/read to local storage\n\treplies.write(num);\n});\n\nmain.reply('time:syncwatch', function () {\n\tif (!options.get('notification') || !document.hidden)\n\t\treturn;\n\tnew Notification(main.lang.syncwatchStarting)\n\t\t.onclick = () => window.focus();\n});\n"],"sourceRoot":"/source/"}