{"version":3,"sources":["client/connection.js"],"names":["System","register","_export","_context","send","msg","connSM","state","socket","readyState","SockJS","OPEN","console","warn","JSON","stringify","config","DEBUG","log","on_message","e","data","parse","op","shift","type","isPubSub","common","is_pubsub","handler","main","dispatcher","syncs","follow","sync_status","sync","textContent","connect","onclose","onmessage","window","location","protocol","new_socket","onopen","feeder","transports","USE_WEBSOCKETS","unshift","SOCKET_URL","SOCKET_PATH","reset_attempts","attemptTimer","clearTimeout","attempts","window_focused","rs","CONNECTING","feed","navigator","onLine","_","lang","setters","execute","require","undefined","reply","document","getElementById","act","connecting","syncing","connID","randomID","page","set","SYNCHRONIZE","get","cookie","synced","setTimeout","DESYNC","error","dropped","wait","Math","pow","min","floor","reconnecting","close","addEventListener","target","hidden"],"mappings":"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","file":"client/connection.js","sourcesContent":["/*\n * Websocket controller and connection notifier\n */\n\n/**\n * Websocket call handler map\n */\nexport const dispatcher = {}\n\nconst main = require('./main'),\n\t{_, common, config, connSM, state, SockJS} = main,\n\tlang = main.lang.sync;\n\nlet socket, attempts, attemptTimer;\n\nfunction send(msg) {\n\t// need deferral or reporting on these lost messages...\n\tif (connSM.state != 'synced' && connSM.state != 'syncing')\n\t\treturn;\n\tif (socket.readyState != SockJS.OPEN) {\n\t\tif (console)\n\t\t\tconsole.warn(\"Attempting to send while socket closed\");\n\t\treturn;\n\t}\n\n\tmsg = JSON.stringify(msg);\n\tif (config.DEBUG)\n\t\tconsole.log('<', msg);\n\tsocket.send(msg);\n}\nmain.reply('send', send);\n\nfunction on_message(e) {\n\tif (config.DEBUG)\n\t\tconsole.log('>', e.data);\n\n\tconst msg = JSON.parse(e.data)[0],\n\t\top = msg.shift(),\n\t\ttype = msg.shift(),\n\t\tisPubSub = common.is_pubsub(type);\n\n\tif (isPubSub && connSM.state === 'locked')\n\t\treturn;\n\n\t// Some handlers are optional and/or dynamic. Ignore them silently.\n\tconst handler = main.dispatcher[type];\n\tif (!handler)\n\t\treturn;\n\tif (isPubSub && op in state.syncs)\n\t\tstate.syncs[op]++;\n\tmain.follow(() => handler(msg, op));\n}\n\nconst sync = document.getElementById('sync');\nfunction sync_status(msg) {\n\tsync.textContent = msg;\n}\n\nconnSM.act('load + start -> conn', function () {\n\tsync_status(lang.connecting);\n\tattempts = 0;\n\tconnect();\n});\n\nfunction connect() {\n\tif (socket) {\n\t\tsocket.onclose = null;\n\t\tsocket.onmessage = null;\n\t}\n\tif (window.location.protocol == 'file:') {\n\t\tconsole.log(\"Page downloaded locally; refusing to sync.\");\n\t\treturn;\n\t}\n\tsocket = new_socket();\n\tsocket.onopen = connSM.feeder('open');\n\tsocket.onclose = connSM.feeder('close');\n\tsocket.onmessage = on_message;\n\tif (config.DEBUG)\n\t\twindow.socket = socket;\n}\n\nfunction new_socket() {\n\tconst transports = ['xdr-streaming', 'xhr-streaming', 'iframe-eventsource',\n\t\t'iframe-htmlfile', 'xdr-polling', 'xhr-polling', 'iframe-xhr-polling',\n\t\t'jsonp-polling'];\n\tif (config.USE_WEBSOCKETS)\n\t\ttransports.unshift('websocket');\n\treturn new SockJS(config.SOCKET_URL || config.SOCKET_PATH, null, {\n\t\ttransports\n\t});\n}\n\nconnSM.act('conn, reconn + open -> syncing', () => {\n\tsync_status(lang.syncing);\n\tconst connID = common.randomID(32),\n\t\t{page} = state;\n\tpage.set('connID', connID);\n\tsend([common.SYNCHRONIZE, connID, page.get('board'), state.syncs,\n\t\tpage.get('live'), document.cookie]);\n});\n\nconnSM.act('syncing + sync -> synced', function () {\n\tsync_status(lang.synced);\n\tattemptTimer = setTimeout(function () {\n\t\tattemptTimer = 0;\n\t\treset_attempts();\n\t}, 10000);\n});\n\nfunction reset_attempts() {\n\tif (attemptTimer) {\n\t\tclearTimeout(attemptTimer);\n\t\tattemptTimer = 0;\n\t}\n\tattempts = 0;\n}\n\n// Prevent pub/sub mesages from being handled\nconnSM.act('synced, syncing + lock -> locked');\nconnSM.act('locked + unlock -> synced');\nmain.reply('connection:lock', () => send([common.DESYNC]), connSM.feed('lock'));\nmain.reply('connection:unlock', msg => send(msg), connSM.feed('unlock'));\n\nconnSM.act('* + close -> dropped',  error => {\n\tif (socket) {\n\t\tsocket.onclose = null;\n\t\tsocket.onmessage = null;\n\t}\n\tif (config.DEBUG)\n\t\tconsole.error('E:', error);\n\tif (attemptTimer) {\n\t\tclearTimeout(attemptTimer);\n\t\tattemptTimer = 0;\n\t}\n\tsync_status(lang.dropped);\n\n\t// Wait maxes out at ~1min\n\tconst wait = 500 * Math.pow(1.5, Math.min(Math.floor(++attempts / 2), 12));\n\tsetTimeout(connSM.feeder('retry'), wait);\n});\n\nconnSM.act('dropped + retry -> reconn', function () {\n\tconnect();\n\t/* Don't show this immediately so we don't thrash on network loss */\n\tsetTimeout(function () {\n\t\tif (connSM.state == 'reconn')\n\t\t\tsync_status(lang.reconnecting);\n\t}, 100);\n});\n\nconnSM.act('* + invalid, desynced + close -> desynced', msg => {\n\tmsg = (msg && msg[0]) ? 'Out of sync: ' + msg[0] : 'Out of sync';\n\tsync_status(msg);\n\tif (attemptTimer) {\n\t\tclearTimeout(attemptTimer);\n\t\tattemptTimer = 0;\n\t}\n\tsocket.onclose = null;\n\tsocket.onmessage = null;\n\tsocket.close();\n\tsocket = null;\n\tif (config.DEBUG)\n\t\twindow.socket = null;\n});\n\nfunction window_focused() {\n\tswitch (connSM.state) {\n\t\tcase 'desynced':\n\t\t\treturn;\n\t\t// might have just been suspended;\n\t\t// try to get our FSM up to date if possible\n\t\tcase 'synced':\n\t\tcase 'syncing':\n\t\tcase 'conn':\n\t\t\tconst rs = socket.readyState;\n\t\t\tif (rs != SockJS.OPEN && rs != SockJS.CONNECTING) {\n\t\t\t\tconnSM.feed('close');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (navigator.onLine === false) {\n\t\t\t\tconnSM.feed('close');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tbreak;\n\t}\n\tconnSM.feed('retry');\n}\n\n// Connect to server\nconnSM.feed('start');\n\n// Check for connectivity each time tab visibility changes to visible\n// A bit of an overhead, but should prevent unregistered disconnects,\n// especially on mobile.\ndocument.addEventListener('visibilitychange', e => {\n\tif (e.target.hidden)\n\t\treturn;\n\tsetTimeout(window_focused, 20);\n});\nwindow.addEventListener('online', () => reset_attempts(), connSM.feed('retry'));\nwindow.addEventListener('offline', connSM.feeder('close'));\n"],"sourceRoot":"/source/"}