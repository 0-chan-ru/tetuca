{"version":3,"sources":["model.js"],"names":["System","register","_export","_context","_classCallCheck","instance","Constructor","TypeError","_extend","_createClass","Model","setters","_vendorUnderscore","extend","execute","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","attrs","arguments","undefined","this","views","changeHooks","value","val","execChangeHooks","push","object","view","splice","indexOf","collection","remove","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","func","get","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2"],"mappings":"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","file":"model.js","sourcesContent":["import {extend} from '../vendor/underscore'\n\n/**\n * Generic model class, that all other model classes extend\n */\nexport default class Model {\n\t/**\n\t * Constructs a new model object with the specified attribute object\n\t * @param {Object} attrs\n\t */\n\tconstructor(attrs = {}) {\n\t\tthis.attrs = attrs\n\t\tthis.views = []\n\t\tthis.changeHooks = {}\n\t}\n\n\t/**\n\t * Retrieve a strored value of specific key from the model's attribute\n\t * object\n\t * @param {string} key\n\t * @returns {*}\n\t */\n\tget(key) {\n\t\treturn this.attrs[key]\n\t}\n\n\t/**\n\t * Set a key to a target value\n\t * @param {string} key\n\t * @param {*} val\n\t */\n\tset(key, val) {\n\t\tthis.attrs[key] = val\n\t\tthis.execChangeHooks(key)\n\t}\n\n\t/**\n\t * Extend the model attribute hash, with the suplied object. Shorthand, for\n\t * setting multiple fields simultaniously.\n\t * @param {Object} attrs\n\t */\n\tsetAttrs(attrs) {\n\t\textend(this.attrs, attrs)\n\t\tfor (let key in attrs) {\n\t\t\tthis.execChangeHooks(key)\n\t\t}\n\t}\n\n\t/**\n\t * Append value to an array strored at the given key. If the array does not\n\t * exist, it is created.\n\t * @param {string} key\n\t * @param {*} val\n\t */\n\tappend(key, val) {\n\t\tif (this.attrs[key]) {\n\t\t\tthis.attrs[key].push(val)\n\t\t} else {\n\t\t\tthis.attrs[key] = [val]\n\t\t}\n\t\tthis.execChangeHooks(key)\n\t}\n\n\t/**\n\t * Extend an object at target key. If key does not exist, simply assign the\n\t * object to the key.\n\t * @param {string} key\n\t * @param {Object} object\n\t */\n\textend(key, object) {\n\t\tif (this.attrs[key]) {\n\t\t\textend(this.attrs[key], object)\n\t\t} else {\n\t\t\tthis.attrs[key] = object\n\t\t}\n\t\tthis.execChangeHooks(key)\n\t}\n\n\t/**\n\t * Attach a view to a model. Simply adds the view to the model's view array.\n\t * Each model's method will then provide individual logic for calling the\n\t * attached views' methods.\n\t * @param {View} view\n\t */\n\tattach(view) {\n\t\tthis.views.push(view)\n\t}\n\n\t/**\n\t * Detach a view from the model. Removes reference, so model and/or view\n\t * can be garbage collected.\n\t * @param {View} view\n\t */\n\tdetach(view) {\n\t\tthis.views.splice(this.views.indexOf(view), 1)\n\t}\n\n\t/**\n\t * Remove the model from its collection, if any, and remove all its views\n\t */\n\tremove() {\n\t\tif (this.collection) {\n\t\t\tthis.collection.remove(this)\n\t\t}\n\t\tfor (let view of this.views) {\n\t\t\tview.remove()\n\t\t}\n\t}\n\n\t/**\n\t * Add a function to be executed, when .set(), .setAttrs(), .append() or\n\t * .extend() modify a key's value.\n\t * @param {string} key\n\t * @param {function} func\n\t */\n\tonChange(key, func) {\n\t\tif (this.changeHooks[key]) {\n\t\t\tthis.changeHooks[key].push(func)\n\t\t} else {\n\t\t\tthis.changeHooks[key] = [func]\n\t\t}\n\t}\n\n\t/**\n\t * Execute handlers hooked into key change, if any\n\t * @param {string} key\n\t */\n\texecChangeHooks(key) {\n\t\tif (!this.changeHooks[key]) {\n\t\t\treturn\n\t\t}\n\t\tconst val = this.get(key)\n\t\tfor (let func of this.changeHooks[key]) {\n\t\t\tfunc(val)\n\t\t}\n\t}\n}\n"],"sourceRoot":"/source/"}