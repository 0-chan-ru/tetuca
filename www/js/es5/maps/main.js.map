{"version":3,"sources":["main.js"],"names":["System","register","_export","_taggedTemplateLiteral","strings","raw","Object","freeze","defineProperties","value","dom4","Cookie","parseEl","parseHTML","_templateObject","deferred","config","configHash","clientHash","isMobile","$threads","$name","$email","$banner","cookieVersion","cookie","paths","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","path","setters","_vendorDom","_vendorJsCookie","_util","execute","defer","func","push","execDeferred","length","shift","window","mediaURL","hard","HTTP","media","document","query","localStorage","get","boards","enabled","slice","undefined","Symbol","iterator","next","done","remove","err","test","location","href","debug","head","appendChild","lang","thread_locked","locked"],"mappings":"AAAA,YAAaA,QAAOC,UAAU,iBAAiB,sBAAsB,UAAU,SAASC,GAAmP,QAASC,GAAuBC,EAAQC,GAAK,MAAOC,QAAOC,OAAOD,OAAOE,iBAAiBJ,GAASC,KAAKI,MAAMH,OAAOC,OAAOF,OAAtW,GAAIK,GAAKC,EAAOC,EAAQC,EAAUC,EAAgBC,EAASC,EAAOC,EAAWC,EAAWC,EAASC,EAASC,EAAMC,EAAOC,EAAQC,EAAcC,EAAOC,EAAMC,EAA0BC,EAAkBC,EAAeC,EAAUC,EAAMC,CAA2I,QAAQC,SAAS,SAASC,GAAYxB,EAAKwB,GAAa,SAASC,GAAiBxB,EAAOwB,GAAkB,SAASC,GAAOxB,EAAQwB,EAAMxB,QAAQC,EAAUuB,EAAMvB,YAAawB,QAAQ,WAA2V,QAASC,GAAMC,GAAMxB,EAASyB,KAAKD,GAA8B,QAASE,KAAe,KAAM1B,EAAS2B,OAAO,GAAG3B,EAAS4B,UAA+sB,GAA1pC7B,EAAgBX,GAAwB,4CAAiD,2DAAkE,wBAA2B,4CAAiD,2DAAkE,wBAA2BY,KAAsDb,EAAQ,QAAQoC,GAA6EpC,EAAQ,eAAeuC,GAAcvC,EAAQ,SAASc,EAAO4B,OAAO5B,QAAQd,EAAQ,SAASc,GAAQA,EAAO6B,SAAS7B,EAAO8B,KAAKC,KAAKC,MAAM9C,EAAQ,aAAae,EAAW2B,OAAO3B,YAAYf,EAAQ,aAAae,GAAYf,EAAQ,aAAagB,EAAW0B,OAAO1B,YAAYhB,EAAQ,aAAagB,GAAYhB,EAAQ,WAAWiB,EAASyB,OAAOzB,UAAUjB,EAAQ,WAAWiB,GAAUjB,EAAQ,WAAWkB,EAAS6B,SAASC,MAAM,YAAYhD,EAAQ,WAAWkB,GAAUlB,EAAQ,QAAQmB,EAAM4B,SAASC,MAAM,UAAUhD,EAAQ,QAAQmB,GAAOnB,EAAQ,SAASoB,EAAO2B,SAASC,MAAM,WAAWhD,EAAQ,SAASoB,GAAQpB,EAAQ,UAAUqB,EAAQ0B,SAASC,MAAM,YAAYhD,EAAQ,UAAUqB,GAASC,EAAc,EAAK2B,aAAa3B,eAAeA,EAAc,CAAC,IAAIC,IAAUd,GAAOyC,MAAM,CAAC1B,EAAMV,EAAOqC,OAAOC,QAAQC,QAAQ7B,EAAMc,KAAK,GAAG,KAAKb,GAA0B,EAAKC,GAAkB,EAAMC,EAAe2B,MAAU,KAAI,IAAI1B,EAmEl/DJ,EAAK+B,OAAAC,cAAA/B,GAAAI,EAAAD,EAAA6B,QAAAC,MAAAjC,GAAA,EAAAK,EAAAD,EAAAtB,MAAAE,EAAAkD,OAAApC,GAAAO,KAAAA,IAAA,MAAA8B,GAAAlC,GAAA,EAAAC,EAAAiC,EAAA,QAAA,KAAAnC,GAAAG,EAAAA,WAAAA,EAAAA,YAAA,QAAA,GAAAF,EAAA,KAAAC,KAAAsB,aAAA3B,cAAAA,EAAA,kBAAAuC,KAAAC,SAAAC,QAAAjD,EAAA8B,KAAAoB,OAAA,GAAAjB,SAAAkB,KAAAC,YAAAxD,EAAAC,EAAAC,EAAAuD,KAAAC,cAAAD,KAAAE,UAAA9B","file":"main.js","sourcesContent":["/*\n * Loads the dependancies in order and aggregates exports from various modules\n */\n\n// NOTE: The entire bundle uses strict mode through the Babel transpiler\n\n/*\n * Because we are going to attach listeners to these all over the place, have\n * to load soome core modules in specific order. Also avoids nasty circular\n * dependancy, by placing some of the exports here and not in child modules.\n */\n\nimport * as dom4 from '../vendor/dom4' // DOM level 4 polyfill\nimport * as Cookie from '../vendor/js-cookie'\nimport {parseEl, parseHTML} from './util'\n\n/*\n Ofload expensive and not that neccessary initialisation logic till\n after the core modules are started\n */\nconst deferred = []\n\n/**\n * Add a function to be executed, once the module finishes loading\n * @param {function} func\n */\nexport function defer(func) {\n    deferred.push(func)\n}\n\n/**\n * Execute all stored deferred functions\n */\nexport function execDeferred() {\n\twhile (deferred.length > 0) {\n\t\tdeferred.shift()()\n\t}\n}\n\n// Configuration object, passed from the server\nexport const config = window.config\nconfig.mediaURL = config.hard.HTTP.media // Shorthand\n\n// Hash of the the configuration object\nexport const configHash = window.configHash\n\n// Combined hash of the current client-side files. Used for transparent\n// versioning.\nexport const clientHash = window.clientHash\n\n// Indicates, if in mobile mode. Determined server-side.\nexport const isMobile = window.isMobile\n\n// Cached DOM elements\nexport const $threads = document.query('threads')\nexport const $name = document.query('#name')\nexport const $email = document.query('#email')\nexport const $banner = document.query('#banner')\n\n// Clear cookies, if versions mismatch.\nconst cookieVersion = 3\nif (localStorage.cookieVersion != cookieVersion) {\n\tfor (let cookie in Cookie.get()) {\n\t\t// Clear legacy cookies that were set for each board separatly.\n\t\t// Otherwise, they would override the new ones.\n\t\tconst paths = config.boards.enabled.slice()\n\t\tpaths.push('', '/')\n\t\tfor (let path of paths) {\n\t\t\tCookie.remove(cookie, {path})\n\t\t}\n\t}\n\tlocalStorage.cookieVersion = cookieVersion\n}\n\n// You can invoke the client-side debug mode with the `debug=true` query string\nif (/[&\\?]debug=true/.test(location.href)) {\n\tconfig.hard.debug = true\n}\n/*\nif (config.hard.debug) {\n\tradio.DEBUG = true\n\twindow.Backbone = Backbone // Export Backbone instance for easier debugging\n\tradio.tuneIn('main') // Log all channel traffic\n}\n*/\n\n// Load language-specific CSS\ndocument.head.appendChild(parseEl(parseHTML\n\t`<style>\n\t\t.locked:after {\n\t\t\tcontent: \"${lang.thread_locked}\";\n\t\t}\n\t\t.locked > header nav:after {\n\t\t\tcontent: \" (${lang.locked})\";\n\t\t}\n\t</style>`))\n\n/*\n// Initialise main rendering object\nlet oneeSama = main.oneeSama = new common.OneeSama({\n\top: state.page.get('thread'),\n\tlang,\n\t// Core post link handler\n\ttamashii(num) {\n\t\tlet frag;\n\t\tconst op = state.links[num];\n\t\tif (op) {\n\t\t\tconst desc = num in state.mine.readAll() && this.lang.you;\n\t\t\tfrag = this.postRef(num, op, desc);\n\t\t}\n\t\telse\n\t\t\tfrag = '>>' + num;\n\t\treturn frag;\n\t}\n});\n*/\n\n/*\n// 2nd tier dependacy modules. These are needed before the websocket\n// connection is opened, because they populate the dispatcher handler object.\nextend(main, {\n\tloop: require('./loop'),\n\ttime: require('./time'),\n\tamusement: require('./amusement')\n});\n\n// Load post models and views\nmain.posts = require('./posts')\nmain.Extract = require('./extract')\n// Start the client\nmain.client = require('./client')\nmain.conection = require('./connection')\n\n// Load independant auxilary modules\nextend(main, {\n\thistory: require('./history'),\n\thide: require('./hide')\n})\n*/\n\nexecDeferred()\n//events.request('loading:hide')\n"],"sourceRoot":"/source/"}