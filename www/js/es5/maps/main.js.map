{"version":3,"sources":["main.js"],"names":["System","register","_export","_context","_taggedTemplateLiteral","strings","raw","Object","freeze","defineProperties","value","dom4","Cookie","parseEl","parseHTML","defer","execDeferred","lang","state","initOptions","OptionsPanel","_templateObject","cookieVersion","cookie","paths","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","path","setters","_vendorDom","_vendorJsCookie","_util","_defer","_lang","_state","_optionsModels","init","_optionsView","execute","localStorage","get","config","boards","enabled","slice","push","undefined","Symbol","iterator","next","done","remove","err","test","location","href","hard","debug","document","head","appendChild","thread_locked","locked"],"mappings":"AAAA,YAAaA,QAAOC,UAAU,iBAAiB,sBAAsB,SAAS,UAAU,OAAO,UAAU,mBAAmB,kBAAkB,SAASC,EAAQC,GAA8N,QAASC,GAAuBC,EAAQC,GAAK,MAAOC,QAAOC,OAAOD,OAAOE,iBAAiBJ,GAASC,KAAKI,MAAMH,OAAOC,OAAOF,OAAhV,GAAIK,GAAKC,EAAOC,EAAQC,EAAUC,EAAMC,EAAaC,EAAKC,EAAMC,EAAYC,EAAaC,EAAgBC,EAAcC,EAAOC,EAAMC,EAA0BC,EAAkBC,EAAeC,EAAUC,EAAMC,CAA2I,QAAQC,SAAS,SAASC,GAAYrB,EAAKqB,GAAa,SAASC,GAAiBrB,EAAOqB,GAAkB,SAASC,GAAOrB,EAAQqB,EAAMrB,QAAQC,EAAUoB,EAAMpB,WAAY,SAASqB,GAAQpB,EAAMoB,EAAOpB,MAAMC,EAAamB,EAAOnB,cAAe,SAASoB,GAAOnB,EAAKmB,EAAAA,YAAgB,SAASC,GAAQnB,EAAMmB,GAAS,SAASC,GAAgBnB,EAAYmB,EAAeC,MAAO,SAASC,GAAcpB,EAAaoB,EAAAA,aAAwBC,QAAQ,WAA2Z,GAAhZpB,EAAgBjB,GAAwB,4CAAiD,2DAAkE,wBAA2B,4CAAiD,2DAAkE,wBAA2Be,IAAcJ,EAAM,WAAW,MAAO,IAAIK,KAAkBE,EAAc,EAAKoB,aAAapB,eAAeA,EAAc,CAAC,IAAIC,IAAUX,GAAO+B,MAAM,CAACnB,EAAMoB,OAAOC,OAAOC,QAAQC,QAAQvB,EAAMwB,KAAK,GAAG,KAAKvB,GAA0B,EAAKC,GAAkB,EAAMC,EAAesB,MAAU,KAAI,IAAIrB,EA8B5hDJ,EAAK0B,OAAAC,cAAA1B,GAAAI,EAAAD,EAAAwB,QAAAC,MAAA5B,GAAA,EAAAK,EAAAD,EAAAnB,MAAAE,EAAA0C,OAAA/B,GAAAO,KAAAA,IAAA,MAAAyB,GAAA7B,GAAA,EAAAC,EAAA4B,EAAA,QAAA,KAAA9B,GAAAG,EAAAA,WAAAA,EAAAA,YAAA,QAAA,GAAAF,EAAA,KAAAC,KAAAe,aAAApB,cAAAA,EAAA,kBAAAkC,KAAAC,SAAAC,QAAAd,OAAAe,KAAAC,OAAA,GAAAC,SAAAC,KAAAC,YAAAlD,EAAAC,EAAAO,EAAAJ,EAAA+C,cAAA/C,EAAAgD,UAAAjD","file":"main.js","sourcesContent":["/*\n * Client entry point.\n * NOTE: All modules use strict mode through the Babel transpiler\n */\n\nimport * as dom4 from '../vendor/dom4' // DOM level 4 polyfill\nimport * as Cookie from '../vendor/js-cookie'\nimport {parseEl, parseHTML} from './util'\nimport {defer, execDeferred} from './defer'\nimport lang from 'lang'\n\n// TEMP: Will later get imported by the post modules\nimport * as state from './state'\n\nimport {init as initOptions} from './options/models'\nimport OptionsPanel from './options/view'\n\ninitOptions()\n\n//Renders the options panel, after more important computation has been done\ndefer(() => new OptionsPanel())\n\n// Clear cookies, if versions mismatch.\nconst cookieVersion = 3\nif (localStorage.cookieVersion != cookieVersion) {\n\tfor (let cookie in Cookie.get()) {\n\t\t// Clear legacy cookies that were set for each board separatly.\n\t\t// Otherwise, they would override the new ones.\n\t\tconst paths = config.boards.enabled.slice()\n\t\tpaths.push('', '/')\n\t\tfor (let path of paths) {\n\t\t\tCookie.remove(cookie, {path})\n\t\t}\n\t}\n\tlocalStorage.cookieVersion = cookieVersion\n}\n\n// You can invoke the client-side debug mode with the `debug=true` query string\nif (/[&\\?]debug=true/.test(location.href)) {\n\tconfig.hard.debug = true\n}\n\n// Load language-specific CSS\ndocument.head.appendChild(parseEl(parseHTML\n\t`<style>\n\t\t.locked:after {\n\t\t\tcontent: \"${lang.thread_locked}\";\n\t\t}\n\t\t.locked > header nav:after {\n\t\t\tcontent: \" (${lang.locked})\";\n\t\t}\n\t</style>`))\n\n/*\n// Initialise main rendering object\nlet oneeSama = main.oneeSama = new common.OneeSama({\n\top: state.page.get('thread'),\n\tlang,\n\t// Core post link handler\n\ttamashii(num) {\n\t\tlet frag;\n\t\tconst op = state.links[num];\n\t\tif (op) {\n\t\t\tconst desc = num in state.mine.readAll() && this.lang.you;\n\t\t\tfrag = this.postRef(num, op, desc);\n\t\t}\n\t\telse\n\t\t\tfrag = '>>' + num;\n\t\treturn frag;\n\t}\n});\n*/\n\n/*\n// 2nd tier dependacy modules. These are needed before the websocket\n// connection is opened, because they populate the dispatcher handler object.\nextend(main, {\n\tloop: require('./loop'),\n\ttime: require('./time'),\n\tamusement: require('./amusement')\n});\n\n// Load post models and views\nmain.posts = require('./posts')\nmain.Extract = require('./extract')\n// Start the client\nmain.client = require('./client')\nmain.conection = require('./connection')\n\n// Load independant auxilary modules\nextend(main, {\n\thistory: require('./history'),\n\thide: require('./hide')\n})\n*/\n\nexecDeferred()\n//events.request('loading:hide')\n"],"sourceRoot":"/source/"}