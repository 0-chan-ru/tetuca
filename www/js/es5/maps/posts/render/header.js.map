{"version":3,"sources":["posts/render/header.js"],"names":["System","register","_export","_context","_taggedTemplateLiteral","strings","raw","Object","freeze","defineProperties","value","resolveName","data","html","trip","name","auth","escape","lang","anon","alias","undefined","config","staff","classes","readableTime","time","d","Date","pad","getDate","year","getMonth","getFullYear","week","getDay","getHours","getMinutes","relativeTime","then","now","Math","floor","isFuture","just_now","divide","unit","i","length","ago","parseHTML","parseAttributes","options","_templateObject","_templateObject2","setters","_underscore","_util","_lang","_state","_options","execute","renderHeader","num","subject","op","postURL","renderPostURL","renderName","renderTime","email","attrs","class","href","encodeURI","target","mnemonic","renderMnemonic","mnem","title","text","readable","get"],"mappings":"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","file":"posts/render/header.js","sourcesContent":["import {escape} from 'underscore'\nimport {parseHTML, parseAttributes, pad} from '../../util'\nimport lang from 'lang'\nimport {config} from '../../state'\nimport options from '../../options'\n\n// Render the header with various post information\nexport function renderHeader(data) {\n\tconst {num, op, subject} = data,\n\t\tpostURL = renderPostURL(num)\n\treturn parseHTML\n\t\t`<header>\n\t\t\t<input type=\"checkbox\" class=\"postCheckbox\">\n\t\t\t${subject ? `<h3>「${escape(data.subject)}」</h3>` : ''}\n\t\t\t${renderName(data)}\n\t\t\t${renderTime(data.time)}\n\t\t\t<nav>\n\t\t\t\t<a href=\"${postURL}\" class=\"history\">\n\t\t\t\t\tNo.\n\t\t\t\t</a>\n\t\t\t\t<a href=\"${postURL}\" class=\"quote\">\n\t\t\t\t\t${num}\n\t\t\t\t</a>\n\t\t\t</nav>\n\t\t</header>\n\t\t<span class=\"oi control\" data-glyph=\"chevron-bottom\"></span>`\n}\n\n// Render the name of a post's poster\nexport function renderName(data) {\n\tlet html = '<b class=\"name'\n\tconst {auth, email} = data\n\tif (auth) {\n\t\thtml += ` ${auth === 'admin' ? 'admin' : 'moderator'}`\n\t}\n\thtml += '\">'\n\tif (email) {\n\t\tconst attrs = {\n\t\t\tclass: 'email',\n\t\t\thref: 'mailto:' + encodeURI(email),\n\t\t\ttarget: 'blank'\n\t\t}\n\t\thtml += `<a ${parseAttributes(attrs)}>`\n\t}\n\thtml += resolveName(data)\n\tif (email) {\n\t\thtml += '</a>'\n\t}\n\thtml += '</b>'\n\tif (data.mnemonic) {\n\t\thtml += ' ' + renderMnemonic(data.mnemonic)\n\t}\n\treturn html\n}\n\n// Determine the name and tripcode combination to render\nfunction resolveName(data) {\n\tlet html = ''\n\tconst {trip, name, auth} = data\n\tif (name || !trip) {\n\t\tif (name) {\n\t\t\thtml += escape(name)\n\t\t} else {\n\t\t\thtml += lang.anon\n\t\t}\n\t\tif (trip) {\n\t\t\thtml += ' '\n\t\t}\n\t}\n\tif (trip) {\n\t\thtml += `<code>${escape(trip)}</code>`\n\t}\n\tif (auth) { // Render staff title\n\t\tlet alias\n\t\tif (auth in config.staff.classes) {\n\t\t\talias = config.staff.classes[auth].alias\n\t\t} else {\n\t\t\talias = auth\n\t\t}\n\t\thtml += ` ## ${alias}`\n\t}\n\treturn html\n}\n\n// Renders a poster identification mnemonic\nexport function renderMnemonic(mnemonic) {\n\treturn `<b class=\"mod addr\">${mnem}</b>`\n}\n\n// Renders a time element. Can be either absolute or relative.\nexport function renderTime(time) {\n\t// Format according to client's relative post timestamp setting\n\tlet title, text\n\tconst readable = readableTime(time)\n\tif (options.get('relativeTime')) {\n\t\ttitle = readable\n\t\ttext = relativeTime(time, Date.now())\n\t}\n\treturn parseHTML\n\t\t`<time title=\"${title}\">\n\t\t\t${text || readable}\n\t\t</time>`\n}\n\n// Renders classic absolute timestamp\nfunction readableTime(time) {\n\tlet d = new Date(time)\n\treturn pad(d.getDate()) + ' '\n\t\t+ lang.time.year[d.getMonth()] + ' '\n\t\t+ d.getFullYear()\n\t\t+ `(${lang.time.week[d.getDay()]})`\n\t\t+`${pad(d.getHours())}:${pad(d.getMinutes())}`\n}\n\n// Renders readable elapsed time since post\nfunction relativeTime(then, now) {\n\tlet time = Math.floor((now - then) / 60000),\n\t\tisFuture = false\n\tif (time < 1) {\n\t\tif (time > -5) { // Assume to be client clock imprecission\n\t\t\treturn lang.time.just_now\n\t\t}\n\t\telse {\n\t\t\tisFuture = true\n\t\t\ttime = -time\n\t\t}\n\t}\n\n\tconst divide = [60, 24, 30, 12],\n\t\tunit = ['minute', 'hour', 'day', 'month']\n\tfor (let i = 0; i < divide.length; i++) {\n\t\tif (time < divide[i]) {\n\t\t\treturn lang.ago(time, lang.time[unit[i]], isFuture)\n\t\t}\n\t\ttime = Math.floor(time / divide[i])\n\t}\n\n\treturn lang.ago(time, lang.time.year, isFuture)\n}\n\n// Render an anchor that points to the target post number\nexport function renderPostURL(num) {\n\treturn `#p${num}`\n}\n"],"sourceRoot":"/source/"}