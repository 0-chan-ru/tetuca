{"version":3,"sources":["posts/render/imager.js"],"names":["System","register","_export","_context","_taggedTemplateLiteral","strings","raw","Object","freeze","defineProperties","value","readableFilesize","size","Math","round","toString","slice","hiddenToggle","reveal","options","get","parseHTML","_templateObject3","lang","imageSearch","data","html","indexOf","ext","searchTemplates","google","_engine","thumbPath","mid","imagePaths","type","imageLink","name","_imgnm","imgnm","m","match","fullName","escape","tooLong","length","attrs","href","config","SECONDARY_MEDIA_URL","src","rel","download","title","_templateObject5","parseAttributes","spoilerInfo","_ref","large","spoiler","thumb","spoil","dims","images","commaList","_slicedToArray","_templateObject","_templateObject2","_templateObject4","_templateObject6","setters","_lang","_state","_underscore","_options","_util","execute","renderImage","showThumb","renderFigcaption","hat","renderThumbnail","list","audio","apng","undefined","_data$dims","thumbWidth","thumbHeight","sp","linkAttrs","target","imgAttrs","width","height","this","thumbStyle","style","sliceIterator","arr","i","_arr","_n","_d","_e","_s","_i","Symbol","iterator","next","done","push","err","Array","isArray","TypeError","mediaURL","models","engine","url","symbol","templates","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_loop","_step$value","class","_iterator"],"mappings":"AAAA,YAAaA,QAAOC,UAAU,OAAO,cAAc,aAAa,gBAAgB,cAAc,SAASC,EAAQC,GAA4M,QAASC,GAAuBC,EAAQC,GAAK,MAAOC,QAAOC,OAAOD,OAAOE,iBAAiBJ,GAASC,KAAKI,MAAMH,OAAOC,OAAOF,OAAU,QAASK,GAAiBC,GAAM,MAAQ,MAALA,EAAkBA,EAAK,KAAc,QAALA,EAAqBC,KAAKC,MAAMF,EAAK,MAAM,OAAOA,EAAKC,KAAKC,MAAMF,EAAK,UAAUG,WAAkBH,EAAKI,MAAM,EAAE,IAAI,IAAIJ,EAAKI,MAAM,IAAI,OAAO,QAASC,GAAaC,GAAQ,MAA2B,SAAxBC,EAAQC,IAAI,UAA2B,GAAWC,EAAUC,EAAiBC,EAAKL,EAAO,OAAO,SAAU,QAASM,GAAYC,GAAM,GAAIC,GAAK,EAAG,KAAI,OAAO,QAAQC,QAAQF,EAAKG,KAAK,GAAI,MAAGT,GAAQC,IAAI,UAAkBS,EAAgBC,OAAOL,GAAc,EAAI,KAAI,GAAIM,KAAWF,GAAiBH,GAAMG,EAAgBE,GAASN,EAAO,OAAOC,GAAM,QAASM,GAAUP,EAAKQ,GAAK,MAAOC,GAAWC,MAAMV,EAAKQ,GAAKR,EAAKQ,IAAI,MAAM,SAAU,QAASG,GAAUX,GAAM,GAAIY,GAAK,GAAOC,EAAOC,EAAUA,EAAMD,EAAOC,MAAUC,EAAED,EAAME,MAAM,kBAAsBD,KAAGH,EAAKG,EAAE,GAAI,IAAIE,GAASC,EAAOJ,GAAOK,EAAQP,EAAKQ,QAAQ,EAAMD,KAASL,EAAMI,EAAON,EAAKrB,MAAM,EAAE,KAAK,aAAa2B,EAAOlB,EAAKG,KAAM,IAAIkB,IAAOC,KAAKC,EAAOC,oBAAoB,OAAOxB,EAAKyB,IAAIC,IAAI,WAAWC,SAASV,EAA4C,OAA/BE,KAASE,EAAMO,MAAMX,GAAiBrB,EAAUiC,EAAiBC,gBAAgBT,GAAOP,GAAuH,QAASiB,GAAYC,GAAM,GAAIC,GAAMD,EAAKC,MAAUC,EAAQF,EAAKE,QAAYC,EAAM1B,EAAW2B,KAAkF,QAAzEH,GAA+B,UAAxBvC,EAAQC,IAAI,aAAqBwC,GAAO,KAAKlC,MAAMiC,EAAQ,QAAeC,MAAMA,EAAME,KAAKd,EAAOe,OAAOH,MAAMF,EAAM,UAAU,cAAzwD,GAAInC,GAAKyB,EAAOL,EAAOxB,EAAQE,EAAU2C,EAAUC,EAAeC,EAAgBC,EAAiB7C,EAAiB8C,EAAiBd,EAAiBe,EAAiBnC,EAAWL,CAAsmD,QAAQyC,SAAS,SAASC,GAAOhD,EAAKgD,EAAAA,YAAgB,SAASC,GAAQxB,EAAOwB,EAAOxB,QAAS,SAASyB,GAAa9B,EAAO8B,EAAY9B,QAAS,SAAS+B,GAAUvD,EAAQuD,EAAAA,YAAmB,SAASC,GAAOtD,EAAUsD,EAAMtD,UAAU2C,EAAUW,EAAMX,YAAaY,QAAQ,WAA4rD,QAASC,GAAYpD,EAAKP,GAAQ,GAAI4D,GAAkC,SAAxB3D,EAAQC,IAAI,WAAoBF,CAAO,OAAOG,GAAU6C,EAAgBa,EAAiBtD,EAAKP,GAAQ8B,EAAOe,OAAOiB,KAAKF,EAAU,4BAA4B,GAAGA,EAAUG,EAAgBxD,GAAM,IAAwC,QAASsD,GAAiBtD,EAAKP,GAAQ,GAAIgE,GAAKlB,GAAWvC,EAAK0D,MAAM,IAAI,GAAG1D,EAAKoB,OAAOlC,EAAiBc,EAAKb,MAAMa,EAAKqC,KAAK,GAAG,IAAIrC,EAAKqC,KAAK,GAAGrC,EAAK2D,KAAK,OAAO,IAAK,OAAO/D,GAAU8C,EAAiBlD,EAAaC,GAAQM,EAAYC,GAAMyD,EAAK9C,EAAUX,IAmIn0I,QAAAwD,GAAAxD,EAAAsB,GAAA,GAAAG,GAAAhB,EAAAgB,IAAAzB,EAAAyB,IAAAU,EAAAyB,OAAAC,EAAArB,EAAAxC,EAAAqC,KAAA,GAAAyB,GAAAD,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAE,EAAAF,EAAA,EAAA,IAAA7D,EAAAkC,SAAAxC,EAAAC,IAAA,YAAA,CAAA,GAAAqE,GAAAjC,EAAA/B,EAAAmC,GAAA6B,EAAA7B,MAAA2B,EAAAE,EAAA3B,KAAA,GAAA0B,EAAAC,EAAA3B,KAAA,OAAAF,GAAA,SAAAnC,EAAAG,KAAAT,EAAAC,IAAA,WAAA8B,EAAAlB,EAAAP,EAAA,UAAAN,EAAAC,IAAA,UAAA,IAAAsE,IAAAC,OAAA,SAAAxC,IAAA,WAAAJ,KAAAA,GAAAG,GAAA0C,GAAA1C,IAAAU,EAAAiC,MAAAN,EAAAO,OAAAN,EAAA,OAAAzC,KAAA2C,EAAAA,SAAA,UAAAE,EAAAA,SAAA,WAAA,QAAAG,KAAAC,aAAAJ,EAAAK,MAAA,kBAAA5E,EAAAgD,EAAAd,gBAAAmC,GAAAnC,gBAAAqC,IAnIunE3B,EAAe,WAAW,QAASiC,GAAcC,EAAIC,GAAG,GAAIC,MAAYC,GAAG,EAASC,GAAG,EAAUC,EAAGnB,MAAU,KAAI,IAAI,GAA8BoB,GAA1BC,EAAGP,EAAIQ,OAAOC,cAAiBN,GAAIG,EAAGC,EAAGG,QAAQC,QAAeT,EAAKU,KAAKN,EAAG/F,QAAU0F,GAAGC,EAAKxD,SAASuD,GAAjDE,GAAG,IAAwD,MAAMU,GAAKT,GAAG,EAAKC,EAAGQ,EAAK,QAAS,KAAQV,GAAII,EAAG,WAAUA,EAAG,YAAa,QAAS,GAAGH,EAAG,KAAMC,IAAK,MAAOH,GAAM,MAAO,UAASF,EAAIC,GAAG,GAAGa,MAAMC,QAAQf,GAAM,MAAOA,EAAU,IAAGQ,OAAOC,WAAYrG,QAAO4F,GAAM,MAAOD,GAAcC,EAAIC,EAAU,MAAM,IAAIe,WAAU,4DAA+DjD,EAAgB9D,GAAwB,yBAAyB,iBAAiB,iBAAiB,wBAAwB,yBAAyB,iBAAiB,iBAAiB,wBAAwB+D,EAAiB/D,GAAwB,6BAA6B,iBAAiB,0CAA0C,uCAAuC,4BAA4B,6BAA6B,iBAAiB,0CAA0C,uCAAuC,4BAA4BkB,EAAiBlB,GAAwB,yCAAyC,oBAAoB,yCAAyC,oBAAoBgE,EAAiBhE,GAAwB,MAAM,0BAA0B,2BAA2B,MAAM,0BAA0B,2BAA2BkD,EAAiBlD,GAAwB,MAAM,kBAAkB,mBAAmB,MAAM,kBAAkB,mBAAmBiE,EAAiBjE,GAAwB,MAAM,uBAAuB,oBAAoB,MAAM,uBAAuB,oBAA2QF,EAAQ,cAAc2E,GAAsR3E,EAAQ,mBAAmB6E,GAAkB7C,GAAYgB,IAAIF,EAAOoE,SAAS,OAAOxD,MAAMZ,EAAOoE,SAAS,SAASnF,IAAIe,EAAOoE,SAAS,OAAOvD,MAAMb,EAAOoE,SAAS,iBAAiBvF,EAAgB,WAAW,GAAIwF,KAASC,OAAO,SAASC,IAAI,kDAAkDpF,KAAK,QAAQqF,OAAO,MAAMF,OAAO,OAAOC,IAAI,wBAAwBpF,KAAK,QAAQqF,OAAO,OAAOF,OAAO,WAAWC,IAAI,6CAA6CpF,KAAK,QAAQqF,OAAO,OAAOF,OAAO,cAAcnF,KAAK,MAAMoF,IAAI,0CAA0CC,OAAO,OAAOF,OAAO,WAAWnF,KAAK,OAAOoF,IAAI,sDAAsDC,OAAO,OAAWC,KAAiBC,GAA0B,EAASC,GAAkB,EAAUC,EAAevC,MAAU,KAAqb,IAAI,GAmInhLwC,GAnIkmKC,EAAM,WAAiB,GAAIC,GAAYF,EAAMnH,MAAU4G,EAAOS,EAAYT,OAAWC,EAAIQ,EAAYR,IAAQpF,EAAK4F,EAAY5F,KAASqF,EAAOO,EAAYP,OAAW1E,GAAO6C,OAAO,SAASxC,IAAI,WAAW6E,QAAM,eAAeV,EAAQG,GAAUH,GAAQ,SAAS7F,GAAM,MAAIN,GAAQC,IAAIkG,IAAoBxE,EAAMC,KAAKwE,GAAY,UAAPpF,EAAeH,EAAUP,GAAMA,EAAKU,IAAcd,EAAU+C,EAAiBb,gBAAgBT,GAAO0E,IAAxH,KAA4IS,EAmI7hLZ,EAAMV,OAAAC,cAAAc,GAAAG,EAAAI,EAAApB,QAAAC,MAAAY,GAAA,EAAAI,IAAA,MAAAd,GAAAW,GAAA,EAAAC,EAAAZ,EAAA,QAAA,KAAAU,GAAAO,EAAAA,WAAAA,EAAAA,YAAA,QAAA,GAAAN,EAAA,KAAAC,IAAA,MAAAH,MAAAvH,EAAA,kBAAA+E","file":"posts/render/imager.js","sourcesContent":["/**\n * Image thumbnail HTML rendering\n */\n\nimport lang from 'lang'\nimport {config} from '../../state'\nimport {escape} from 'underscore'\nimport options from '../../options'\nimport {parseHTML, commaList} from '../../util'\n\n/**\n * Render a thumbnail of an image, according to configuration settings\n * @param {Image} data - Image data object\n * @returns {bool} reveal - Reveal an image thumbnail, in \"hidden\"  thumbnail\n * mode\n * @returns {string}\n */\nexport function renderImage(data, reveal) {\n    const showThumb = options.get(\"thumbs\") !== 'hide' || reveal\n    return parseHTML\n        `<figure>\n            ${renderFigcaption(data, reveal)}\n            ${config.images.hat && showThumb ? '<span class=\"hat\"></span>': ''}\n            ${showThumb ? renderThumbnail(data) : ''}\n        </figure>`\n}\n\n/**\n * Render the information caption above the image\n * @param {Image} data - Image data object\n * @param {bool} reveal - Reveal an image thumbnail, in \"hidden\"  thumbnail\n * @returns {string}\n */\nexport function renderFigcaption(data, reveal) {\n    const list = commaList([\n        data.audio ? '\\u266B' : '',\n        data.length,\n        readableFilesize(data.size),\n        `${data.dims[0]}x${data.dims[1]}`,\n        data.apng ? 'APNG' : ''\n    ])\n    return parseHTML\n        `<figcaption>\n            ${hiddenToggle(reveal)}\n            ${imageSearch(data)}\n            <span>\n                (${list})\n            </span>\n            ${imageLink(data)}\n        </figcaption>`\n}\n\n/**\n * Renders a human readable file size string\n * @param {int} size - File size in bytes\n * @returns {string}\n */\nfunction readableFilesize(size) {\n\tif (size < 1024) {\n\t\treturn size + ' B'\n\t}\n\tif (size < 1048576) {\n        return Math.round(size / 1024) + ' KB'\n    }\n\tsize = Math.round(size / 104857.6).toString()\n\treturn size.slice(0, -1) + '.' + size.slice(-1) + ' MB'\n}\n\n/**\n * Render the button for toggling hidden thumbnails\n * @param {bool} reveal - Reveal an image thumbnail, in \"hidden\"  thumbnail\n * @returns {string}\n */\nfunction hiddenToggle(reveal) {\n    if (options.get('thumbs') !== 'hide') {\n        return ''\n    }\n    return parseHTML\n        `<a class=\"imageToggle\">\n            [${lang[reveal ? 'hide' : 'show']}]\n        </a>`\n}\n\n/**\n * Base URLs of image addresses\n */\nconst imagePaths = {\n    src: config.mediaURL + 'src/',\n    thumb: config.mediaURL + 'thumb/',\n    mid: config.mediaURL + 'mid/',\n    spoil: config.mediaURL + 'spoil/spoiler'\n}\n\n/**\n * Generate template functions for each image search engine\n */\nconst searchTemplates = (function() {\n\tconst models = [\n\t\t{\n\t\t\tengine: 'google',\n\t\t\turl: 'https://www.google.com/searchbyimage?image_url=',\n\t\t\ttype: 'thumb',\n\t\t\tsymbol: 'G'\n\t\t},\n\t\t{\n\t\t\tengine: 'iqdb',\n\t\t\turl: 'http://iqdb.org/?url=',\n\t\t\ttype: 'thumb',\n\t\t\tsymbol: 'Iq'\n\t\t},\n\t\t{\n\t\t\tengine: 'saucenao',\n\t\t\turl: 'http://saucenao.com/search.php?db=999&url=',\n\t\t\ttype: 'thumb',\n\t\t\tsymbol: 'Sn'\n\t\t},\n\t\t{\n\t\t\tengine: 'desustorage',\n\t\t\ttype: 'MD5',\n\t\t\turl: 'https://desustorage.org/_/search/image/',\n\t\t\tsymbol: 'Ds'\n\t\t},\n\t\t{\n\t\t\tengine: 'exhentai',\n\t\t\ttype: 'SHA1',\n\t\t\turl: 'http://exhentai.org/?fs_similar=1&fs_exp=1&f_shash=',\n\t\t\tsymbol: 'Ex'\n\t\t}\n\t]\n\n\tconst templates = {}\n    for (let {engine, url, type, symbol} of models) {\n        const attrs = {\n            target: '_blank',\n            rel: 'nofollow',\n            class: 'imageSearch ' + engine\n        }\n        templates[engine] = data => {\n            if (!options.get(engine)) {\n                return ''\n            }\n            attrs.href = url+ (type === 'thumb' ? thumbPath(data) : data[type])\n            return parseHTML\n                `<a ${parseAttributes(attrs)}>\n                    ${symbol}\n                </a>`\n        }\n    }\n\n\treturn templates\n})()\n\n/**\n * Render image search links in accordance to client settings\n * @param {Post} data\n * @returns {string}\n */\nfunction imageSearch(data) {\n\tlet html = ''\n\n\t// Only render google for PDFs and MP3s\n\tif (['.pdf', '.mp3'].indexOf(data.ext) > -1) {\n        if (options.get(\"google\")) {\n            return searchTemplates.google(data)\n        }\n        return ''\n    }\n    for (let engine in searchTemplates) {\n        html += searchTemplates[engine](data)\n    }\n\treturn html\n}\n\n/**\n * Get the thumbnail path of an image, accounting for not thumbnail of specific\n * type being present\n * @param {Image} data - Image data\n * @param {bool} mid - Request an extra quality medium thumbnail\n * @returns {string}\n */\nfunction thumbPath(data, mid) {\n    return imagePaths[type] + data[mid && data.mid ? 'mid' : 'thumb']\n}\n\n/**\n * Render a name + download link of an image\n * @param {Image} data\n * @returns {string}\n */\nfunction imageLink(data) {\n    let name = '',\n        {imgnm} = imgnm\n    const m = imgnm.match(/^(.*)\\.\\w{3,4}$/);\n    if (m) {\n        name = m[1]\n    }\n    const fullName = escape(imgnm),\n        tooLong = name.length >= 38\n    if (tooLong) {\n        imgnm = escape(name.slice(0, 30))\n            + '(&hellip;)'\n            + escape(data.ext)\n    }\n    const attrs = {\n        href: `${config.SECONDARY_MEDIA_URL}src/${data.src}`,\n        rel: 'nofollow',\n        download: fullName\n    }\n    if (tooLong) {\n        attrs.title = fullName\n    }\n    return parseHTML\n        `<a ${parseAttributes(attrs)}>\n            ${imgnm}\n        </a>`\n}\n\n/**\n * Render a hat on top of the thumbnail, if enabled\n * @param {bool} showThumb\n * @returns {string}\n */\nfunction renderHat(showThumb) {\n    if (showThumb && config.images.hats) {\n        return '<span class=\"hat\"></span>'\n    }\n    return ''\n}\n\n/**\n * Render the actual thumbnail image\n * @param {Image} data\n * @param {bool=true} showThumb\n * @returns {string}\n */\nexport function renderThumbnail(data, href) {\n    let src = imagePaths.src + data.src,\n        thumb,\n        [width, height, thumbWidth, thumbHeight] = data.dims\n\n    if (data.spoiler && options.get('spoilers')) {\n        // Spoilered and spoilers enabled\n        const sp = spoilerInfo(data)\n        thumb = sp.thumb\n        thumbWidth = sp.dims[0]\n        thumbHeight = sp.dims[1]\n    } else if (data.ext === '.gif' && options.get('autogif')) {\n        // Animated GIF thumbnails\n        thumb = src\n    } else {\n        thumb = thumbPath(data, options.get('thumbs') !== 'small')\n    }\n\n    const linkAttrs = {\n        target: '_blank',\n        rel: 'nofollow',\n        href: href || src\n    }\n    const imgAttrs = {\n        src: thumb,\n        width: thumbWidth,\n        height: thumbHeight\n    }\n\n    // Catalog pages\n    if (href) {\n        // Handle the thumbnails with the HTML5 History controller\n        linkAttrs.class = 'history'\n\n        // No image hover previews\n        imgAttrs.class = 'expanded'\n        if(this.thumbStyle == 'hide') {\n            imgAttrs.style = 'display: none'\n        }\n    }\n\n    return parseHTML\n        `<a ${parseAttributes(linkAttrs)}>\n            <img ${parseAttributes(imgAttrs)}>\n        </a>`\n}\n\n/**\n * Parse and return image spoiler information\n * @param {Image} data\n * @returns {Object}\n */\nfunction spoilerInfo({large, spoiler}) {\n    let thumb = imagePaths.spoil\n    if (large || options.get(\"thumbs\") !== 'small') {\n        thumb += 's'\n    }\n    html += spoiler + '.png'\n    return {\n        thumb,\n        dims: config.images.thumb[large ? 'midDims' : 'thumbDims']\n    }\n}\n"],"sourceRoot":"/source/"}