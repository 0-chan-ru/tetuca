{"version":3,"sources":["posts/render/body.js"],"names":["System","register","_export","_context","parseWord","word","data","split","html","i","length","state","bit","test","parsePostLink","links","parseReference","parseURL","escape","num","match","verified","renderPostLink","board","OP","name","href","refTargets","newTabLink","text","encodeURI","config","_slicedToArray","boards","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_step3$value","link","setters","_state","_underscore","_etc","execute","renderBody","renderFragment","body","dice","frag","lines","line","startsWith","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","sliceIterator","arr","_arr","_n","_d","_e","_s","_i","push","Array","isArray","Object","TypeError","enabled","psuedo","concat"],"mappings":"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","file":"posts/render/body.js","sourcesContent":["import {config} from '../state'\nimport {escape} from 'underscore'\nimport {renderPostLink} from './etc'\n\n// Render the text body of a post\nexport function renderBody(data) {\n\tif (!data.state) {\n\t\t// Initial post state [new_line, no_qoute, no_spoiler]\n\t\tdata.state = [0, 0, 0]\n\t}\n\tlet html = renderFragment(data.body, data.state, data.dice)\n\tif (data.state[1]) { // Close quote on post end\n\t\thtml += '</em>'\n\t}\n\tif (data.state[2]) { // Same with spoilers\n\t\thtml += '</del>'\n\t}\n\treturn html\n}\n\n// Parse commited text body fragment\nexport function renderFragment(frag, data) {\n\tconst lines = frag.split('\\n'),\n\t\t{state} = data\n\tlet html = ''\n\tfor (let i = 0; i < lines.length; i++) {\n\t\t// Start a new line\n\t\tif (state[0] && i % 2) {\n\t\t\t// Close quoute\n\t\t\tif (state[1] % 2) {\n\t\t\t\thtml += '</em>'\n\t\t\t\tstate[1]++\n\t\t\t}\n\t\t\thtml += '<br>'\n\t\t\tstate[0] = 0\n\t\t}\n\n\t\t// Quote or line starts with link/embed\n\t\tconst line = lines[i]\n\t\tif (!state[0] && line.startsWith('>')) {\n\t\t\thtml += '<em>'\n\t\t\tstate[1]++\n\t\t}\n\n\t\t// Bodies may be empty\n\t\tif (frag) {\n\t\t\tfor (let word of line.split(' ')) {\n\t\t\t\thtml += parseWord(word, data)\n\t\t\t\tstate[0] = 1\n\t\t\t}\n\t\t}\n\t}\n\treturn html\n}\n\n// Convert a word to it's appropriate HTML representation\nfunction parseWord(word, data) {\n\t// `[spoiler]` and `[/spoiler]` are treated the same way. You can't nest\n\t// them.\n\tconst split = word.split(/\\[\\/?spoiler]/i)\n\tlet html = ''\n\tfor (let i = 0; i < split.length; i++) {\n\t\t// Insert spoiler tags\n\t\tif (i % 2) {\n\t\t\thtml += `<${data.state[2]++ % 2 ? '/' : ''}del>`\n\n\t\t\t// TODO: Do we need special logic for postForms here?\n\t\t}\n\n\t\tconst bit = split[i]\n\t\tif (/^>>\\d+$/.test(bit)) {\n\t\t\t// Post links\n\t\t\thtml += parsePostLink(bit, data.links)\n\t\t} else if (/^>>>\\/\\w+\\//.test(bit)) {\n\t\t\t// Internal and custom reference URLs\n\t\t\thtml += parseReference(bit)\n\t\t} else if (/^https?:\\/\\/[^-A-Za-z0-9+&@#/%?=~_]$/.test(bit)) {\n\t\t\t// Generic URLs\n\t\t\thtml += parseURL(bit)\n\t\t} else if (/<strong>.+<\\/strong>/.test(bit)) {\n\t\t\t// Hash command results. Already verified server-side.\n\t\t\thtml += bit\n\t\t} else {\n\t\t\thtml += escape(bit)\n\t\t}\n\t}\n\treturn html\n}\n\n// Verify and render a link to other posts\nfunction parsePostLink(bit, links) {\n\tif (!links) {\n\t\treturn bit\n\t}\n\tconst num = bit.match(/^>>\\/(\\d+)$/)[1],\n\t\tverified = links[num]\n\tif (!verified) {\n\t\treturn bit\n\t}\n\treturn renderPostLink(num, verified.board, verified.OP)\n}\n\n// Generate all possible refference name and link pairs\nconst refTargets = {},\n\t{boards} = config\nfor (let board of boards.enabled) {\n\trefTargets[board] = `../${board}/`\n}\nfor (let [name, link] of boards.psuedo.concat(boards.links)) {\n\trefTargets[name] = link\n}\n\n// Parse internal or customly set reference URL\nfunction parseReference(bit) {\n\tconst name = bit.match(/^>>>\\/(\\w+)\\/$/)[1],\n\t\thref = refTargets[name]\n\tif (!href) {\n\t\treturn bit\n\t}\n\treturn newTabLink(href, bit)\n}\n\n// Render and anchor link that opens in a new tab\nfunction newTabLink(href, text) {\n\treturn `<a href=\"${href}\" target=\"_blank\">${text}</a>`\n}\n\n// Render generic URLs and embed, if aplicable\nfunction parseURL(bit) {\n\n\t// TODO: Embeds\n\n\treturn newTabLink(encodeURI(href), bit)\n}\n"],"sourceRoot":"/source/"}