{"version":3,"sources":["posts/render/body.js"],"names":["System","register","_export","_context","config","_slicedToArray","ref_re","setters","_main","execute","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","value","length","err","Array","isArray","Object","TypeError","pattern","targets","boards","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","enabled","board","_ref3","psuedo","concat","links","_ref2","name","link","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","RegExp"],"mappings":"AAAA,YAAaA,QAAOC,UAAU,QAAQ,SAASC,EAAQC,GAAU,GAAIC,GAAOC,EAAeC,CAAO,QAAQC,SAAS,SAASC,GAAOJ,EAAOI,EAAMJ,SAAUK,QAAQ,WAAWJ,EAAe,WAAW,QAASK,GAAcC,EAAIC,GAAG,GAAIC,MAAYC,GAAG,EAASC,GAAG,EAAUC,EAAGC,MAAU,KAAI,IAAI,GAA8BC,GAA1BC,EAAGR,EAAIS,OAAOC,cAAiBP,GAAII,EAAGC,EAAGG,QAAQC,QAAeV,EAAKW,KAAKN,EAAGO,QAAUb,GAAGC,EAAKa,SAASd,GAAjDE,GAAG,IAAwD,MAAMa,GAAKZ,GAAG,EAAKC,EAAGW,EAAK,QAAS,KAAQb,GAAIK,EAAG,WAAUA,EAAG,YAAa,QAAS,GAAGJ,EAAG,KAAMC,IAAK,MAAOH,GAAM,MAAO,UAASF,EAAIC,GAAG,GAAGgB,MAAMC,QAAQlB,GAAM,MAAOA,EAAU,IAAGS,OAAOC,WAAYS,QAAOnB,GAAM,MAAOD,GAAcC,EAAIC,EAAU,MAAM,IAAImB,WAAU,4DAA+DzB,EAAO,WAAW,GAAI0B,GAAQ,yHAAyIC,KAAeC,EAAO9B,EAAO8B,OAAWC,GAA0B,EAASC,GAAkB,EAAUC,EAAepB,MAAU,KAAI,IAAI,GAkBh/BqB,GAlBo/BC,EAkBlgCL,EAAOM,QAAOpB,OAAAC,cAAAc,GAAAG,EAAAC,EAAAjB,QAAAC,MAAAY,GAAA,EAAA,CAAA,GAAAM,GAAAH,EAAAb,KAAAQ,GAAAQ,GAAA,MAAAA,EAAA,KAAA,MAAAd,GAAAS,GAAA,EAAAC,EAAAV,EAAA,QAAA,KAAAQ,GAAAI,EAAAA,WAAAA,EAAAA,YAAA,QAAA,GAAAH,EAAA,KAAAC,IAAA,IAAA,GAAAK,KAAAR,GAAAS,OAAAC,OAAAV,EAAAW,OAAA,CAAA,GAAAC,GAAAzC,EAAAqC,EAAA,GAAAK,EAAAD,EAAA,GAAAE,EAAAF,EAAA,EAAAb,GAAAc,GAAAC,EAAA,GAAAC,IAAA,EAAAC,GAAA,EAAAC,EAAAlC,MAAA,KAAA,IAAA,GAMNmC,GANMC,EAMbpB,EAAOb,OAAAC,cAAA4B,GAAAG,EAAAC,EAAA/B,QAAAC,MAAA0B,GAAA,EAAA,CAAAG,EAAA3B,KAAAO,IAAA,iCAAA,MAAAL,GAAAuB,GAAA,EAAAC,EAAAxB,EAAA,QAAA,KAAAsB,GAAAI,EAAAA,WAAAA,EAAAA,YAAA,QAAA,GAAAH,EAAA,KAAAC,IAAA,MAAAnB,IAAA,IAAA,GAAAsB,QAAAtB","file":"posts/render/body.js","sourcesContent":["/**\n * Text body parser\n */\n\nimport {config} from 'main'\n\n/**\n * Construct regex for various referal links and embeds\n */\nconst ref_re = (function () {\n    let pattern = '>>('\n        + '\\\\d+'\n        + '|>\\\\/watch\\\\?v=[\\\\w-]{11}(?:#t=[\\\\dhms]{1,9})?'\n        + '|>\\\\/soundcloud\\\\/[\\\\w-]{1,40}\\\\/[\\\\w-]{1,80}'\n        + '|>\\\\/pastebin\\\\/\\\\w+'\n\n    const targets = {},\n        {boards} = config\n    for (let board of boards.enabled) {\n    \ttargets[board] = `../${board}/`\n    }\n\tfor (let [name, link] in boards.psuedo.concat(boards.links)) {\n        targets[name] = link\n\t}\n    for (let target of targets) {\n        pattern += '|>\\\\/${board}\\\\/(?:\\\\w+\\\\/?)?'\n    }\n\n\tpattern += ')'\n\treturn new RegExp(pattern)\n})()\n"],"sourceRoot":"/source/"}