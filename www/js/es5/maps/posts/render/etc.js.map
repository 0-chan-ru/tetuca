{"version":3,"sources":["posts/render/etc.js"],"names":["System","register","_export","_context","_taggedTemplateLiteral","strings","raw","Object","freeze","defineProperties","value","postAnchor","href","text","parseHTML","_templateObject","page","mine","lang","setters","_state","_lang","execute","renderPostLink","num","board","op","get","you","thread","OP","renerBanned","mod","banMessage","renderModInfo","info","html","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","action","formatLog","err","renderBacklinks","links","_ref2"],"mappings":"AAAA,YAAaA,QAAOC,UAAU,cAAc,QAAQ,SAASC,EAAQC,GAA6C,QAASC,GAAuBC,EAAQC,GAAK,MAAOC,QAAOC,OAAOD,OAAOE,iBAAiBJ,GAASC,KAAKI,MAAMH,OAAOC,OAAOF,OAuB9O,QAASK,GAAWC,EAAMC,GACzB,MAAOC,WAAAC,EACsBH,EACzBC,GA1B0E,GAAIG,GAAKC,EAAKC,EAAKH,CAuBlG,QAAAI,SAAA,SAAAC,GAvBQJ,EAAAI,EAAAJ,KAAMC,EAAAG,EAAAH,MAAA,SAAAI,GACPH,EAAAG,EAAAA,aAAAC,QAAA,WAGA,QAASC,GAAeC,EAAKC,EAAOC,GAC1C,GAAIb,GAAO,IACPY,KAAUT,EAAKW,IAAI,WACtBd,GAAA,KAAaY,EAAA,KADdZ,GAGQW,EACJP,EAAKU,IAAIH,KACZX,GAAQ,IAAMK,EAAKU,IADpB,IAGMC,GAASb,EAAKW,IAAI,SAGjB,OAFHD,KAAOG,EACVhB,GAAQ,KACEW,GAAOK,IACjBhB,GAAQ,IAAMK,EAAKY,IAEbnB,EAAA,IAAec,EAAA,IAASC,EAAA,IAAMF,EAAOX,GAYtC,QAASkB,KACf,MAAA,+BAAsCb,EAAKc,IAAIC,WAAT,OAIhC,QAASC,GAAcC,GAC7B,GAAIC,GAAO,2BADwBC,GAAA,EAAAC,GAAA,EAAAC,EAAAC,MAAA,KAEnC,IAAA,GAAmBC,GAAnBC,EAAmBP,EAAAQ,OAAAC,cAAnBP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAyB,CAAA,GAAhBU,GAAAN,EAAA/B,KAAgB0B,IACblB,EAAKc,IAAIgB,UAAUD,GAAnB,QADZ,MAAAE,GAAAX,GAAA,EAAAC,EAAAU,EAAA,QAAA,KAAAZ,GAAAK,EAAAA,WAAAA,EAAAA,YAAA,QAAA,GAAAJ,EAAA,KAAAC,IAFmC,MAAAH,IAK3B,OAKF,QAASc,GAAgBC,GAC/B,IAAKA,EACJ,MAAO,EADR,IAGIf,GAAO,EAJ2B,KAAA,GAAAgB,KAKdD,GAAO,CAAA,GAArB1B,GAAA2B,EAAA3B,MAAOC,EAAA0B,EAAA1B,EACZU,KACHA,GAAQ,KADTA,GAGQb,EAAe4B,EAAM3B,KAAMC,EAAOC,GAJ3C,MAMOU,GAxDDrB,EAAAX,GAAA,4BAAA,UAAA,aAAA,4BAAA,UAAA,aAGAF,EAAA,iBAAAqB,GA2BArB,EAAA,cAAA6B,GAKA7B,EAAA,gBAAAgC,GAUAhC,EAAA,kBAAAgD","file":"posts/render/etc.js","sourcesContent":["import {page, mine} from '../../state'\nimport lang from 'lang'\n\n// Render a link to other posts\nexport function renderPostLink(num, board, op) {\n\tlet text = '>>'\n\tif (board !== page.get('board')) { // Cross-board\n\t\ttext += `>/${board}/`\n\t}\n\ttext += num\n\tif (mine.get(num)) { // Post, I made\n\t\ttext += ' ' + lang.you\n\t}\n\tconst thread = page.get('thread')\n\tif (op !== thread) { // Cross-thread\n\t\ttext += ' \\u27a1'\n\t} else if (num == thread) { // OP post of this thread\n\t\ttext += ' ' + lang.OP\n\t}\n\treturn postAnchor(`/${board}/${op}#${num}`, text)\n}\n\n// Render the anchor element of a post link\nfunction postAnchor(href, text) {\n\treturn parseHTML\n\t\t`<a class=\"history\" href=\"${href}\">\n\t\t\t${text}\n\t\t</a>`\n}\n\n// Render USER WAS BANNED FOR THIS POST message, or similar\nexport function renerBanned() {\n\treturn `<b class=\"admin banMessage\">${lang.mod.banMessage}</b>`\n}\n\n// Render moderation information. Only exposed to authenticated staff.\nexport function renderModInfo(info) {\n\tlet html = '<b class=\"modLog admin\">'\n\tfor (let action of info) {\n\t\thtml += `${lang.mod.formatLog(action)}<br>`\n\t}\n\thtml += '</b>'\n\treturn html\n}\n\n// Render links to posts that are linking to the target post\nexport function renderBacklinks(links) {\n\tif (!links) {\n\t\treturn ''\n\t}\n\tlet html = ''\n\tfor (let {board, op} in links) {\n\t\tif (html) {\n\t\t\thtml += ' '\n\t\t}\n\t\thtml += renderPostLink(links[num], board, op)\n\t}\n\treturn html\n}\n"],"sourceRoot":"/source/"}