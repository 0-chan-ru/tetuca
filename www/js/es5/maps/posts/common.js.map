{"version":3,"sources":["posts/common.js"],"names":["System","register","_export","_context","main","imager","_","Backbone","common","util","lang","oneeSama","options","state","setters","execute","require","module","exports","Hidamari","extend","className","initialize","this","listenTo","model","redirect","clientInit","get","anonymise","command","_len","arguments","length","args","Array","_key","apply","updateBody","frag","blockquote","el","query","attributes","innerHTML","setModel","body","renderTime","outerHTML","time","renderBacklinks","links","backlinks","fun","anon","renderName","name","renderModerationInfo","info","getContainer","remove","before","parseDOM","modInfo","renderBan","after","banned","renderEditing","editing","classList","add","normalize"],"mappings":"AAAA,YAAaA,QAAOC,YAAY,SAASC,EAAQC,GAAU,GAAIC,GAAKC,EAAOC,EAAEC,EAASC,EAAOC,EAAKC,EAAKC,EAASC,EAAQC,CAAM,QAAQC,WAAWC,QAAQ,WAInJX,EAAOY,QAAQ,WACpBX,EAASW,QAAQ,YAChBV,EAA6DF,EAA7DE,EAAGC,EAA0DH,EAA1DG,SAAUC,EAAgDJ,EAAhDI,OAAQC,EAAwCL,EAAxCK,KAAMC,EAAkCN,EAAlCM,KAAMC,EAA4BP,EAA5BO,SAAUC,EAAkBR,EAAlBQ,QAASC,EAAST,EAATS,MAEtDI,OAAOC,QAAUb,EAAOc,SAASC,QAChCC,UAAW,QAEXC,WAAA,WACCC,KAAKC,SAASD,KAAKE,MAAO,WAAYF,KAAKG,WAG5CC,WAAA,WACC,MAAIf,GAAQgB,IAAI,cACfL,KAAKM,YACCN,MAGRG,SAAA,SAASI,GAAkB,IAAA,GAAAC,GAAAC,UAAAC,OAANC,EAAAC,MAAAJ,EAAA,EAAAA,EAAA,EAAA,GAAAK,EAAA,EAAAL,EAAAK,EAAAA,IAAAF,EAAAE,EAAA,GAAAJ,UAAAI,EAAMb,MACrBO,GAALO,MAAAd,KAAiBW,IAGlBI,WAAA,SAAWC,GACLhB,KAAKiB,aACTjB,KAAKiB,WAAajB,KAAKkB,GAAGC,MAAM,cADjC,IAKMjB,GAAQF,KAAKE,MAAMkB,UANTpB,MAOXiB,WAAWI,UAAYjC,EAASkC,SAASpB,GAAOqB,KAAKrB,EAAMqB,OAEjEC,WAAA,WACCxB,KAAKkB,GAAGC,MAAM,QAAQM,UAAYrC,EAASsC,KAAK1B,KAAKE,MAAMG,IAAI,UAEhEsB,gBAAA,SAAgBC,GACf5B,KAAKkB,GAAGC,MAAM,SAASE,UAAYjC,EAASyC,UAAUD,IAGvDE,IAAA,aAIAxB,UAAA,WACCN,KAAKkB,GAAGC,MAAM,SAASE,UAAvB,mBAAsDlC,EAAK4C,KAAL,OAGvDC,WAAA,WACChC,KAAKkB,GAAGC,MAAM,SAASM,UAAYrC,EAAS6C,KAAKjC,KAAKE,MAAMkB,aAE7Dc,qBAAA,SAAqBC,GACpB,GAAMjB,GAAKlB,KAAKoC,cADUlB,GAEvBC,MAAM,WAAWkB,SAFMnB,EAGvBC,MAAM,cAAcmB,OAAOpD,EAAKqD,SAASnD,EAASoD,QAAQL,MAE9DC,aAAA,WACC,MAAOpC,MAAKkB,GAAGC,MAAM,eAEtBsB,UAAA,WACC,GAAMvB,GAAKlB,KAAKoC,cADLlB,GAERC,MAAM,eAAekB,SAFbnB,EAGRC,MAAM,cAAcuB,MAAMxD,EAAKqD,SAASnD,EAASuD,YAErDC,cAAA,SAAcC,GAAS,GACf3B,GAAMlB,KAANkB,EACH2B,GACH3B,EAAG4B,UAAUC,IAAI,YAEjB7B,EAAG4B,UAAUT,OAAO,WADhBnB,EAEDC,MAAM,cAAc6B","file":"posts/common.js","sourcesContent":["/*\n * Common methods to both OP and regular posts\n */\n\nconst main = require('../main'),\n\timager = require('./imager'),\n\t{_, Backbone, common, util, lang, oneeSama, options, state} = main;\n\nmodule.exports = imager.Hidamari.extend({\n\tclassName: 'glass',\n\t// One-way communication channel to the model\n\tinitialize() {\n\t\tthis.listenTo(this.model, 'dispatch', this.redirect);\n\t},\n\t// Extra initialisation logic for posts renderred client-side\n\tclientInit() {\n\t\tif (options.get('anonymise'))\n\t\t\tthis.anonymise();\n\t\treturn this;\n\t},\n\t// Proxy to the appropriate method\n\tredirect(command, ...args) {\n\t\tthis[command](...args);\n\t},\n\t// Update the post's text body\n\tupdateBody(frag) {\n\t\tif (!this.blockquote)\n\t\t\tthis.blockquote = this.el.query('blockquote');\n\n\t\t// This will rerender the HTML content on each update. Might be\n\t\t// some overhead involved, but simplifies live updates greatly.\n\t\tconst model = this.model.attributes;\n\t\tthis.blockquote.innerHTML = oneeSama.setModel(model).body(model.body);\n\t},\n\trenderTime() {\n\t\tthis.el.query('time').outerHTML = oneeSama.time(this.model.get('time'));\n\t},\n\trenderBacklinks(links) {\n\t\tthis.el.query('small').innerHTML = oneeSama.backlinks(links);\n\t},\n\t// Admin JS injections\n\tfun() {\n\t\t// Fun goes here\n\t},\n\t// Self-delusion tripfag filter\n\tanonymise() {\n\t\tthis.el.query('.name').innerHTML = `<b class=\"name\">${lang.anon}<b>`;\n\t},\n\t// Restore regular name\n\trenderName() {\n\t\tthis.el.query('.name').outerHTML = oneeSama.name(this.model.attributes);\n\t},\n\trenderModerationInfo(info) {\n\t\tconst el = this.getContainer();\n\t\tel.query('.modLog').remove();\n\t\tel.query('blockquote').before(util.parseDOM(oneeSama.modInfo(info)));\n\t},\n\tgetContainer() {\n\t\treturn this.el.query('.container');\n\t},\n\trenderBan() {\n\t\tconst el = this.getContainer();\n\t\tel.query('.banMessage').remove();\n\t\tel.query('blockquote').after(util.parseDOM(oneeSama.banned()));\n\t},\n\trenderEditing(editing) {\n\t\tconst {el} = this;\n\t\tif (editing)\n\t\t\tel.classList.add('editing');\n\t\telse {\n\t\t\tel.classList.remove('editing');\n\t\t\tel.query('blockquote').normalize();\n\t\t}\n\t}\n});\n"],"sourceRoot":"/source/"}