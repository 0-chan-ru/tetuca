{"version":3,"sources":["mod/panels.js"],"names":["System","register","_export","_context","table","rows","func","html","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","value","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","cell","err","main","_","Backbone","common","dispatcher","etc","oneeSama","lang","modals","Memory","state","PanelView","ModLogView","AdminPanelView","RequestPanelView","setters","execute","require","View","extend","className","initialize","_this","this","$el","appendTo","$overlay","type","kind","msg","render","send","info","length","el","innerHTML","renderContents","postRender","scrollTop","scrollHeight","kill","remove","MOD_LOG","act","num","postRef","op","mod","formatLog","time","exports","log","id","ADMIN_PANEL","events","click .unban","_this2","banCount","ban","mnemonic","unban","event","target","UNBAN","getAttribute","parentElement","adminPanel","click .close","click #rescan","append","removed","scan","readAll","requests","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","posts","models","attributes","m","body","match","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","request","replace","trim","push","sortBy","safe","parseDOM","rescan","removeRequest","preventDefault","write","closest","djPanel"],"mappings":"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","file":"mod/panels.js","sourcesContent":["/*\nModeration log modal view\n */\n\nconst main = require('main'),\n\t{_, Backbone, common, dispatcher, etc, oneeSama, lang, modals, Memory,\n\t\tstate} = main\n\nconst PanelView = Backbone.View.extend({\n\tclassName: 'modal mod panel glass',\n\tinitialize() {\n\t\tthis.$el.appendTo(main.$overlay);\n\t\tmodals[this.type] = this;\n\n\t\t// Register websocket handler\n\t\tdispatcher[this.kind] = msg => this.render(msg[0]);\n\t\t// Send request\n\t\tmain.send([this.kind]);\n\t},\n\trender(info) {\n\t\tif (!info.length) {\n\t\t\treturn this.el.innerHTML = \"God's in his Heaven. All's right\"\n\t\t\t\t+ \" with the world.\";\n\t\t}\n\t\tthis.el.innerHTML = this.renderContents(info);\n\t\tthis.postRender && this.postRender()\n\n\t\t// Scroll to the end of the log\n\t\tthis.el.scrollTop = this.el.scrollHeight;\n\t\treturn this;\n\t},\n\tkill() {\n\t\tdelete dispatcher[this.kind];\n\t\tdelete modals[this.type];\n\t\tthis.remove();\n\t}\n});\n\nconst ModLogView = PanelView.extend({\n\ttype: 'log',\n\tkind: common.MOD_LOG,\n\trenderContents(info) {\n\t\treturn table(info, act => [\n\t\t\t// Unbans do not have a target post\n\t\t\tact.num ? oneeSama.postRef(act.num, act.op) : '',\n\t\t\tlang.mod.formatLog(act),\n\t\t\toneeSama.time(act.time)\n\t\t]);\n\t}\n});\nexports.log = ModLogView;\n\nconst AdminPanelView = PanelView.extend({\n\ttype: 'adminPanel',\n\tid: 'adminPanel',\n\tkind: common.ADMIN_PANEL,\n\tevents: {\n\t\t'click .unban': 'unban'\n\t},\n\trenderContents(info) {\n\t\tthis.banCount = 0;\n\t\treturn table(info, ban => {\n\t\t\tthis.banCount++;\n\t\t\treturn [\n\t\t\t\toneeSama.mnemonic(ban[0]),\n\t\t\t\toneeSama.time(ban[1]),\n\t\t\t\t`<a class=\"unban\" data-id=\"${ban[0]}\">${lang.mod.unban}</a>`\n\t\t\t];\n\t\t});\n\t},\n\tunban(event) {\n\t\tconst el = event.target;\n\t\tmain.send([common.UNBAN, el.getAttribute('data-id')]);\n\t\tel.parentElement.parentElement.remove();\n\n\t\t// Check if any bans left\n\t\tif (!--this.banCount)\n\t\t\tthis.kill();\n\t}\n});\nexports.adminPanel = AdminPanelView;\n\n/**\n * Construct a table from an array of items and a consumer funtion that returns\n * an array of column contents.\n */\nfunction table(rows, func) {\n\tlet html = '<table>';\n\tfor (let row of rows) {\n\t\thtml += '<tr>';\n\t\tfor (let cell of func(row)) {\n\t\t\thtml += `<td>${cell}</td>`;\n\t\t}\n\t\thtml += '</tr>';\n\t}\n\thtml += '</table>';\n\treturn html;\n}\n\nconst RequestPanelView = PanelView.extend({\n\ttype: 'djPanel',\n\tevents: {\n\t\t'click .close': 'removeRequest',\n\t\t'click #rescan': 'scan'\n\t},\n\n\t/**\n\t * Override parent method, because we don't query the server\n\t */\n\tinitialize() {\n\t\tmain.$overlay[0].append(this.el)\n\t\tmodals[this.type] = this;\n\t\tthis.removed = new Memory('request', 2)\n\t    this.scan()\n\t},\n\n\t/**\n\t * Scan thread for `/r/ song` strings, we have not removed yet\n\t */\n\tscan() {\n\t    const removed = this.removed.readAll(),\n\t\t\trequests = []\n\t\tfor (let {attributes} of state.posts.models) {\n\t\t\t// Post's request(s) already processed\n\t\t\tif (attributes.num in removed)\n\t\t\t\tcontinue\n\t\t    const m = attributes.body.match(/\\/r\\/[^\\n]+$/gm)\n\t\t\tif (!m)\n\t\t\t    continue\n\t\t\tfor (let request of m) {\n\t\t\t    request = request.replace('/r/', '').trim()\n\t\t\t\trequests.push([attributes.num, attributes.mnemonic, request])\n\t\t\t}\n\t\t}\n\t\treturn this.render(_.sortBy(requests, 1))\n\t},\n\n\t/**\n\t * Render the inner table\n\t */\n\trenderContents(requests) {\n\t\treturn table(requests, request => [\n\t\t\toneeSama.postRef(request[0], oneeSama.op).safe,\n\t\t\toneeSama.mnemonic(request[1]),\n\t\t\trequest[2],\n\t\t\t`<a class=\"close\" data-id=\"${request[0]}\">X</a>`\n\t\t])\n\t},\n\n\t/**\n\t * Extra rendering operations to perform that deviate from parent class\n\t */\n\tpostRender() {\n\t    this.el.append(etc.parseDOM(`<a id=\"rescan\">${lang.rescan}</a>`)[0])\n\t},\n\n\t/**\n\t * Remove a request from the list and persist removal to localStorage\n\t */\n\tremoveRequest(event) {\n\t\tevent.preventDefault()\n\t\tconst el = event.target\n\t\tthis.removed.write(el.getAttribute('data-id'))\n\t\tel.closest('tr').remove()\n\t}\n})\nexports.djPanel = RequestPanelView\n"],"sourceRoot":"/source/"}