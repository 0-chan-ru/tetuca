{"version":3,"sources":["mod/toolbox.js"],"names":["System","register","_export","_context","_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_taggedTemplateLiteral","strings","raw","Object","freeze","defineProperties","value","_templateObject","_templateObject2","_templateObject3","main","input","panels","util","$","_","Backbone","common","lang","modals","parseHTML","childViews","ToolboxView","setters","execute","require","ban","log","adminPanel","notification","djPanel","View","extend","id","className","initialize","this","render","specs","ident","auth","accessLevels","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","level","checkAuth","forEach","right","push","err","controls","ln","mod","$controls","$checkboxToggle","appendTo","prop","$toggle","show","$el","prepend","$overlay","$mnemonicStyle","localStorage","noMnemonics","events","click #toolboxToggle","click .modButton","toggleButtons","hidden","model","get","text","toggle","set","buttonHandler","event","target","getAttribute","clearSelection","loopCheckboxes","el","checked","toggleMnemonics","hide","send","type","concat","getSelected","spoilerImages","deleteImages","toggleChild","kill","sendNotification","modLog","renderPanel","deletePosts","lockThreads","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","num","state","posts","$toolbox","Model"],"mappings":"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","file":"mod/toolbox.js","sourcesContent":["/*\nView containing controls of moderation actions\n */\n\nconst main = require('main'),\n\tinput = require('./input'),\n\tpanels = require('./panels'),\n\tutil = require('./util'),\n\t{$, _, Backbone, common, lang, modals} = main,\n\t{parseHTML} = common;\n\nconst childViews = {\n\tban: input.ban,\n\tlog: require('./panels').log,\n\tadminPanel: panels.adminPanel,\n\tnotification: input.notification,\n\tdjPanel: panels.djPanel\n};\n\nconst ToolboxView = Backbone.View.extend({\n\tid: 'toolbox',\n\tclassName: 'mod modal panel glass',\n\tinitialize() {\n\t\tthis.render();\n\t},\n\trender() {\n\t\tlet specs = this.specs = [\n\t\t\t'clearSelection',\n\t\t\t'spoilerImages',\n\t\t\t'deleteImages',\n\t\t\t'deletePosts',\n\t\t\t'modLog'\n\t\t];\n\n\t\t// Add aditional panel buttons by priveledge level\n\t\tif (main.ident.auth === 'dj')\n\t\t\tspecs = this.specs = ['djPanel']\n\t\tconst accessLevels = [\n\t\t\t['dj', ['toggleMnemonics']],\n\t\t\t['moderator', ['lockThreads', 'ban']],\n\t\t\t['admin', ['sendNotification', 'renderPanel']]\n\t\t]\n\t\tfor (let level of accessLevels) {\n\t\t\tif (!common.checkAuth(level[0], main.ident))\n\t\t\t\tbreak\n\t\t\tlevel[1].forEach(right => specs.push(right))\n\t\t}\n\n\t\tlet controls = '<span>';\n\t\tfor (let i = 0; i < specs.length; i++) {\n\t\t\tconst ln = lang.mod[specs[i]];\n\t\t\tcontrols += parseHTML\n\t\t\t\t`<a class=\"modButton\" data-kind=\"${i}\" title=\"${ln[1]}\">\n\t\t\t\t\t${ln[0]}\n\t\t\t\t</a>`;\n\t\t}\n\t\tcontrols += '</span>';\n\t\tthis.$controls = $(controls);\n\n\t\tthis.$checkboxToggle = $(parseHTML\n\t\t\t\t`<style>\n\t\t\t\t.postCheckbox {\n\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t}\n\t\t\t</style>`\n\t\t)\n\t\t\t.appendTo('head')\n\t\t\t// Disabled only works if the emelemnt is in the DOM\n\t\t\t.prop('disabled', true);\n\n\t\tthis.$toggle = $(`<a id=\"toolboxToggle\">${lang.show}</a>`);\n\t\tthis.$el.prepend(this.$controls, this.$toggle)\n\t\t\t.appendTo(main.$overlay);\n\n\t\t// Sets mnemonic visbility\n\t\tthis.$mnemonicStyle = $(parseHTML\n\t\t\t\t`<style>\n\t\t\t\theader > .mod.addr {\n\t\t\t\t\tdisplay: none;\n\t\t\t\t}\n\t\t\t</style>`\n\t\t)\n\t\t\t.appendTo('head')\n\t\t\t.prop('disabled', localStorage.noMnemonics !== 'true');\n\t\treturn this;\n\t},\n\tevents: {\n\t\t'click #toolboxToggle': 'toggleButtons',\n\t\t'click .modButton': 'buttonHandler'\n\t},\n\ttoggleButtons() {\n\t\tconst hidden = !this.model.get('shown');\n\t\tthis.$toggle.text(lang[hidden ? 'hide' : 'show']);\n\t\tthis.$controls.toggle(0);\n\t\tthis.$checkboxToggle.prop('disabled', !hidden);\n\t\tthis.model.set('shown', hidden);\n\t},\n\tbuttonHandler(event) {\n\t\tthis[this.specs[event.target.getAttribute('data-kind')]](event);\n\t},\n\tclearSelection() {\n\t\tutil.loopCheckboxes(el => el.checked = false);\n\t},\n\ttoggleMnemonics() {\n\t\tconst hide = localStorage.noMnemonics === 'true';\n\t\tthis.$mnemonicStyle.prop('disabled', hide);\n\t\tlocalStorage.noMnemonics = !hide;\n\t},\n\tsend(type) {\n\t\tmain.send([common[type], ...util.getSelected()]);\n\t},\n\tspoilerImages() {\n\t\tthis.send('SPOILER_IMAGES');\n\t},\n\tdeleteImages() {\n\t\tthis.send('DELETE_IMAGES');\n\t},\n\ttoggleChild(type) {\n\t\tif(modals[type])\n\t\t\tmodals[type].kill();\n\t\telse\n\t\t\tnew childViews[type];\n\t},\n\t// Push a notification message to all clients\n\tsendNotification() {\n\t\tthis.toggleChild('notification');\n\t},\n\tmodLog() {\n\t\tthis.toggleChild('log');\n\t},\n\tdjPanel() {\n\t    this.toggleChild('djPanel')\n\t},\n\tban() {\n\t\tthis.toggleChild('ban');\n\t},\n\trenderPanel() {\n\t\tthis.toggleChild('adminPanel');\n\t},\n\tdeletePosts() {\n\t\tthis.send('DELETE_POSTS');\n\t},\n\tlockThreads() {\n\t\tfor (let num of util.getSelected()) {\n\t\t\tconst model = main.state.posts.get(num);\n\t\t\t// Model exists and is an OP\n\t\t\tif (!model || model.get('op'))\n\t\t\t\tcontinue;\n\t\t\tmain.send([\n\t\t\t\tcommon[!model.get('locked') ? 'LOCK_THREAD' : 'UNLOCK_THREAD'],\n\t\t\t\tnum\n\t\t\t]);\n\t\t}\n\t}\n});\n\nmain.$toolbox = new ToolboxView({\n\tmodel: new Backbone.Model()\n});\n"],"sourceRoot":"/source/"}