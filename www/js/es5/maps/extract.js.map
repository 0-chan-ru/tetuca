{"version":3,"sources":["extract.js"],"names":["System","register","_export","_context","_classCallCheck","instance","Constructor","TypeError","_createClass","main","_","util","options","state","posts","Extract","setters","execute","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","require","catalog","this","el","$threads","json","JSON","parse","document","getElementById","innerHTML","request","title","mine","readAll","extractReplies","extractThreads","addLinks","links","post","num","get","value","articles","getElementsByTagName","l","article","Article","model","models","Post","extractModel","sections","section","Section","Thread","renderOmit","syncs","hctr","info","getNum","module","exports","page"],"mappings":"AAAA,YAAaA,QAAOC,YAAY,SAASC,EAAQC,GAAmE,QAASC,GAAgBC,EAASC,GAAa,KAAKD,YAAoBC,IAAc,KAAM,IAAIC,WAAU,qCAAnK,GAAIC,GAAaC,EAAKC,EAAEC,EAAKC,EAAQC,EAAMC,EAAMC,CAAyJ,QAAQC,WAAWC,QAAQ,WAAWT,EAAa,WAAW,QAASU,GAAiBC,EAAOC,GAAO,IAAI,GAAIC,GAAE,EAAEA,EAAED,EAAME,OAAOD,IAAI,CAAC,GAAIE,GAAWH,EAAMC,EAAGE,GAAWC,WAAWD,EAAWC,aAAY,EAAMD,EAAWE,cAAa,EAAQ,SAAWF,KAAWA,EAAWG,UAAS,GAAKC,OAAOC,eAAeT,EAAOI,EAAWM,IAAIN,IAAc,MAAO,UAASjB,EAAYwB,EAAWC,GAAuI,MAAvHD,IAAWZ,EAAiBZ,EAAY0B,UAAUF,GAAeC,GAAYb,EAAiBZ,EAAYyB,GAAoBzB,MAI9wBG,EAAOwB,QAAQ,UACnBvB,EAAkCD,EAAlCC,EAAGC,EAA+BF,EAA/BE,KAAMC,EAAyBH,EAAzBG,QAASC,EAAgBJ,EAAhBI,MAAOC,EAASL,EAATK,MAErBC,EAAA,WACL,QADKA,GACOmB,GAAS9B,EAAA+B,KADhBpB,EACgB,IACdqB,GAAK3B,EAAK4B,SAAS,GAGnBC,EAAOC,KAAKC,MAAMC,SAASC,eAAe,YAAYC,UAJxC,IAAAlC,EAKfmC,QAAQ,eAAgBN,EAAKO,QAG9BX,EARgB,CAQpB,GAGMY,GAAOX,KAAKW,KAAOjC,EAAMiC,KAAKC,UACnCjC,EAAQqB,KAAKrB,MAAQwB,EAAKxB,KAZPqB,MAafa,eAAeZ,GAbAD,KAcfc,eAAeb,GAdAvB,EAgBdqC,SAASZ,EAAKa,MAhBA,KAkBf,GAAIC,KAAQtC,GAAO,CACvB,GAAMqC,GAAQrC,EAAMsC,GAAMD,KADH,IAElBA,EAAL,IAEK,GAAIE,KAAOF,GACXE,IAAOP,IACVrC,EAAKmC,QAAQ,cAAe9B,EAAMsC,GAAMC,KAKvCzC,EAAQ0C,IAAI,cACf7C,EAAKmC,QAAQ,kBADdnC,EAEKmC,QAAQ,gBA2BG,MA1DjBpC,GADKO,IAAAc,IAAA,iBAAA0B,MAAA,SAkCUnB,GAAI,IAEb,GADDoB,GAAWpB,EAAGqB,qBAAqB,WAC9BpC,EAAI,EAAGqC,EAAIF,EAASlC,OAAYoC,EAAJrC,EAAOA,IAAK,CAChD,GAAIsC,GAAUH,EAASnC,EADyB,IAE5CP,GAAM8C,SACTC,MAAO,GAAI/C,GAAMgD,OAAOC,KAAK5B,KAAK6B,aAAaL,IAC/CvB,GAAIuB,QAJN9B,IAAA,iBAAA0B,MAAA,SAQcnB,GAAI,IAEb,GADD6B,GAAW7B,EAAGqB,qBAAqB,WAC9BpC,EAAI,EAAGA,EAAI4C,EAAS3C,OAASD,IAAK,CAC1C,GAAI6C,GAAUD,EAAS5C,GACjBwC,EAAQ1B,KAAK6B,aAAaE,EAFU,IAGtCpD,GAAMqD,SACTN,MAAO,GAAI/C,GAAMgD,OAAOM,OAAOP,GAC/BzB,GAAI8B,IAEFG,aAPuCxD,EAUpCyD,MAAMT,EAAMR,KAAOQ,EAAMU,SAVhC1C,IAAA,eAAA0B,MAAA,SAaYnB,GACZ,GAAIoC,GAAOrC,KAAKrB,MAAMH,EAAK8D,OAAOrC,GAElC,OAAIoC,GAAKnB,MAAOlB,MAAKW,OACpB0B,EAAK1B,MAAO,GACN0B,MAhEHzD,KAmEN2D,OAAOC,QAAU5D,EAGjB,GAAIA,GAAQF,EAAM+D,KAAKtB,IAAI","file":"extract.js","sourcesContent":["/*\n * Extact model data from the thread tree HTML and populate models and views\n */\n\nconst main = require('./main'),\n\t{_, util, options, state, posts} = main;\n\nclass Extract {\n\tconstructor(catalog) {\n\t\tconst el = main.$threads[0];\n\n\t\t// Read serialised model data\n\t\tconst json = JSON.parse(document.getElementById('postData').innerHTML);\n\t\tmain.request('notify:title', json.title);\n\n\t\t// We don't need models on catalog pages\n\t\tif (catalog)\n\t\t\treturn;\n\n\t\tconst mine = this.mine = state.mine.readAll(),\n\t\t\tposts = this.posts = json.posts;\n\t\tthis.extractReplies(el);\n\t\tthis.extractThreads(el);\n\n\t\tstate.addLinks(json.links);\n\t\t// Forward posts that replied to my post\n\t\tfor (let post in posts) {\n\t\t\tconst links = posts[post].links;\n\t\t\tif (!links)\n\t\t\t\tcontinue;\n\t\t\tfor (let num in links) {\n\t\t\t\tif (num in mine)\n\t\t\t\t\tmain.request('repliedToMe', posts[post].num);\n\t\t\t}\n\t\t}\n\n\t\t// Apply various client-only DOM modifications\n\t\tif (options.get('anonymise'))\n\t\t\tmain.request('loop:anonymise');\n\t\tmain.request('time:render');\n\t}\n\textractReplies(el) {\n\t\tlet articles = el.getElementsByTagName('article');\n\t\tfor (let i = 0, l = articles.length; i < l; i++) {\n\t\t\tlet article = articles[i];\n\t\t\tnew posts.Article({\n\t\t\t\tmodel: new posts.models.Post(this.extractModel(article)),\n\t\t\t\tel: article\n\t\t\t});\n\t\t}\n\t}\n\textractThreads(el) {\n\t\tlet sections = el.getElementsByTagName('section');\n\t\tfor (let i = 0; i < sections.length ; i++) {\n\t\t\tlet section = sections[i];\n\t\t\tconst model = this.extractModel(section);\n\t\t\tnew posts.Section({\n\t\t\t\tmodel: new posts.models.Thread(model),\n\t\t\t\tel: section\n\t\t\t})\n\t\t\t\t .renderOmit();\n\t\t\t// Read the sync ID of the thread. Used later for syncronising\n\t\t\t// with the server.\n\t\t\tstate.syncs[model.num] = model.hctr;\n\t\t}\n\t}\n\textractModel(el) {\n\t\tlet info = this.posts[util.getNum(el)];\n\t\t// Did I make this post?\n\t\tif (info.num in this.mine)\n\t\t\tinfo.mine = true;\n\t\treturn info;\n\t}\n}\nmodule.exports = Extract;\n\n// Initial extraction. No need to defer, as we actually want it to hit ASAP.\nnew Extract(state.page.get('catalog'));\n"],"sourceRoot":"/source/"}