{"version":3,"sources":["common.js"],"names":["System","register","_export","_context","_classCallCheck","instance","Constructor","TypeError","_createClass","message","WeakSetMap","setters","execute","fetchJSON","url","fetch","then","res","json","randomID","len","id","i","char","Math","random","toString","toUpperCase","defineProperties","target","props","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","disconnect","this","map","Map","value","item","has","set","WeakSet","get","add","size","fn","forEach"],"mappings":"AAAA,YAAaA,QAAOC,YAAY,SAASC,EAAQC,GAA8C,QAASC,GAAgBC,EAASC,GAAa,KAAKD,YAAoBC,IAAc,KAAM,IAAIC,WAAU,qCAA9I,GAAIC,GAAaC,EAAQC,CAA4J,QAAQC,WAAWC,QAAQ,WAWpQ,QAASC,GAAUC,GACzB,MAAOC,OAAM,OAASD,GAAKE,KAAK,SAAAC,GAAA,MAAOA,GAAIC,SAKrC,QAASC,GAASC,GAAK,IAExB,GADDC,GAAK,GACAC,EAAI,EAAOF,EAAJE,EAASA,IAAK,CAC7B,GAAIC,IAAwB,GAAhBC,KAAKC,UAAeC,SAAS,IAAI,EACzCF,MAAKC,SAAW,KACnBF,EAAOA,EAAKI,eADbN,GAGME,EALP,MAOOF,GA1B8Qb,EAAa,WAAW,QAASoB,GAAiBC,EAAOC,GAAO,IAAI,GAAIR,GAAE,EAAEA,EAAEQ,EAAMC,OAAOT,IAAI,CAAC,GAAIU,GAAWF,EAAMR,EAAGU,GAAWC,WAAWD,EAAWC,aAAY,EAAMD,EAAWE,cAAa,EAAQ,SAAWF,KAAWA,EAAWG,UAAS,GAAKC,OAAOC,eAAeR,EAAOG,EAAWM,IAAIN,IAAc,MAAO,UAAS1B,EAAYiC,EAAWC,GAAuI,MAAvHD,IAAWX,EAAiBtB,EAAYmC,UAAUF,GAAeC,GAAYZ,EAAiBtB,EAAYkC,GAAoBlC,MAAkBJ,EAAQ,UAM5wBO,GACZiC,WAAY,IAAZxC,EAAA,UAAAO,GAIMP,EAAA,YAAAW,GAMAX,EAAA,WAAAiB,GAAAjB,EAAA,aAaMQ,EAAA,WACZ,QADYA,KACEN,EAAAuC,KADFjC,GACEiC,KACRC,IAAM,GAAIC,KAwBC,MAzBjBrC,GADYE,IAAA4B,IAAA,MAAAQ,MAAA,SAMRR,EAAKS,GACHJ,KAAKC,IAAII,IAAIV,IACjBK,KAAKC,IAAIK,IAAIX,EAAK,GAAIY,UADvBP,KAGKC,IAAIO,IAAIb,GAAKc,IAAIL,MAJRT,IAAA,SAAAQ,MAAA,SAQRR,EAAKS,GACX,GAAME,GAAMN,KAAKC,IAAIO,IAAIb,EACpBW,KAALA,EAAAA,UAGWF,GACM,IAAbE,EAAII,MACPV,KAAKC,IAALD,UAAgBL,OADjBA,IAAA,UAAAQ,MAAA,SAMOR,EAAKgB,GACZ,GAAML,GAAMN,KAAKC,IAAIO,IAAIb,EACpBW,IAALA,EAGIM,QAAQD,OA/BD5C,MAAAR,EAAA,aAAAQ","file":"common.js","sourcesContent":["/*\n Utuility functions used both by the client and worker\n*/\n\n// Tokenization map of message types for browser tab <-> serviceWorker\n// communication\nexport const message = {\n\tdisconnect: 0\n}\n\n// Fetches a JSON response from the API and returns a Promise\nexport function fetchJSON(url) {\n\treturn fetch(\"api/\" + url).then(res => res.json())\n}\n\n// Generate a random alphannumeric string of lower and upper case hexadecimal\n// characters\nexport function randomID(len) {\n\tlet id = ''\n\tfor (let i = 0; i < len; i++) {\n\t\tlet char = (Math.random() * 36).toString(36)[0]\n\t\tif (Math.random() < 0.5) {\n\t\t\tchar = char.toUpperCase()\n\t\t}\n\t\tid += char\n\t}\n\treturn id\n}\n\n// Simple map of sets with automatic array creation and removal\nexport class WeakSetMap {\n\tconstructor() {\n\t\tthis.map = new Map()\n\t}\n\n\t// Add item to key\n\tadd(key, item) {\n\t\tif (!this.map.has(key)) {\n\t\t\tthis.map.set(key, new WeakSet())\n\t\t}\n\t\tthis.map.get(key).add(item)\n\t}\n\n\t// Remove and item from a key\n\tremove(key, item) {\n\t\tconst set = this.map.get(key)\n\t\tif (!set) {\n\t\t\treturn\n\t\t}\n\t\tset.delete(item)\n\t\tif (set.size === 0) {\n\t\t\tthis.map.delete(key)\n\t\t}\n\t}\n\n\t// Execute a function for each item under a key\n\tforEach(key, fn) {\n\t\tconst set = this.map.get(key)\n\t\tif (!set) {\n\t\t\treturn\n\t\t}\n\t\tset.forEach(fn)\n\t}\n}\n"],"sourceRoot":"/source/"}