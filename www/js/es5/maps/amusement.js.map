{"version":3,"sources":["amusement.js"],"names":["System","register","_export","_context","_slicedToArray","main","$","common","state","oneeSama","setters","execute","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","value","length","err","Array","isArray","Object","TypeError","require","hook","imouto","queueRoll","bit","number","this","allRolls","sent","info","$tag","callback","strong","dice","readable_dice","seen","_ref","postForm","request","rolls","lim","n","r","html","dispatcher","EXECUTE_JS","_ref2","_ref3","js","eval","e","console","error"],"mappings":"AAAA,YAAaA,QAAOC,YAAY,SAASC,QAAQC,UAAU,GAAIC,gBAAeC,KAAKC,EAAEC,OAAOC,MAAMC,QAAS,QAAQC,WAAWC,QAAQ,WAAWP,eAAe,WAAW,QAASQ,GAAcC,EAAIC,GAAG,GAAIC,MAAYC,GAAG,EAASC,GAAG,EAAUC,EAAGC,MAAU,KAAI,IAAI,GAA8BC,GAA1BC,EAAGR,EAAIS,OAAOC,cAAiBP,GAAII,EAAGC,EAAGG,QAAQC,QAAeV,EAAKW,KAAKN,EAAGO,QAAUb,GAAGC,EAAKa,SAASd,GAAjDE,GAAG,IAAwD,MAAMa,GAAKZ,GAAG,EAAKC,EAAGW,EAAK,QAAS,KAAQb,GAAIK,EAAG,WAAUA,EAAG,YAAa,QAAS,GAAGJ,EAAG,KAAMC,IAAK,MAAOH,GAAM,MAAO,UAASF,EAAIC,GAAG,GAAGgB,MAAMC,QAAQlB,GAAM,MAAOA,EAAU,IAAGS,OAAOC,WAAYS,QAAOnB,GAAM,MAAOD,GAAcC,EAAIC,EAAU,MAAM,IAAImB,WAAU,4DAIpoB5B,KAAO6B,QAAQ,UACnB5B,EAA8BD,KAA9BC,EAAGC,OAA2BF,KAA3BE,OAAQC,MAAmBH,KAAnBG,MAAOC,SAAYJ,KAAZI,SAGpBA,SAAS0B,KAAK,SAAU,SAAUC,GACjCA,EAAOC,UAAY,SAAUC,GAC5B,GAAMC,GAASC,KAAKC,SAASC,OACzBC,EAAOH,KAAKC,SAASF,EACpBI,KACJA,EAAOH,KAAKC,SAASF,OADtBI,EAEKL,IAAMA,EALsBK,EAM5BC,KAAOtC,EAAEkC,KAAKK,SAAS,aANKL,KAO5BM,QAAS,EAPmBN,KAQ5BK,SAASF,EAAKI,KAAOxC,OAAOyC,cAAcV,EAAKK,EAAKI,MAAQT,GARhCE,KAS5BM,QAAS,EATmBN,KAU5BK,SAAS,cAX0BT,EAalCK,UAAYC,KAAM,EAAGO,KAAM,KAInCxC,SAAS0B,KAAK,gBAAiB,SAAAe,GAAY,GAAVH,GAAAG,EAAAH,KAC5BI,EAAW9C,KAAK+C,QAAQ,WADc,IAErCD,GAAaA,EAASf,QAAWW,EAFI,IAKrC,GADDM,GAAQF,EAASf,OAAOK,SACnB3B,EAAI,EAAGwC,EAAMP,EAAKnB,OAAY0B,EAAJxC,EAASA,IAAK,CAChD,GAAMyC,GAAIF,EAAMJ,OACZN,EAAOU,EAAME,EAF+B,IAG3CZ,IACJA,EAAOU,EAAME,OADdZ,EAEKI,KAAOA,EAAKjC,GACb6B,EAAKC,KAAM,CACd,GAAMY,GAAIjD,OAAOyC,cAAcL,EAAKL,IAAKK,EAAKI,KADhCJ,GAETC,KAAKa,KAAKD,OAMlBnD,KAAKqD,WAAWnD,OAAOoD,YAAc,SAAAC,OAAU,GAAAC,OAAAzD,eAAAwD,MAAA,GAARE,GAAAD,MAAA,EAAQ,KAE7CE,KAAKD,IADN,MAGOE,GACNC,QAAQC,MAAMF","file":"amusement.js","sourcesContent":["/*\n * Dice rolls and fun JS injections\n */\n\nconst main = require('./main'),\n\t{$, common, state, oneeSama} = main;\n\n// Render dice rolls and other hash commands\noneeSama.hook('imouto', function (imouto) {\n\timouto.queueRoll = function (bit) {\n\t\tconst number = this.allRolls.sent++;\n\t\tlet info = this.allRolls[number];\n\t\tif (!info)\n\t\t\tinfo = this.allRolls[number] = {};\n\t\tinfo.bit = bit;\n\t\tinfo.$tag = $(this.callback('<strong>'));\n\t\tthis.strong = true;\n\t\tthis.callback(info.dice ? common.readable_dice(bit, info.dice) : bit);\n\t\tthis.strong = false;\n\t\tthis.callback('</strong>');\n\t};\n\timouto.allRolls = {sent: 0, seen: 0};\n});\n\n// Handle dice in the postForm\noneeSama.hook('insertOwnPost', ({dice}) => {\n\tlet postForm = main.request('postForm');\n\tif (!postForm || !postForm.imouto || !dice)\n\t\treturn;\n\tlet rolls = postForm.imouto.allRolls;\n\tfor (let i = 0, lim = dice.length; i < lim; i++) {\n\t\tconst n = rolls.seen++;\n\t\tlet info = rolls[n];\n\t\tif (!info)\n\t\t\tinfo = rolls[n] = {};\n\t\tinfo.dice = dice[i];\n\t\tif (info.$tag) {\n\t\t\tconst r = common.readable_dice(info.bit, info.dice);\n\t\t\tinfo.$tag.html(r);\n\t\t}\n\t}\n});\n\n// Execute server-sent JS in fun threads\nmain.dispatcher[common.EXECUTE_JS] = ([js]) => {\n\ttry {\n\t\teval(js);\n\t}\n\tcatch (e) {\n\t\tconsole.error(e);\n\t}\n};\n"],"sourceRoot":"/source/"}