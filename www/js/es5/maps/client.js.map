{"version":3,"sources":["client.js"],"names":["System","register","_export","_context","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","checkRepliedToMe","links","sourceNum","mine","state","readAll","num","main","request","modelHandler","func","model","posts","get","_$extend","_slicedToArray","_","common","dispatcher","util","online","setters","execute","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","length","err","Array","isArray","TypeError","require","document","query","extend","INSERT_POST","message","_message","msg","bump","page","isThread","op","syncs","editing","el","nonce","myNonce","tab","ownPosts","oneeSama","trigger","postSM","feed","postForm","write","addLinks","models","view","id","render","insertIntoDOM","clientInit","parent","dispatch","INSERT_IMAGE","_msg","img","postModel","toPostForm","insertUploaded","setImage","UPDATE_POST","_ref","_ref2","frag","_ref2$","extra","update","FINISH_POST","_msg2","set","DELETE_POSTS","deletePost","LOCK_THREAD","toggleLocked","UNLOCK_THREAD","DELETE_IMAGES","removeImage","SPOILER_IMAGES","setSpoiler","BAN","_msg3","info","JSON","parse","setBan","BACKLINK","addBacklink","ONLINE_COUNT","textContent","HOT_INJECTION","_msg4","force","hash","hotConfig","configHash","send","SYNCHRONIZE","connSM","feeder","INVALID","listener","event","spoilt","target","classList","toggle"],"mappings":"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","file":"client.js","sourcesContent":["/*\n * Handles the brunt of the post-related websocket calls\n */\n\nconst main = require('./main'),\n\t{_, common, dispatcher, util, posts, state} = main;\n\nconst online = document.query('#onlineCount');\n\n_.extend(dispatcher, {\n\t[common.INSERT_POST](message) {\n\t\tlet [msg, bump] = message;\n\t\tbump = bump && state.page.get('live');\n\t\tconst isThread = !msg.op,\n\t\t\t{num} = msg;\n\t\tif (isThread)\n\t\t\tstate.syncs[num] = 1;\n\t\tmsg.editing = true;\n\n\t\t// Did I create this post?\n\t\tlet el;\n\t\tconst {nonce} = msg;\n\t\tdelete msg.nonce;\n\t\tconst myNonce = main.request('nonce:get')[nonce];\n\t\tif (myNonce && myNonce.tab === state.page.get('tabID')) {\n\t\t\t// posted in this tab; transform placeholder\n\t\t\tstate.ownPosts[num] = true;\n\t\t\tmain.oneeSama.trigger('insertOwnPost', msg);\n\t\t\tmain.postSM.feed('alloc', msg);\n\t\t\tbump = false;\n\t\t\tmain.request('nonce:destroy', nonce);\n\n\t\t\t// if we've already made a placeholder for this post, use it\n\t\t\tconst postForm = main.request('postForm');\n\t\t\tif (postForm && postForm.el)\n\t\t\t\tel = postForm.el;\n\t\t}\n\n\t\t// Add to my post set. Separate `if`, so posts form other tabs also\n\t\t// register.\n\t\tif (myNonce) {\n\t\t\tmsg.mine = true;\n\t\t\tstate.mine.write(num);\n\t\t}\n\t\tstate.addLinks(msg.links);\n\n\t\t// Create model\n\t\tconst model = new posts.models[isThread ? 'Thread' : 'Post'](msg);\n\t\tconst view = new posts[isThread ? 'Section' : 'Article']({model, el,\n\t\t\tid: num});\n\t\tif (!el)\n\t\t\tview.render().insertIntoDOM();\n\t\tview.clientInit();\n\n\t\tcheckRepliedToMe(msg.links, num);\n\t\tmain.request('post:inserted', model);\n\n\t\tif (isThread)\n\t\t\treturn;\n\t\tconst parent = state.posts.get(msg.op);\n\t\tif (!parent)\n\t\t\treturn;\n\t\tparent.get('replies').push(num);\n\t\tif (state.page.get('thread'))\n\t\t\treturn;\n\t\tparent.dispatch('shiftReplies');\n\n\t\t// Bump thread to page top\n\t\tif (bump)\n\t\t\tparent.dispatch('bumpThread');\n\t},\n\t[common.INSERT_IMAGE](msg) {\n\t\tconst [num, img] = msg;\n\n\t\t// Did I just upload this?\n\t\tconst postModel = main.request('postModel'),\n\t\t\ttoPostForm = postModel && postModel.get('num') == num;\n\t\tif (toPostForm)\n\t\t\tmain.request('postForm').insertUploaded(img);\n\n\t\t// If the image gets inseted into the postForm, we don't need the\n\t\t// generic model to fire a separate image render\n\t\tmodelHandler(num, model => model.setImage(img, toPostForm));\n\t},\n\t[common.UPDATE_POST]([num, frag, extra = {}]) {\n\t\tmodelHandler(num, model => {\n\t\t\tstate.addLinks(extra.links);\n\t\t\tmodel.update(frag, extra);\n\t\t\tcheckRepliedToMe(extra.links, num);\n\n\t\t\t// Am I updating my own post?\n\t\t\tif (num in state.ownPosts)\n\t\t\t\tmain.oneeSama.trigger('insertOwnPost', extra);\n\t\t\telse\n\t\t\t\tmodel.dispatch('updateBody', frag);\n\t\t});\n\t},\n\t[common.FINISH_POST](msg) {\n\t\tconst [num] = msg;\n\t\tdelete state.ownPosts[num];\n\t\tmodelHandler(num, function (model) {\n\t\t\t// No change event listener to avoid extra overhead\n\t\t\tmodel.set('editing', false);\n\t\t\tmodel.dispatch('renderEditing', false);\n\t\t});\n\t},\n\t[common.DELETE_POSTS](msg) {\n\t\tmodelHandler(msg[0], model => model.deletePost(msg[1]));\n\t},\n\t[common.LOCK_THREAD](msg) {\n\t\tmodelHandler(msg[0], model => model.toggleLocked(true, msg[1]));\n\t},\n\t[common.UNLOCK_THREAD](msg) {\n\t\tmodelHandler(msg[0], model => model.toggleLocked(false, msg[1]));\n\t},\n\t[common.DELETE_IMAGES](msg) {\n\t\tmodelHandler(msg[0], model => model.removeImage(msg[1]));\n\t},\n\t[common.SPOILER_IMAGES](msg) {\n\t\tmodelHandler(msg[0], model => model.setSpoiler(msg[1], msg[2]));\n\t},\n\t[common.BAN](msg) {\n\t\t// Only a 0 is passed to unauthenticated clients, if the ban was not\n\t\t// set to be displayed publicly. Otherwise a post number. A side\n\t\t// effect of complying to the existing pub/sub spec. Authenticated\n\t\t// staff receive either a post number or 0 and detailed ban information.\n\t\tlet [num, info] = msg;\n\t\tif (!num) {\n\t\t\tif (!info)\n\t\t\t\treturn;\n\t\t\tinfo = JSON.parse(info);\n\t\t\tnum = info.num;\n\t\t}\n\t\tmodelHandler(num, model => model.setBan(num, info));\n\t},\n\t[common.BACKLINK](msg) {\n\t\tmodelHandler(msg[0], model => model.addBacklink(msg[1], msg[2]));\n\t},\n\t[common.ONLINE_COUNT](msg) {\n\t\tonline.textContent = '['+msg[0]+']';\n\t},\n\t// Sync settings with server\n\t[common.HOT_INJECTION](msg) {\n\t\tconst [force, hash, hotConfig] = msg;\n\n\t\t// Request new varibles, if hashes don't match\n\t\tif (!force && hash !== state.configHash)\n\t\t\tmain.send([common.HOT_INJECTION, true]);\n\t\t// Update variables and hash\n\t\telse if (force) {\n\t\t\tstate.configHash = hash;\n\t\t\tstate.hotConfig.set(hotConfig);\n\t\t}\n\t}\n});\n\ndispatcher[common.SYNCHRONIZE] = main.connSM.feeder('sync');\ndispatcher[common.INVALID] = main.connSM.feeder('invalid');\n\n// Check if new posts links to one of my posts\nfunction checkRepliedToMe(links, sourceNum) {\n\tif (!links)\n\t\treturn;\n\tconst mine = state.mine.readAll();\n\tfor (let num in links) {\n\t\tif (num in mine)\n\t\t\tmain.request('repliedToMe', sourceNum);\n\t}\n}\n\n// Find model and pass it to function, if it exists\nfunction modelHandler(num, func) {\n\tconst model = state.posts.get(num);\n\tif (model)\n\t\tfunc(model);\n}\n\n// Make the text spoilers toggle revealing on click\nutil.listener(document, 'click', 'del', function (event) {\n\tif (event.spoilt)\n\t\treturn;\n\tevent.spoilt = true;\n\tevent.target.classList.toggle('reveal');\n});\n"],"sourceRoot":"/source/"}