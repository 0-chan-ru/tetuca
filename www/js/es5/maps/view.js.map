{"version":3,"sources":["view.js"],"names":["System","register","_export","_context","_classCallCheck","instance","Constructor","TypeError","Model","extend","_createClass","View","setters","_model","_underscore","execute","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","args","this","model","attach","el","document","createElement","tag","_arr","_i","setAttribute","value","remove","detach","type","selector","fn","addEventListener","event","matches","events","on","_this","removeEventListener","_this2"],"mappings":"AAAA,YAAaA,QAAOC,UAAU,UAAU,cAAc,SAASC,EAAQC,GAA6C,QAASC,GAAgBC,EAASC,GAAa,KAAKD,YAAoBC,IAAc,KAAM,IAAIC,WAAU,qCAA7I,GAAIC,GAAMC,EAAOC,EAAaC,CAAsJ,QAAQC,SAAS,SAASC,GAAxRL,EAAAK,EAAAA,YAAA,SAAAC,GACCL,EAAAK,EAAAL,SAAAM,QAAA,WAAAL,EAAA,WAAA,QAAAM,GAAAC,EAAAC,GAAA,IAAA,GAAAC,GAAA,EAAAA,EAAAD,EAAAE,OAAAD,IAAA,CAAA,GAAAE,GAAAH,EAAAC,EAAAE,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAAC,OAAAC,eAAAT,EAAAI,EAAAM,IAAAN,IAAA,MAAA,UAAAf,EAAAsB,EAAAC,GAAA,MAAAD,IAAAZ,EAAAV,EAAAwB,UAAAF,GAAAC,GAAAb,EAAAV,EAAAuB,GAAAvB,MAGaK,EAAA,WAIpB,QAJoBA,GAIRoB,GAAM,GAAA3B,EAAA4B,KAJErB,GAIFF,EACVuB,KAAMD,GACRC,KAAKC,QACTD,KAAKC,MAAQ,GAAIzB,IADlBwB,KAGKC,MAAMC,OAAOF,OAGbA,KAAKG,GAAI,IAAA,GACPA,GAAKH,KAAKG,GAAKC,SAASC,cAAcL,KAAKM,KAAO,OAD3CC,GAII,KAAM,SAJVC,EAAA,EAIbA,EAAAD,EAAAnB,OAAAoB,IAAiC,CAA5B,GAAIb,GAAAY,EAAAC,EACJb,KAAOI,IACVI,EAAGM,aAAad,EAAKI,EAAKJ,KA+CZ,MA7DlBjB,GAJoBC,IAAAgB,IAAA,SAAAe,MAAA,WA2BnBV,KAAKG,GAAGQ,SADAX,KAEHC,MAAMW,OAAOZ,YACXA,MAAKC,SAHJN,IAAA,KAAAe,MAAA,SAONG,EAAMC,EAAUC,GAClBf,KAAKG,GAAGa,iBAAiBH,EAAM,SAAAI,GAC1BA,EAAMhC,OAAOiC,SAAWD,EAAMhC,OAAOiC,QAAQJ,IAChDC,EAAGE,QAHiBtB,IAAA,UAAAe,MAAA,SAUfS,GACP,IAAK,GAAIL,KAAYK,GACpBnB,KAAKoB,GAAG,QAASN,EAAUK,EAAOL,OADnCnB,IAAA,QAAAe,MAAA,SAMKG,EAAME,GACXf,KAAKG,GAAGa,iBAAiBH,EAAME,MADhBpB,IAAA,OAAAe,MAAA,SAKXG,EAAMC,EAAUC,GAAI,GAAAM,GAAArB,IACxBA,MAAKG,GAAGa,iBAAiBH,EAAM,SAAAI,GAC1BA,EAAMhC,OAAOiC,SAAWD,EAAMhC,OAAOiC,QAAQJ,KAChDC,EAAGE,GADwDI,EAEtDlB,GAAGmB,oBAAoBT,EAAME,SAJZpB,IAAA,UAAAe,MAAA,SAUjBG,EAAME,GAAI,GAAAQ,GAAAvB,IACjBA,MAAKG,GAAGa,iBAAiBH,EAAM,SAAAI,GAC9BF,EAAGE,GADoCM,EAElCpB,GAAGmB,oBAAoBT,EAAME,SApEhBpC,KAAAT,EAAA,UAAAS","file":"view.js","sourcesContent":["import Model from './model'\nimport {extend} from 'underscore'\n\n// Generic view class, that all over view classes extend\nexport default class View {\n\t// Creates a new View and binds it to the target model. If none, creates a\n\t// blank model. If no element suplied, creates a new one from tags. Sets\n\t// some other default variables.\n\tconstructor(args) {\n\t\textend(this, args)\n\t\tif (!this.model) {\n\t\t\tthis.model = new Model()\n\t\t}\n\t\tthis.model.attach(this)\n\n\t\t// Create element, if none\n\t\tif (!this.el) {\n\t\t\tconst el = this.el = document.createElement(this.tag || 'div')\n\n\t\t\t// Set element attributes, if any\n\t\t\tfor (let key of ['id', 'class']) {\n\t\t\t\tif (key in args) {\n\t\t\t\t\tel.setAttribute(key, args[key])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove the element from the DOM and detach from its model, allowing the\n\t// View instance to be garbage collected.\n\tremove() {\n\t\tthis.el.remove()\n\t\tthis.model.detach(this)\n\t\tdelete this.model\n\t}\n\n\t// Add selector-specific event listeners to the view\n\ton(type, selector, fn) {\n\t\tthis.el.addEventListener(type, event => {\n\t\t\tif (event.target.matches && event.target.matches(selector)) {\n\t\t\t\tfn(event)\n\t\t\t}\n\t\t})\n\t}\n\n\t// Shorthand for adding multiple click event listeners as an object.\n\t// We use those the most, so nice to have.\n\tonClick(events) {\n\t\tfor (let selector in events) {\n\t\t\tthis.on('click', selector, events[selector])\n\t\t}\n\t}\n\n\t// Add event listener to view's element, whithout filtering by selector\n\tonAll(type, fn) {\n\t\tthis.el.addEventListener(type, fn)\n\t}\n\n\t// Add selector-specific event listener, that will execute only once\n\tonce(type, selector, fn) {\n\t\tthis.el.addEventListener(type, event => {\n\t\t\tif (event.target.matches && event.target.matches(selector)) {\n\t\t\t\tfn(event)\n\t\t\t\tthis.el.removeEventListener(type, fn)\n\t\t\t}\n\t\t})\n\t}\n\n\t// Add event listener, that will execute only once\n\tonceAll(type, fn) {\n\t\tthis.el.addEventListener(type, event => {\n\t\t\tfn(event)\n\t\t\tthis.el.removeEventListener(type, fn)\n\t\t})\n\t}\n}\n"],"sourceRoot":"/source/"}