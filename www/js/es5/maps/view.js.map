{"version":3,"sources":["view.js"],"names":["System","register","_export","_context","_classCallCheck","instance","Constructor","TypeError","Model","extend","_createClass","View","setters","_model","_vendorUnderscore","execute","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","args","this","model","attach","el","document","createElement","tag","_arr","_i","setAttribute","value","remove","detach","type","selector","method","_this","addEventListener","event","matches","events","on","_this2","_this3","removeEventListener","_this4"],"mappings":"AAAA,YAAaA,QAAOC,UAAU,UAAU,wBAAwB,SAASC,EAAQC,GAA6C,QAASC,GAAgBC,EAASC,GAAa,KAAKD,YAAoBC,IAAc,KAAM,IAAIC,WAAU,qCAA7I,GAAIC,GAAMC,EAAOC,EAAaC,CAAsJ,QAAQC,SAAS,SAASC,GAAQL,EAAMK,EAAAA,YAAiB,SAASC,GAAmBL,EAAOK,EAAkBL,SAAUM,QAAQ,WAAWL,EAAa,WAAW,QAASM,GAAiBC,EAAOC,GAAO,IAAI,GAAIC,GAAE,EAAEA,EAAED,EAAME,OAAOD,IAAI,CAAC,GAAIE,GAAWH,EAAMC,EAAGE,GAAWC,WAAWD,EAAWC,aAAY,EAAMD,EAAWE,cAAa,EAAQ,SAAWF,KAAWA,EAAWG,UAAS,GAAKC,OAAOC,eAAeT,EAAOI,EAAWM,IAAIN,IAAc,MAAO,UAASf,EAAYsB,EAAWC,GAAuI,MAAvHD,IAAWZ,EAAiBV,EAAYwB,UAAUF,GAAeC,GAAYb,EAAiBV,EAAYuB,GAAoBvB,MAAkBK,EAAK,WAAW,QAASA,GAAKoB,GAAmH,GAA7G3B,EAAgB4B,KAAKrB,GAAMF,EAAOuB,KAAKD,GAAUC,KAAKC,QAAOD,KAAKC,MAAM,GAAIzB,IAASwB,KAAKC,MAAMC,OAAOF,OAAUA,KAAKG,GAAmF,IAAI,GAA/EA,GAAGH,KAAKG,GAAGC,SAASC,cAAcL,KAAKM,KAAK,OAAWC,GAAM,KAAK,SAAiBC,EAAG,EAAEA,EAAGD,EAAKnB,OAAOoB,IAyB1nC,CAA5B,GAAIb,GAAGY,EAAAC,EACPb,KAAOK,OACVG,EAAGM,aAAad,EAAKK,KAAKL,KAE3B,MAAAjB,GAAAC,IAAAgB,IAAA,SAAAe,MAAA,WAAAV,KAAAG,GAAAQ,SAAAX,KAAAC,MAAAW,OAAAZ,YAAAA,MAAAC,SAAAN,IAAA,KAAAe,MAAA,SAAAG,EAAAC,EAAAC,GAAA,GAAAC,GAAAhB,IAAAA,MAAAG,GAAAc,iBAAAJ,EAAA,SAAAK,GAAAA,EAAAjC,OAAAkC,QAAAL,IAAAE,EAAAD,GAAAG,QAAAvB,IAAA,UAAAe,MAAA,SAAAU,GAAA,IAAA,GAAAN,KAAAM,GAAApB,KAAAqB,GAAA,QAAAP,EAAAM,EAAAN,OAAAnB,IAAA,QAAAe,MAAA,SAAAG,EAAAE,GAAA,GAAAO,GAAAtB,IAAAA,MAAAG,GAAAc,iBAAAJ,EAAA,SAAAK,GAAA,MAAAI,GAAAP,GAAAG,QAAAvB,IAAA,OAAAe,MAAA,SAAAG,EAAAC,EAAAC,GAAA,GAAAQ,GAAAvB,IAAAA,MAAAG,GAAAc,iBAAAJ,EAAA,SAAAK,GAAAA,EAAAjC,OAAAkC,QAAAL,KAAAS,EAAAR,GAAAG,GAAAK,EAAApB,GAAAqB,oBAAAX,EAAAU,EAAAR,UAAApB,IAAA,UAAAe,MAAA,SAAAG,EAAAE,GAAA,GAAAU,GAAAzB,IAAAA,MAAAG,GAAAc,iBAAAJ,EAAA,SAAAK,GAAAO,EAAAV,GAAAG,GAAAO,EAAAtB,GAAAqB,oBAAAX,EAAAY,EAAAV,UAAApC,KAAAT,EAAA,UAAAS","file":"view.js","sourcesContent":["import Model from './model'\nimport {extend} from '../vendor/underscore'\n\n/**\n * Generic view class, that all over view classes extend\n */\nexport default class View {\n\t/**\n\t * Creates a new View and binds it to the target model. If none, creates a\n\t * blank model. If no element suplied, creates a new one from tags. Sets\n\t * some other default variables.\n\t * @param {Object} args - Attributes to attach to the View instance\n\t */\n\tconstructor(args) {\n\t\textend(this, args)\n\t\tif (!this.model) {\n\t\t\tthis.model = new Model()\n\t\t}\n\t\tthis.model.attach(this)\n\n\t\t// Create element, if none\n\t\tif (!this.el) {\n\t\t\tconst el = this.el = document.createElement(this.tag || 'div')\n\n\t\t\t// Set element attributes, if any\n\t\t\tfor (let key of ['id', 'class']) {\n\t\t\t\tif (key in this) {\n\t\t\t\t\tel.setAttribute(key, this[key])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Remove the element from the DOM and detach from its model, allowing the\n\t * View instance to be garbage collected.\n\t */\n\tremove() {\n\t\tthis.el.remove()\n\t\tthis.model.detach(this)\n\t\tdelete this.model\n\t}\n\n\t/**\n\t * Add selector-specific event listeners to the view\n\t * @param {string} type - DOM event type\n\t * @param {string} selector - Selector to match the event.target against\n\t * @param {string} method - Class method for handling the event\n\t */\n\ton(type, selector, method) {\n\t\tthis.el.addEventListener(type, event => {\n\t\t\tif (event.target.matches(selector)) {\n\t\t\t\tthis[method](event)\n\t\t\t}\n\t\t})\n\t}\n\n\t/**\n\t * Shorthand for adding multiple click event listeners as an object.\n\t * We use those the most, so nice to have.\n\t * @param {Object} events - Map of selectors to handlers\n\t */\n\tonClick(events) {\n\t\tfor (let selector in events) {\n\t\t\tthis.on('click', selector, events[selector])\n\t\t}\n\t}\n\n\t/**\n\t * Add event listener to view's element, whithout filtering by selector\n\t * @param {string} type - DOM event type\n\t * @param {string} method - Class method for handling the event\n\t */\n\tonAll(type, method) {\n\t\tthis.el.addEventListener(type, event => this[method](event))\n\t}\n\n\t/**\n\t * Add selector-specific event listener, that will execute only once\n\t * @param {string} type - DOM event type\n\t * @param {string} selector - Selector to match the event.target against\n\t * @param {string} method - Class method for handling the event\n\t */\n\tonce(type, selector, method) {\n\t\tthis.el.addEventListener(type, event => {\n\t\t\tif (event.target.matches(selector)) {\n\t\t\t\tthis[method](event)\n\t\t\t\tthis.el.removeEventListener(type, this[method])\n\t\t\t}\n\t\t})\n\t}\n\n\t/**\n\t * Add event listener, that will execute only once\n\t * @param {string} type - DOM event type\n\t * @param {string} method - Class method for handling the event\n\t */\n\tonceAll(type, method) {\n\t\tthis.el.addEventListener(type, event => {\n\t\t\tthis[method](event)\n\t\t\tthis.el.removeEventListener(type, this[method])\n\t\t})\n\t}\n}\n"],"sourceRoot":"/source/"}