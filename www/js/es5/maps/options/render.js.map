{"version":3,"sources":["options/render.js"],"names":["System","register","_export","_context","_taggedTemplateLiteral","strings","raw","Object","freeze","defineProperties","value","renderTab","opts","i","length","html","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","opt","renderOption","err","renderExtras","isShortcut","type","isList","Array","isCheckbox","isNumber","isImage","_lang$labels$opt$id","_slicedToArray","lang","labels","id","label","title","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","item","parseHTML","_templateObject2","modes","_templateObject3","links","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_lang$labels$id","_templateObject4","attrs","name","parseAtributes","filter","options","ln","_templateObject","tabs","_loop","tab","load","hidden","data-content","class","setters","_vendorUnderscore","_util","_opts","_lang","execute","sliceIterator","arr","_arr","_n","_d","_e","_s","_i","push","isArray","TypeError"],"mappings":"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","file":"options/render.js","sourcesContent":["import {filter} from '../../vendor/underscore'\nimport {parseHTML, parseAtributes} from '../util'\nimport options from \"./opts\"\nimport ln from 'lang'\n\nconst lang = ln.opts\n\n/**\n * Render the inner HTML of the options panel\n */\nexport default function () {\n    let html = '<ul class=\"option_tab_sel\">'\n    const {tabs} = lang,\n        opts = []\n\n    // Render tab butts\n    for (let i = 0; i < tabs.length; i++) {\n        // Pick the options for this specific tab, according to current\n        // template and server configuration\n        opts[i] = filter(options, opt =>\n            opt.tab === i\n                && (opt.load === undefined  || opt.load)\n                && !opt.hidden)\n\n        if (!opts[i].length) {\n            continue\n        }\n        const attrs = {\n            'data-content': `tab-${i}`,\n            class: 'tab_link'\n        }\n\n        // Highlight the first tabButt by default\n        if (i === 0) {\n            attrs.class += ' tab_sel'\n        }\n        html += parseHTML\n            `<li>\n                <a ${parseAtributes(attrs)}>\n                    ${tabs[i]}\n                </a>\n            </li>`\n    }\n\n    html += '</ul><ul class=\"option_tab_cont\">'\n    for (let i = 0; i < opts.length; i++) {\n        html += renderTab(opts[i], i)\n    }\n    html += '</ul>'\n\n    return html\n}\n\n/**\n * Render tab contents\n */\nfunction renderTab(opts, i) {\n    if (!opts.length) {\n        return ''\n    }\n    let html = \"\"\n    html += `<li class=\"tab-${i}`\n\n    // Show the first tab by default\n    if (i === 0) {\n        html += ' tab_sel'\n    }\n    html += '\">'\n\n    // Render the actual options\n    for (let opt of opts) {\n        html += renderOption(opt)\n    }\n\n    if (i === 0) {\n        html += renderExtras()\n    }\n    html += '</li>'\n\n    return html\n}\n\n/**\n * Render a single option from it's schema\n */\nfunction renderOption(opt) {\n\tlet html = ''\n\tconst isShortcut = opt.type === 'shortcut',\n\t\tisList = opt.type instanceof Array,\n\t\tisCheckbox = opt.type === 'checkbox' || opt.type === undefined,\n\t\tisNumber = opt.type === 'number',\n\t\tisImage = opt.type === 'image'\n\tif (isShortcut) {\n        html += 'Alt+'\n    }\n\tif (!isList) {\n\t\thtml += '<input'\n\t\tif (isCheckbox || isImage)\n\t\t\thtml += ` type=\"${(isCheckbox ? 'checkbox' : 'file')}\"`\n\t\telse if (isNumber)\n\t\t\thtml += ' style=\"width: 4em;\" maxlength=\"4\"'\n\t\telse if (isShortcut)\n\t\t\thtml += ' maxlength=\"1\"'\n\t} else {\n        html += '<select'\n    }\n\n\tconst [label,title] = lang.labels[opt.id]\n\thtml += ` id=\"${opt.id}\" title=\"${title}\">`\n\n\tif (isList) {\n\t\tfor (let item of opt.type) {\n\t\t\thtml += parseHTML\n                `<option value=\"${item}\">\n                    ${lang.modes[item] || item}\n                </option>`\n\t\t}\n\t\thtml += '</select>'\n\t}\n\thtml += parseHTML\n        `<label for=\"${opt.id}\" title=\"${title}\">\n            ${label}\n        </label>\n        <br>`\n\n\treturn html\n}\n\n/**\n * Hidden post reset, Export and Import links to first tab\n */\nfunction renderExtras() {\n\tlet html = '<br>'\n\tconst links = ['export', 'import', 'hidden']\n    for (let id of links) {\n        const [label, title] = lang.labels[id]\n        html += parseHTML\n            `<a id=\"${id}\" title=\"${title}\">\n                ${label}\n            </a> `\n    }\n\n    // Hidden file input for uploading the JSON\n    const attrs = {\n        type: 'file',\n        id: 'importSettings',\n        name: \"Import Settings\"\n    }\n\thtml += `<input ${parseAtributes(attrs)}>`\n\n    return html\n}\n"],"sourceRoot":"/source/"}