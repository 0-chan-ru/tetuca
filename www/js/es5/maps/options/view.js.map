{"version":3,"sources":["options/view.js"],"names":["System","register","_export2","setters","execute","tick","clicked","el","style","opacity","out","now","requestAnimationFrame","localStorage","optionsSeen","document","query","undefined","addEventListener","ModalView","extend","id","events","click .option_tab_sel>li>a","change","click #export","click #import","click #hidden","render","_render","apply","this","arguments","toString","innerHTML","assignValues","hidden","reply","renderHidden","optionModels","model","type","val","get","checked","Array","value","String","fromCharCode","toUpperCase","switchTab","event","preventDefault","target","each","children","classList","remove","add","find","lastChild","li","contains","getAttribute","applyChange","parseInt","request","charCodeAt","validate","options","set","export","a","getElementById","setAttribute","window","URL","createObjectURL","Blob","JSON","stringify","import","click","util","once","reader","FileReader","readAsText","input","files","onload","json","parse","result","err","alert","clear","key","location","reload","count","textContent","replace","clearHidden","main"],"mappings":"AAAA,YAAaA,QAAOC,YAAY,SAASC,GAAU,OAAQC,WAAWC,QAAQ,YAAW,WAA8N,QAASC,KAAO,GAAGC,EAA4B,YAAnBC,EAAGC,MAAMC,QAAQ,EAAUF,GAAGC,MAAMC,SAASF,EAAGC,MAAMC,SAASC,GAAK,IAAK,IAAM,IAAIC,IAAKJ,EAAGC,MAAMC,SAAWC,GAAU,GAALC,IAASD,GAAKC,GAAK,KAAGD,GAAKA,GAAKE,sBAAsBP,GAArZ,IAAGQ,aAAaC,YAAhB,CAAqC,GAAIP,GAAGQ,SAASC,MAAM,WAAYT,GAAGC,MAAMC,QAAQ,CAAE,IAAIC,IAAI,EAAKJ,EAAQW,MAAUV,GAAGW,iBAAiB,QAAQ,WAAWZ,GAAQ,EAAKO,aAAaC,YAAY,IAAKT,QAAsNH,EAAS,UAAUiB,UAAUC,QAAQC,GAAG,gBAAgBC,QAAQC,6BAA6B,YAAYC,OAAS,cAAcC,gBAAgB,SAASC,gBAAgB,SAASC,gBAAgB,eAAeC,OAAO,SAAUC,GAAS,QAASD,KAAS,MAAOC,GAAQC,MAAMC,KAAKC,WAAmE,MAAvDJ,GAAOK,SAAS,WAAW,MAAOJ,GAAQI,YAAoBL,GAAU,WAiD52BG,KAAKxB,GAAG2B,UAAYN,SAAQG,KAC1BI,eAAcJ,KACdK,OAASL,KAAKxB,GAAGS,MAAM,WAAUM,OAC/Be,MAAM,cAAeN,KAAKO,aAAcP,QAC/CI,aAAA,WAAA,IAAA,GAAAd,KAAAkB,cAAA,CAAA,GAAAC,GAAAD,aAAAlB,GAAAd,EAAAwB,KAAAxB,GAAAS,MAAA,IAAAK,GAAAoB,EAAAD,EAAAC,KAAAC,EAAAF,EAAAG,KAAA,cAAAF,EAAAlC,EAAAqC,QAAAF,EAAA,WAAAD,GAAAA,YAAAI,OAAAtC,EAAAuC,MAAAJ,EAAA,aAAAD,IAAAlC,EAAAuC,MAAAC,OAAAC,aAAAN,GAAAO,iBAAAC,UAAA,SAAAC,GAAAA,EAAAC,gBAAA,IAAA7C,GAAA4C,EAAAE,MAAAC,MAAAvB,KAAAxB,GAAAgD,SAAA,SAAAhD,GAAA,MAAAA,GAAAS,MAAA,YAAAwC,UAAAC,OAAA,aAAAlD,EAAAiD,UAAAE,IAAA,WAAAC,KAAA5B,KAAAxB,GAAAqD,UAAAL,SAAA,SAAAM,GAAA,MAAAA,GAAAL,UAAAM,SAAAvD,EAAAwD,aAAA,mBAAAP,UAAAE,IAAA,YAAAM,YAAA,SAAAb,GAAA,GAAA5C,GAAA4C,EAAAE,OAAAhC,EAAAd,EAAAwD,aAAA,MAAAvB,EAAAD,aAAAlB,GAAAqB,EAAAzB,MAAA,QAAAuB,EAAAC,MAAA,IAAA,WAAAC,EAAAnC,EAAAqC,OAAA,MAAA,KAAA,SAAAF,EAAAuB,SAAA1D,EAAAuC,MAAA,MAAA,KAAA,QAAA,MAAAxB,QAAA4C,QAAA,mBAAAf,EAAAE,OAAA,KAAA,WAAAX,EAAAnC,EAAAuC,MAAAG,cAAAkB,WAAA,EAAA,MAAA,SAAAzB,EAAAnC,EAAAuC,MAAAN,EAAA4B,SAAA1B,GAAA2B,QAAAC,IAAAjD,EAAAqB,GAAAnC,EAAAuC,MAAA,IAAAyB,SAAA,WAAA,GAAAC,GAAAzD,SAAA0D,eAAA,SAAAD,GAAAE,aAAA,OAAAC,OAAAC,IAAAC,gBAAA,GAAAC,OAAAC,KAAAC,UAAAnE,gBAAA4B,KAAA,mBAAA+B,EAAAE,aAAA,WAAA,uBAAAO,SAAA,SAAA9B,GAAAA,EAAAC,gBAAA,IAAA7C,GAAAQ,SAAAC,MAAA,kBAAAT,GAAA2E,QAAAC,KAAAC,KAAA7E,EAAA,SAAA,WAAA,GAAA8E,GAAA,GAAAC,WAAAD,GAAAE,WAAAC,MAAAC,MAAA,IAAAJ,EAAAK,OAAA,SAAAvC,GAAA,GAAAwC,GAAA1E,MAAA,KAAA0E,EAAAZ,KAAAa,MAAAzC,EAAAE,OAAAwC,QAAA,MAAAC,GAAA,WAAAC,OAAA,+BAAAlF,aAAAmF,OAAA,KAAA,GAAAC,KAAAN,GAAA9E,aAAAoF,GAAAN,EAAAM,EAAAF,OAAA,iDAAAG,SAAAC,aAAA7D,aAAA,SAAA8D,GAAA,GAAA7F,GAAAwB,KAAAK,MAAA7B,GAAA8F,YAAA9F,EAAA8F,YAAAC,QAAA,OAAAF,IAAAG,YAAA,WAAAC,KAAAtC,QAAA,cAAAnC,KAAAO,aAAA","file":"options/view.js","sourcesContent":["// Highlight options button by fading out and in, if no options are set\n(function() {\n\tif (localStorage.optionsSeen) {\n\t\treturn\n\t}\n\tconst el = document.query('#options')\n\tel.style.opacity = 1\n\tlet out = true,\n\t\tclicked\n\tel.addEventListener(\"click\", () => {\n\t\tclicked = true\n\t\tlocalStorage.optionsSeen = 1\n\t})\n\ttick()\n\n\tfunction tick() {\n\t\t// Stop\n\t\tif (clicked) {\n\t\t    el.style.opacity = 1\n\t\t\treturn\n\t\t}\n\n    \tel.style.opacity = +el.style.opacity + (out ? -0.02 : 0.02)\n\t\tconst now = +el.style.opacity\n\n\t\t// Reverse direction\n\t\tif ((out && now <= 0) || (!out && now >= 1)) {\n\t\t    out = !out\n\t\t}\n\t\trequestAnimationFrame(tick)\n\t}\n})()\n\n// View of the options panel\nexport default ModalView.extend({\n\tid: 'options-panel',\n\n\tevents: {\n\t\t'click .option_tab_sel>li>a': 'switchTab',\n\t\t'change': 'applyChange',\n\t\t'click #export': 'export',\n\t\t'click #import': 'import',\n\t\t'click #hidden': 'clearHidden'\n\t},\n\n\t/**\n\t * Render the options panel. Only called once on page load.\n\t */\n\trender() {\n\t    this.el.innerHTML = render()\n\t\tthis.assignValues()\n\t\tthis.hidden = this.el.query('#hidden')\n\t\tevents.reply('hide:render', this.renderHidden, this)\n\t},\n\n\t/**\n\t * Assign loaded option settings to the respective elements in the options\n\t * panel\n\t */\n\tassignValues() {\n\t\tfor (let id in optionModels) {\n\t\t\tconst model = optionModels[id],\n\t\t\t\tel = this.el.query('#' + id)\n\t\t\tconst {type} = model,\n\t\t\t\tval = model.get()\n\t\t\tif (type === 'checkbox') {\n\t\t\t    el.checked = val\n\t\t\t} else if (type === 'number' || type instanceof Array) {\n\t\t\t    el.value = val\n\t\t\t} else if (type === 'shortcut') {\n\t\t\t    el.value = String.fromCharCode(val).toUpperCase()\n\t\t\t}\n\n\t\t\t// 'image' type simply falls through, as those don't need to be set\n\t\t}\n\t},\n\n\t/**\n\t * Switch to a tab, when clicking the tab butt\n\t * @param {Event} event\n\t */\n\tswitchTab(event) {\n\t\tevent.preventDefault()\n\t\tconst el = event.target\n\n\t\t// Deselect previous tab\n\t\teach(this.el.children, el =>\n\t\t\tel.query('.tab_sel').classList.remove('tab_sel'))\n\n\t\t// Select the new one\n\t\tel.classList.add('tab_sel')\n\t\tfind(this.el.lastChild.children, li =>\n\t\t\tli.classList.contains(el.getAttribute('data-content'))\n\t\t)\n\t\t\t.classList.add('tab_sel')\n\t},\n\n\t/**\n\t * Propagate options panel changes through\n\t * options -> optionModels -> localStorage\n\t * @param {Event} event\n\t */\n\tapplyChange(event) {\n\t\tconst el = event.target,\n\t\t\tid = el.getAttribute('id'),\n\t\t\tmodel = optionModels[id]\n\t\tlet val\n\t\tswitch (model.type) {\n\t\t\tcase 'checkbox':\n\t\t\t\tval = el.checked\n\t\t\t\tbreak\n\t\t\tcase 'number':\n\t\t\t\tval = parseInt(el.value)\n\t\t\t\tbreak\n\t\t\tcase 'image':\n\t\t\t\t// Not recorded. Extracted directly by the background handler.\n\t\t\t\treturn events.request('background:store', event.target)\n\t\t\tcase 'shortcut':\n\t\t\t\tval = el.value.toUpperCase().charCodeAt(0)\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tval = el.value\n\t\t}\n\n\t\tif (!model.validate(val)) {\n\t\t\tel.value = ''\n\t\t} else {\n\t\t\toptions.set(id, val)\n\t\t}\n\t},\n\n\t/**\n\t * Dump options to JSON file and upload to user\n\t */\n\texport() {\n\t\tconst a = document.getElementById('export')\n\t\ta.setAttribute('href', window.URL\n\t\t\t.createObjectURL(new Blob([JSON.stringify(localStorage)], {\n\t\t\t\ttype: 'octet/stream'\n\t\t\t}))\n\t\t)\n\t\ta.setAttribute('download', 'meguca-config.json')\n\t},\n\n\t/**\n\t * Import options from uploaded JSON file\n\t * @param {Event} event\n\t */\n\timport(event) {\n\t\t// Proxy to hidden file input\n\t\tevent.preventDefault()\n\t\tconst el = document.query('#importSettings')\n\t\tel.click()\n\t\tutil.once(el, 'change', () => {\n\t\t\tvar reader = new FileReader()\n\t\t\treader.readAsText(input.files[0])\n\t\t\treader.onload = event => {\n\t\t\t\t// In case of curruption\n\t\t\t\tlet json\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(event.target.result)\n\t\t\t\t}\n\t\t\t\tcatch(err) {\n\t\t\t\t\talert('Import failed. File corrupt')\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tlocalStorage.clear()\n\t\t\t\tfor (let key in json) {\n\t\t\t\t\tlocalStorage[key] = json[key]\n\t\t\t\t}\n\t\t\t\talert('Import successfull. The page will now reload.')\n\t\t\t\tlocation.reload()\n\t\t\t};\n\t\t})\n\t},\n\n\t/**\n\t * Render Hiden posts counter\n\t * @param {int} count\n\t */\n\trenderHidden(count) {\n\t\tconst el = this.hidden\n\t\tel.textContent = el.textContent.replace(/\\d+$/, count)\n\t},\n\n\t/**\n\t * Clear displayed hidden post counter\n\t */\n\tclearHidden() {\n\t\tmain.request('hide:clear')\n\t\tthis.renderHidden(0)\n\t}\n})\n"],"sourceRoot":"/source/"}