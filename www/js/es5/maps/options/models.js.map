{"version":3,"sources":["options/models.js"],"names":["System","register","_export","_context","_classCallCheck","instance","Constructor","TypeError","extend","options","opts","_createClass","optionModels","OptionModel","setters","_vendorUnderscore","_options","_opts","execute","init","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","spec","value","err","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","model","_this","this","load","type","val","attrs","id","get","onChange","execOnStart","localStorage","getItem","stored","read","num","parseInt","set","exec","setItem","validation"],"mappings":"AAAA,YAAaA,QAAOC,UAAU,0BAA0B,aAAa,UAAU,SAASC,EAAQC,GAAwE,QAASC,GAAgBC,EAASC,GAAa,KAAKD,YAAoBC,IAAc,KAAM,IAAIC,WAAU,qCAAxK,GAAIC,GAAOC,EAAQC,EAAKC,EAAaC,EAAaC,CAA6J,QAAQC,SAAS,SAASC,GAAmBP,EAAOO,EAAkBP,QAAS,SAASQ,GAAUP,EAAQO,EAAAA,YAAmB,SAASC,GAAOP,EAAKO,EAAAA,aAAiBC,QAAQ,WAAgsD,QAASC,KAAO,GAAIC,IAA0B,EAASC,GAAkB,EAAUC,EAAeC,MAAU,KAAI,IAAI,GAiH/vEC,GAjHmwEC,EAiHvwEf,EAAIgB,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAA,CAAA,GAAAU,GAAAN,EAAAO,KAAA,IAAAlB,GAAAiB,IAAA,MAAAE,GAAAX,GAAA,EAAAC,EAAAU,EAAA,QAAA,KAAAZ,GAAAK,EAAAA,WAAAA,EAAAA,YAAA,QAAA,GAAAJ,EAAA,KAAAC,KAjHsdX,EAAa,WAAW,QAASsB,GAAiBC,EAAOC,GAAO,IAAI,GAAIC,GAAE,EAAEA,EAAED,EAAME,OAAOD,IAAI,CAAC,GAAIE,GAAWH,EAAMC,EAAGE,GAAWC,WAAWD,EAAWC,aAAY,EAAMD,EAAWE,cAAa,EAAQ,SAAWF,KAAWA,EAAWG,UAAS,GAAKC,OAAOC,eAAeT,EAAOI,EAAWM,IAAIN,IAAc,MAAO,UAAShC,EAAYuC,EAAWC,GAAuI,MAAvHD,IAAWZ,EAAiB3B,EAAYyC,UAAUF,GAAeC,GAAYb,EAAiB3B,EAAYwC,GAAoBxC,MAAkBJ,EAAQ,eAAeU,MAAiBV,EAAQ,eAAeU,GAAcC,EAAY,WAAW,QAASA,GAAYmC,GAAO,GAAIC,GAAMC,IAAuC,IAAlC9C,EAAgB8C,KAAKrC,GAA6BU,SAAbyB,EAAMG,MAAmBH,EAAMG,KAAlC,CAAgD3C,EAAO0C,KAAKF,GAAWE,KAAKE,OAAMF,KAAKE,KAAK,WAAY,IAAIC,GAAI5C,EAAQ6C,MAAMJ,KAAKK,IAAIL,KAAKM,KAAM/C,GAAQgD,SAASP,KAAKK,GAAG,SAASF,GAAK,MAAOJ,GAAMQ,SAASJ,KAAWH,KAAKQ,eAAc,GAAOR,KAAKhC,QAAQmC,GAAMzC,EAAasC,KAAKK,IAAIL,MAAqtB,MAA/sBvC,GAAaE,IAAc+B,IAAI,OAAOb,MAAM,WAAgB,MAAO4B,cAAaC,QAAQV,KAAKK,OAAQX,IAAI,MAAMb,MAAM,WAAe,GAAI8B,GAAOX,KAAKY,MAAO,IAAID,EAAkC,CAAC,GAAY,UAATA,EAAkB,OAAO,CAAO,IAAY,SAATA,EAAiB,OAAO,CAAM,IAAIE,GAAIC,SAASH,EAAO,GAAI,OAAGE,IAAW,IAANA,EAAgBA,EAAYb,KAAAA,WAA/J,MAAOA,MAAAA,cAA0KN,IAAI,WAAWb,MAAM,SAAkBsB,GAAKH,KAAKhC,QAAQmC,GAAKH,KAAKe,IAAIZ,MAAST,IAAI,UAAUb,MAAM,SAAiBsB,GAAQH,KAAKgB,MAAMhB,KAAKgB,KAAKb,MAAUT,IAAI,MAAMb,MAAM,SAAasB,IAAQA,IAAMH,KAAAA,YAAcA,KAAKY,SAAQH,aAAaQ,QAAQjB,KAAKK,GAAGF,MAAUT,IAAI,WAAWb,MAAM,SAAkBsB,GAAK,MAAGH,MAAKkB,WAAmBlB,KAAKkB,WAAWf,IAAa,MAAiBxC,KAiH3nEX,EAAA,OAAAiB","file":"options/models.js","sourcesContent":["import {extend} from '../../vendor/underscore'\nimport options from '../options'\nimport opts from './opts'\n\n// All loaded option models\nexport const optionModels = {}\n\n/**\n * Coontroler for each individual option\n */\nclass OptionModel {\n\t/**\n\t * Create new option model from template model\n\t * @param {Object} model\n\t */\n    constructor(model) {\n\t\t// Condition for loading option. Optional.\n\t\tif (model.load !== undefined && !model.load) {\n\t\t\treturn\n\t\t}\n\t\textend(this, model)\n\n\t\t// No type = checkbox + default false\n\t\tif (!this.type) {\n\t\t    this.type = 'checkbox'\n\t\t}\n\n\t\t// Store option value in central stotage options Backbone model\n\t\tconst val = options.attrs[this.id] = this.get()\n\t\toptions.onChange(this.id, val =>\n\t\t\tthis.onChange(val))\n\t\tif (this.execOnStart !== false) {\n\t\t    this.execute(val)\n\t\t}\n\t\toptionModels[this.id] = this\n    }\n\n\t/**\n\t * Read value from localStorage\n\t * @returns {string}\n\t */\n\tread() {\n\t    return localStorage.getItem(this.id)\n\t}\n\n\t/**\n\t * Retrieve option value from storage and parse result. If none, return\n\t * default.\n\t * @returns {string|bool|int}\n\t */\n\tget() {\n\t\tconst stored = this.read()\n\t    if (!stored) {\n\t        return this.default\n\t    } else {\n\t\t\tif (stored === 'false') {\n\t\t        return false\n\t\t    }\n\t\t\tif (stored === \"true\") {\n\t\t        return true\n\t\t    }\n\t\t\tconst num = parseInt(stored, 10)\n\t\t\tif (num || num === 0) {\n\t\t\t    return num\n\t\t\t}\n\t\t\treturn this.default\n\t\t}\n\t}\n\n\t/**\n\t * Handler to be executed on field change in central options storage model\n\t * @param {*} val\n\t */\n\tonChange(val) {\n\t    this.execute(val)\n\t\tthis.set(val)\n\t}\n\n\t/**\n\t * Execute handler function, if any\n\t * @param {*} val\n\t */\n\texecute(val) {\n\t    if (this.exec) {\n\t        this.exec(val)\n\t    }\n\t}\n\n\t/**\n\t * Write value to localStorage, if needed\n\t * @param {*} val\n\t */\n\tset(val) {\n\t    if (val !== this.default || this.read()) {\n\t        localStorage.setItem(this.id, val)\n\t    }\n\t}\n\n\t/**\n\t * Perform value validation, if any. Othervise return true.\n\t * @param {*} val\n\t * @returns {bool}\n\t */\n\tvalidate(val) {\n\t    if (this.validation) {\n\t        return this.validation(val)\n\t    }\n\t\treturn true\n\t}\n}\n\n// Create an option model for each object in the array\nexport function init() {\n    for (let spec of opts) {\n    \tnew OptionModel(spec)\n    }\n}\n"],"sourceRoot":"/source/"}