{"version":3,"sources":["drop.js"],"names":["System","register","_export","_context","dragonDrop","e","stopPropagation","preventDefault","files","dataTransfer","length","postForm","main","request","attrs","model","attributes","uploading","uploaded","thread","state","page","get","section","target","closest","etc","getNum","uploadError","extra","prepareUpload","data","FormData","append","key","xhr","XMLHttpRequest","open","uploadURL","setRequestHeader","onreadystatechange","upload_shita","send","notifyUploading","this","readyState","status","err","responseText","test","stop_drag","setupUploadDrop","el","go","name","func","addEventListener","setters","execute","require","isMobile","defer","$threads"],"mappings":"AAAA,YAAaA,QAAOC,YAAY,SAASC,EAAQC,GAOjD,QAASC,GAAWC,GACnBA,EAAEC,kBADoBD,EAEpBE,gBAFoB,IAGfC,GAASH,EAAEI,aAAXD,KAHe,IAIjBA,EAAME,OAJW,CAItB,GAEIC,GAAWC,EAAKC,QAAQ,WANN,IAOjBF,EAUA,CACJ,GAAMG,GAAQH,EAASI,MAAMC,UADzB,IAEAF,EAAMG,WAAaH,EAAMI,SAC5B,WAba,CACd,GAAMC,GAASC,EAAMC,KAAKC,IAAI,SADhB,IAEVH,EACHP,EAAKC,QAAQ,cAAeM,OACxB,CACJ,GAAMI,GAAUlB,EAAEmB,OAAOC,QAAQ,UAC7BF,IACHX,EAAKC,QAAQ,cAAea,EAAIC,OAAOJ,KAS1C,GAAKZ,IACJA,EAAWC,EAAKC,QAAQ,aACrBL,EAAME,OAAS,EAAG,WACrBC,GAASiB,YAAY,kBADtB,IAOMC,GAAQlB,EAASmB,gBACtBC,EAAO,GAAIC,SAjCUD,GAkCjBE,OAAO,QAASzB,EAAM,GAlCL,KAmCjB,GAAI0B,KAAOL,GACfE,EAAKE,OAAOC,EAAKL,EAAMK,GADxB,IAIMC,GAAM,GAAIC,eAvCMD,GAwClBE,KAAK,OAAQX,EAAIY,aAxCCH,EAyClBI,iBAAiB,SAAU,oBAzCTJ,EA0ClBK,mBAAqBC,EA1CHN,EA2ClBO,KAAKX,GA3CapB,EA6CbgC,mBA7CV,QAgDSF,KACR,GAAuB,GAAnBG,KAAKC,YAAkC,KAAfD,KAAKE,OAAjC,CAAA,GAEMC,GAAMH,KAAKI,YAGZ,8BAA6BC,KAAKF,IACtCnC,EAAKC,QAAQ,YAAYe,YAAYmB,IAPvC,QAUSG,GAAU7C,GAClBA,EAAEC,kBADmBD,EAEnBE,iBAFH,QAKS4C,GAAgBC,GAAI,QAMnBC,GAAGC,EAAMC,GACjBH,EAAGI,iBAAiBF,EAAMC,GAAM,GANjCF,EAAG,YAAaH,GADYG,EAEzB,WAAYH,GAFaG,EAGzB,WAAYH,GAHaG,EAIzB,OAAQjD,GA1E+C,GAAIQ,GAAKc,EAAIN,CAsExE,QAAAqC,WAAAC,QAAA,WAlEM9C,EAAO+C,QAAQ,UACnBjC,EAAcd,EAAdc,IAAKN,EAASR,EAATQ,MA4EFR,EAAKgD,UACThD,EAAKiD,MAAM,WAAA,MAAMV,GAAgBvC,EAAKkD,SAAS","file":"drop.js","sourcesContent":["/*\n File drag and drop uploads\n */\n\nconst main = require('./main'),\n\t{etc, state} = main;\n\nfunction dragonDrop(e) {\n\te.stopPropagation();\n\te.preventDefault();\n\tconst {files} = e.dataTransfer;\n\tif (!files.length)\n\t\treturn;\n\tlet postForm = main.request('postForm');\n\tif (!postForm) {\n\t\tconst thread = state.page.get('thread');\n\t\tif (thread)\n\t\t\tmain.request('openPostBox', thread);\n\t\telse {\n\t\t\tconst section = e.target.closest('section');\n\t\t\tif (section)\n\t\t\t\tmain.request('openPostBox', etc.getNum(section));\n\t\t}\n\t}\n\telse {\n\t\tconst attrs = postForm.model.attributes;\n\t\tif (attrs.uploading || attrs.uploaded)\n\t\t\treturn;\n\t}\n\n\tif (!postForm)\n\t\tpostForm = main.request('postForm');\n\tif (files.length > 1) {\n\t\tpostForm.uploadError('Too many files.');\n\t\treturn;\n\t}\n\n\t// Drag and drop does not supply a fakepath to file, so we have to use\n\t// a separate upload form from the postForm one. Meh.\n\tconst extra = postForm.prepareUpload(),\n\t\tdata = new FormData();\n\tdata.append('image', files[0]);\n\tfor (let key in extra) {\n\t\tdata.append(key, extra[key]);\n\t}\n\t\n\tconst xhr = new XMLHttpRequest();\n\txhr.open('POST', etc.uploadURL());\n\txhr.setRequestHeader('Accept', 'application/json');\n\txhr.onreadystatechange = upload_shita;\n\txhr.send(data);\n\n\tpostForm.notifyUploading();\n}\n\nfunction upload_shita() {\n\tif (this.readyState != 4 || this.status == 202)\n\t\treturn;\n\tconst err = this.responseText;\n\t\n\t// Everything just fine. Don't need to report.\n\tif (!/legitimate imager response/.test(err))\n\t\tmain.request('postForm').uploadError(err);\n}\n\nfunction stop_drag(e) {\n\te.stopPropagation();\n\te.preventDefault();\n}\n\nfunction setupUploadDrop(el) {\n\tgo('dragenter', stop_drag);\n\tgo('dragexit', stop_drag);\n\tgo('dragover', stop_drag);\n\tgo('drop', dragonDrop);\n\n\tfunction go(name, func) {\n\t\tel.addEventListener(name, func, false);\n\t}\n}\n\nif (!main.isMobile)\n\tmain.defer(() => setupUploadDrop(main.$threads[0]));\n\n"],"sourceRoot":"/source/"}