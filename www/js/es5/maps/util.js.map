{"version":3,"sources":["util.js"],"names":["System","register","_export","_toArray","arr","Array","isArray","from","_taggedTemplateLiteral","strings","raw","Object","freeze","defineProperties","value","readableSyncwatch","dice","parseHTML","_templateObject","readableRegularDice","bit","_dice","bias","rolls","slice","eq","length","join","sum","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","undefined","_step2","_iterator2","Symbol","iterator","next","done","roll","err","formatHTML","str","replace","config","page","posts","escape","_templateObject2","cachedOffset","thumbStyles","setters","_main","_state","_vendorUnderscore","execute","touchable_spoiler_tag","del","html","imageUploadURL","hard","HTTP","upload","get","getNum","el","parseInt","getAttribute","getID","closest","getModel","id","parseEls","string","document","createElement","innerHTML","children","childNodes","parseEl","firstChild","listener","type","selector","handler","addEventListener","event","target","matches","call","this","once","removeEventListener","outerWidth","style","getComputedStyle","props","width","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","prop","isSage","email","trim","serverTime","d","Date","now","imports","isNode","main","request","readable_dice","inner","toString","hotConfig","EIGHT_BALL","test","pick_spoiler","metaIndex","imgs","SPOILER_IMAGES","n","i","Math","floor","random","index","readable_filesize","size","round","pad","action_link_html","href","name","cls","resonableLastN","Number","isInteger","parse_name","tripcode","secure","hash","indexOf","substr","EXCLUDE_REGEXP","randomID","len","char","toUpperCase","callSite","arguments","args","output","map","text","parseAtributes","attrs","key","val","commaList","items","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","item","checkAuth","action","staff","classes","ident","auth","rights"],"mappings":"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","file":"util.js","sourcesContent":["/*\n Client-side helper functions\n */\n\nimport {config} from './main'\nimport {page, posts} from './state'\nimport {escape} from '../vendor/underscore'\n\n/**\n * Make spoiler tags toggleable on mobile\n * @param {Element}\n */\nexport function touchable_spoiler_tag(del) {\n\tdel.html = '<del onclick=\"void(0)\">'\n}\n\n/**\n * Return image upload URL\n * @returns {string}\n */\nexport function imageUploadURL() {\n\treturn (config.hard.HTTP.upload || '../upload/') + '?id='\n\t\t+ page.get('connID')\n}\n\n/**\n * Retrieve post number of post element\n * @param {Element} el\n * @returns {int}\n */\nexport function getNum(el) {\n\tif (!el) {\n\t    return 0\n\t}\n\treturn parseInt(el.getAttribute('id').slice(1), 10)\n}\n\n/**\n * Retrieve post number of closest parent post\n * @param {Element} el\n * @returns {int}\n */\nexport function getID(el) {\n\tif (!el) {\n    \treturn 0\n\t}\n\treturn getNum(el.closest('article, section'))\n}\n\n/**\n * Retrieve model of closest parent post\n * @param {Element} el\n * @returns {(Backbone.Model|null)}\n */\nexport function getModel(el) {\n\tconst id = getID(el)\n\tif (!id) {\n\t\treturn null\n\t}\n\treturn posts.get(id)\n}\n\n/**\n * Parse HTML string to node array\n * @param {string} string\n * @returns {Element[]}\n */\nexport function parseEls(string) {\n\tconst el = document.createElement('div')\n\tel.innerHTML = string\n\tconst children = el.childNodes\n\treturn Array.from(children)\n}\n\n/**\n * Parse HTML string to Element\n * @param {string} string\n * @returns {Element}\n */\nexport function parseEl(string) {\n\tconst el = document.createElement('div')\n\tel.innerHTML = string\n\treturn el.firstChild\n}\n\n/**\n * Add an event listener that filters targets according to a CSS selector\n * @param {Element} el - Target element\n * @param {string} type - Event type\n * @param {string} selector - CSS selector\n * @param {function} handler - Callback function\n */\nexport function listener(el, type, selector, handler) {\n\tel.addEventListener(type, function (event) {\n\t\tif (event.target.matches(selector))\n\t\t\thandler.call(this, event)\n\t})\n}\n\n/**\n * Add event listener to element, that will only be executed once\n * @param {Element} el - Target element\n * @param {string} type\t- Event type\n * @param {function} handler - Callback function\n */\nexport function once(el, type, handler) {\n\tel.addEventListener(type, function (event) {\n\t\thandler.call(this, event)\n\t\tel.removeEventListener(type, handler)\n\t})\n}\n\n/**\n * Return width of element with padding and margin\n * @param {Element} el\n * @returns {int}\n */\nexport function outerWidth(el) {\n\tconst style =  getComputedStyle(el),\n\t\tprops = ['marginLeft', 'marginRight', 'paddingLeft','paddingRight']\n\tlet width = 0\n\tfor (let prop of props) {\n\t\twidth += parseInt(style[prop]);\n\t}\n\treturn width\n}\n\n/**\n * Confirms email is saging\n * @param {string} email\n * @returns {bool}\n */\nexport function isSage(email) {\n\treturn email && email.trim() === 'sage'\n}\n\n// TODO: Refactor server time syncronisation\nlet cachedOffset;\nexport function serverTime() {\n\tconst d = Date.now();\n\tif (imports.isNode)\n\t\treturn d;\n\n\t// The offset is intialised as 0, so there is something to return, until\n\t// we get a propper number from the server.\n\tif (!cachedOffset)\n\t\tcachedOffset = imports.main.request('time:offset');\n\treturn d + cachedOffset;\n}\n\nexport function readable_dice(bit, dice) {\n\tlet inner;\n\tswitch (bit) {\n\t\tcase '#flip':\n\t\t\tinner = (dice[2] == 2).toString();\n\t\t\tbreak;\n\t\tcase '#8ball':\n\t\t\tinner = imports.hotConfig.EIGHT_BALL[dice[2] - 1];\n\t\t\tbreak;\n\t\tcase '#pyu':\n\t\tcase '#pcount':\n\t\tcase '#q':\n\t\t\tinner = dice[0];\n\t\t\tbreak;\n\t}\n\tif (inner !== undefined)\n\t\treturn escape(`${bit} (${inner})`);\n\tif (/^#sw/.test(bit))\n\t\treturn readableSyncwatch(dice[0]);\n\treturn readableRegularDice(bit, dice);\n}\n\nfunction readableSyncwatch(dice) {\n\tdice.class = 'embed';\n\treturn parseHTML\n\t\t`<syncwatch ${dice}>\n\t\t\tsyncwatch\n\t\t</syncwatch>`;\n}\n\nfunction readableRegularDice(bit, dice) {\n\tconst [max, bias, ...rolls] = dice\n\tbit += ' (';\n\tconst eq = rolls.length > 1 || bias;\n\tif (eq)\n\t\tbit += rolls.join(', ');\n\tif (bias)\n\t\tbit += (bias < 0 ? ' - ' + (-bias) : ' + ' + bias);\n\tlet sum = bias;\n\tfor (let roll of rolls) {\n\t\tsum += roll;\n\t}\n\treturn bit + (eq ? ' = ' : '') + sum + ')';\n}\n\nexport function pick_spoiler(metaIndex) {\n\tconst imgs = imports.config.SPOILER_IMAGES,\n\t\tn = imgs.length;\n\tlet i;\n\tif (metaIndex < 0)\n\t\ti = Math.floor(Math.random() * n);\n\telse\n\t\ti = metaIndex % n;\n\treturn {\n\t\tindex: imgs[i],\n\t\tnext: (i + 1) % n\n\t};\n}\n\nexport const thumbStyles = ['small', 'sharp', 'hide']\n\nexport function readable_filesize(size) {\n\t/* Dealt with it. */\n\tif (size < 1024)\n\t\treturn size + ' B';\n\tif (size < 1048576)\n\t\treturn Math.round(size / 1024) + ' KB';\n\tsize = Math.round(size / 104857.6).toString();\n\treturn size.slice(0, -1) + '.' + size.slice(-1) + ' MB';\n}\n\nexport function pad(n) {\n\treturn (n < 10 ? '0' : '') + n;\n}\n\n// Various UI-related links wrapped in []\nexport function action_link_html(href, name, id, cls) {\n\treturn parseHTML\n\t\t`<span class=\"act\">\n\t\t\t<a href=\"${href}\"\n\t\t\t\t${id && ` id=\"${id}\"`}\n\t\t\t\t${cls && ` class=\"${cls}\"`}\n\t\t\t>\n\t\t\t\t${name}\n\t\t\t</a>\n\t\t</span>`;\n}\n\n/**\n * Confirm last N posts to view setting matches bounds\n * @param {int} n\n * @returns {bool}\n */\nexport function resonableLastN(n) {\n\treturn Number.isInteger(n) && n <= 500\n}\n\nexport function parse_name(name) {\n\tvar tripcode = '', secure = '';\n\tvar hash = name.indexOf('#');\n\tif (hash >= 0) {\n\t\ttripcode = name.substr(hash + 1);\n\t\tname = name.substr(0, hash);\n\t\thash = tripcode.indexOf('#');\n\t\tif (hash >= 0) {\n\t\t\tsecure = escape(tripcode.substr(hash + 1));\n\t\t\ttripcode = tripcode.substr(0, hash);\n\t\t}\n\t\ttripcode = escape(tripcode);\n\t}\n\tname = name.trim().replace(imports.hotConfig.EXCLUDE_REGEXP, '');\n\treturn [\n\t\tname.substr(0, 100), tripcode.substr(0, 128),\n\t\tsecure.substr(0, 128)\n\t];\n}\n\n/**\n * Generate a random alphannumeric string of lower and upper case hexadecimal\n * characters\n * @param {int} len\t- String length\n * @returns {string}\n */\nexport function randomID(len) {\n\tlet id = ''\n\tfor (let i = 0; i < len; i++) {\n\t\tlet char = (Math.random() * 36).toString(36)[0]\n\t\tif (Math.random() < 0.5)\n\t\t\tchar = char.toUpperCase()\n\t\tid += char\n\t}\n\treturn id\n}\n\n/**\n * Template string tag function for HTML. Strips indentation and trailing\n * newlines. Based on https://gist.github.com/zenparsing/5dffde82d9acef19e43c\n * @param {*}\n * @returns {string}\n */\nexport function parseHTML(callSite) {\n\t// if arguments.length === 1\n\tif (typeof callSite === 'string') {\n\t\treturn formatHTML(callSite);\n\t}\n\n\t/*\n\t Slicing the arguments object is deoptimising, so we construct a new array\n\t instead.\n\t */\n\tconst len = arguments.length\n\tconst args = []\n\tfor (let i = 1; i < len; i++) {\n\t\targs[i - 1] = arguments[i]\n\t}\n\n\tif (typeof callSite === 'function') {\n\t\treturn formatHTML(callSite(args))\n\t}\n\n\tconst output = callSite\n\t\t.slice(0, len)\n\t\t.map((text, i) =>\n\t\t\targs[i - 1] + text)\n\t\t.join('')\n\n\treturn formatHTML(output)\n}\n\n/**\n * Strip indentation and remove empty lines from HTML string\n */\nfunction formatHTML(str) {\n\treturn str.replace(/\\s*\\n\\s*/g, '')\n}\n\n/**\n * Generate an HTML element attribute list\n * @param {Object} attrs\n * @returns {string}\n */\nexport function parseAtributes(attrs) {\n\tlet html = ''\n\tfor (let key in attrs) {\n\t\thtml += ' '\n\t\tconst val = attrs[key]\n\t\tif (val === true)\n\t\t\thtml += key\n\t\telse if (val || val === 0)\n\t\t\thtml += `${key}=\"${val}\"`\n\t}\n\treturn html\n}\n\n/**\n * Makes a ', ' seperated list out of on array of strings\n * @param {string[]} items\n * @returns {string}\n */\nexport function commaList(items) {\n\tlet html = ''\n\tfor (let item of items) {\n\t\t// Falsy value. Skip item.\n\t\tif (!item && item !== 0)\n\t\t\tcontinue\n\t\tif (html)\n\t\t\thtml += ', '\n\t\thtml += item\n\t}\n\treturn html\n}\n\n/**\n * Acertains client has the proper authorisation to perfrom task. This is only\n * for rendering. The same validation is performed server-side.\n * @param {string} action - Privilidged action to check permission for\n * @returns {bool}\n */\nexport function checkAuth(action) {\n\tconst cls = config.staff.classes[main.ident && main.ident.auth]\n    return cls && !!cls.rights[action]\n}\n"],"sourceRoot":"/source/"}