{"version":3,"sources":["worker/clients.js"],"names":["System","register","_export","_context","_classCallCheck","instance","Constructor","TypeError","randomID","WeakSetMap","message","extend","_createClass","byID","byPage","Client","setters","_common","_underscore","execute","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","self","onmessage","msg","this","port","ports","receive","bind","setState","data","id","undefined","value","url","unsetState","state","parseURL","board","thread","add","remove","href","match","lastN","_arr","_i","val","parseInt","close","disconnect","Error"],"mappings":"AAAA,YAAaA,QAAOC,UAAU,YAAY,cAAc,SAASC,EAAQC,GAAiF,QAASC,GAAgBC,EAASC,GAAa,KAAKD,YAAoBC,IAAc,KAAM,IAAIC,WAAU,qCAAjL,GAAIC,GAASC,EAAWC,EAAQC,EAAOC,EAAaC,EAAKC,EAAOC,CAAwJ,QAAQC,SAAS,SAASC,GAI7TT,EAAAS,EAAAT,SAAUC,EAAAQ,EAAAR,WAAYC,EAAAO,EAAAP,SAAA,SAAAQ,GACtBP,EAAAO,EAAAP,SAAAQ,QAAA,WAAAP,EAAA,WAAA,QAAAQ,GAAAC,EAAAC,GAAA,IAAA,GAAAC,GAAA,EAAAA,EAAAD,EAAAE,OAAAD,IAAA,CAAA,GAAAE,GAAAH,EAAAC,EAAAE,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAAC,OAAAC,eAAAT,EAAAI,EAAAM,IAAAN,IAAA,MAAA,UAAAnB,EAAA0B,EAAAC,GAAA,MAAAD,IAAAZ,EAAAd,EAAA4B,UAAAF,GAAAC,GAAAb,EAAAd,EAAA2B,GAAA3B,MAAAJ,EAAA,OAEKW,MAAOX,EAAA,OAAAW,GAAAX,EAAA,SACPY,EAAS,GAAIL,IAAJP,EAAA,SAAAY,GAItBqB,KAAKC,UAAY,SAAAC,GAAA,MAChB,IAAItB,GAAOsB,IAINtB,EAAA,WACL,QADKA,GACOsB,GAAKjC,EAAAkC,KADZvB,GACYuB,KACXC,KAAOF,EAAIG,MAAM,GADNF,KAEXC,KAAKH,UAAYE,KAAKG,QAAQC,KAAKJ,MAFxBA,KAGXK,SAASN,EAAIO,KAHF,IAMZC,GAAAC,MANY,GAQfD,GAAKrC,EAAS,SACNqC,IAAMhC,GATCyB,MAUXO,GAAKA,EAVMhC,EAWXgC,GAAMP,KA0CC,MArDb1B,GADKG,IAAAgB,IAAA,WAAAgB,MAAA,SAiBIC,GACRV,KAAKW,YADQ,IAEPC,GAAQZ,KAAKa,SAASH,EAFfrC,GAGN2B,KAAMY,EAHA,IAINE,GAAiBF,EAAjBE,MAAOC,EAAUH,EAAVG,MAJDvC,GAKNwC,IAAID,EAASA,EAASD,EAAOd,SALvBP,IAAA,aAAAgB,MAAA,WAUbjC,EAAOyC,OAAOjB,KAAKc,MAAOd,MADdxB,EAELyC,OAAOjB,KAAKe,OAAQf,SAFfP,IAAA,WAAAgB,MAAA,SAOJS,GAAM,IAAA,GACRN,IACLE,MAAOI,EAAKC,MAAM,uBAAuB,GACzCJ,OAAQG,EAAKC,MAAM,sCACnBC,MAAOF,EAAKC,MAAM,oBAJLE,GAMG,SAAU,SANbC,EAAA,EAMdA,EAAAD,EAAAnC,OAAAoC,IAAqC,CAAhC,GAAI7B,GAAA4B,EAAAC,GACFC,EAAMX,EAAMnB,EADkBmB,GAE9BnB,GAAO8B,EAAMC,SAASD,EAAI,IAAM,EAFvC,MAIOX,MAVOnB,IAAA,SAAAgB,MAAA,WAedT,KAAKW,aADGX,KAEHC,KAAKwB,cACHlD,GAAKyB,KAAKO,OAHTd,IAAA,UAAAgB,MAAA,SAODV,GACP,OAAQA,EAAIO,MACZ,IAAKlC,GAAQsD,WACZ1B,KAAKiB,QADN,MADA,SAKC,KAAM,IAAIU,OAAM,gCAAkC5B,EAAIO,WA5DnD7B","file":"worker/clients.js","sourcesContent":["/*\n Functions for sending and receiving messages from clients\n*/\n\nimport {randomID, WeakSetMap, message} from '../common'\nimport {extend} from 'underscore'\n\nexport const byID = {}\nexport const byPage = new WeakSetMap()\n\n// Establish a private communication channel and SW-side instance of tab. Only\n// these assingnment requests are sent through the global SW channel.\nself.onmessage = msg =>\n\tnew Client(msg)\n\n// Handles interctions with the client browser tabs. In an MVC sense, these\n// contain only the View part.\nclass Client {\n\tconstructor(msg) {\n\t\tthis.port = msg.ports[0]\n\t\tthis.port.onmessage = this.receive.bind(this)\n\t\tthis.setState(msg.data)\n\n\t\t// Dedup client ID\n\t\tlet id\n\t\tdo {\n\t\t\tid = randomID(8)\n\t\t} while (id in byID)\n\t\tthis.id = id\n\t\tbyID[id] = this\n\t}\n\n\t// Replace previous client state with new one parsed from the supplied URL,\n\t// assing to the client lookup map\n\tsetState(url) {\n\t\tthis.unsetState()\n\t\tconst state = this.parseURL(url)\n\t\textend(this, state)\n\t\tconst {board, thread} = state\n\t\tbyPage.add(thread ? thread : board, this)\n\t}\n\n\t// Remove client from client byPage map\n\tunsetState() {\n\t\tbyPage.remove(this.board, this)\n\t\tbyPage.remove(this.thread, this)\n\t}\n\n\t// Parse the client URL into a board name, thread number and last to display\n\t// post number setting\n\tparseURL(href) {\n\t\tconst state = {\n\t\t\tboard: href.match(/\\/([a-zA-Z0-9]+?)\\//)[1],\n\t\t\tthread: href.match(/\\/(\\d+)(:?#\\d+)?(?:[\\?&]\\w+=\\w+)*$/),\n\t\t\tlastN: href.match(/[\\?&]last=(\\d+)/)\n\t\t}\n\t\tfor (let key of ['thread', 'lastN']) {\n\t\t\tconst val = state[key]\n\t\t\tstate[key] = val ? parseInt(val[1]) : 0\n\t\t}\n\t\treturn state\n\t}\n\n\t// Remove the client's instance\n\tremove() {\n\t\tthis.unsetState()\n\t\tthis.port.close()\n\t\tdelete byID[this.id]\n\t}\n\n\t// Receive and parse messages from the browser tab\n\treceive(msg) {\n\t\tswitch (msg.data) {\n\t\tcase message.disconnect:\n\t\t\tthis.remove()\n\t\t\tbreak\n\t\tdefault:\n\t\t\tthrow new Error('Unknown client message type: ' + msg.data)\n\t\t}\n\t}\n}\n"],"sourceRoot":"/source/"}