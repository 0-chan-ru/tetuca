{"version":3,"sources":["memory.js"],"names":["System","register","_export","_context","_classCallCheck","instance","Constructor","TypeError","parseSet","set","val","undefined","JSON","parse","e","isObject","isEmpty","_size","_createClass","memories","Memory","setters","_vendorUnderscore","size","execute","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","window","addEventListener","_ref","newValue","cached","expiry","_this","this","read","setTimeout","purgeExpired","value","Math","floor","Date","now","localStorage","removeItem","getItem","purgeAll","setItem","stringify","writeAll","limit","expired","push","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err"],"mappings":"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","file":"memory.js","sourcesContent":["import {isObject, isEmpty, size} from '../vendor/underscore'\n\n// All instances of the Memory class\nconst memories = {}\n\n/**\n * Listen for storage events and update the stored value for exising memory\n * instances, if the key changes. These only fire, if the write happens in\n * another tab of the same origin.\n */\nwindow.addEventListener('storage', ({key, newValue}) => {\n\tif (key in memories) {\n\t\tmemories[key].cached = parseSet(newValue)\n\t}\n})\n\n/**\n * Parse a stringified set\n * @param {string} set\n * @returns {Object}\n */\nfunction parseSet(set) {\n\tlet val\n\ttry {\n\t\tval = JSON.parse(set)\n\t}\n\tcatch(e) {}\n\treturn isObject(val) ? val : {}\n}\n\n/**\n * Self-expiring localStorage set manager\n */\nexport default class Memory {\n\t/**\n\t * Construct a new localStorage controller\n\t * @param {string} key - localStorage key\n\t * @param {int} expiry - Entry lifetime in days\n\t */\n\tconstructor(key, expiry) {\n\t\tthis.key = key\n\t\tmemories[key] = this\n\t\tthis.expiry = expiry\n\n\t\t// Read the initial value\n\t\tthis.cached = this.read()\n\n\t\t// Purge old entries on start\n\t\tsetTimeout(() => this.purgeExpired(), 5000)\n\t}\n\n\t/**\n\t * Return current time in seconds\n\t * @returns {int}\n\t */\n\tnow() {\n\t\treturn Math.floor(Date.now() / 1000)\n\t}\n\n\t/**\n\t * Clear the stored set\n\t */\n\tpurgeAll() {\n\t\tlocalStorage.removeItem(this.key)\n\t}\n\n\t/**\n\t * Read and parse the stringified set from localStorage\n\t * @returns {Object}\n\t */\n\tread() {\n\t\tconst key = localStorage.getItem(this.key)\n\t\tif (!key) {\n\t\t\treturn {}\n\t\t}\n\t\treturn parseSet(key)\n\t}\n\n\t/**\n\t * Return, if the given key exists in the set\n\t * @param {string} key\n\t * @returns {bool}\n\t */\n\thas(key) {\n\t    return !!this.cached[key]\n\t}\n\n\t/**\n\t * Replace the existing set, if any, with the suplied one\n\t * @param {Object} set\n\t */\n\twriteAll(set) {\n\t\tif (isEmpty(set)) {\n\t\t\treturn this.purgeAll()\n\t\t}\n\t\tlocalStorage.setItem(this.key, JSON.stringify(set))\n\t}\n\n\t/**\n\t * Write a single key to the stored set\n\t * @returns {int} - Size of new set\n\t */\n\twrite(key) {\n\t\t// When performing writes, best fetch everything, rather than rely on\n\t\t// events for browser tab cache synchronisation. Browser backround tab\n\t\t// optimisation might fuck us over.\n\t\tthis.cached = this.read()\n\t\tthis.cached[key] = this.now()\n\t\tthis.writeAll(this.cached)\n\t\treturn size(this.cached) // Return number of items\n\t}\n\n\t/**\n\t * Return the current size of the stored Set\n\t */\n\tsize() {\n\t\treturn size(this.cached)\n\t}\n\n\t/**\n\t * Delete expired entries from set and write to localStorage\n\t */\n\tpurgeExpired() {\n\t\tthis.cached = this.read()\n\t\tconst now = this.now(),\n\t\t\tlimit = 86400 * this.expiry,\n\t\t\texpired = []\n\t\tfor (let key in this.cached) {\n\t\t\tif (now > this.cached[key] + limit) {\n\t\t\t\texpired.push(key)\n\t\t\t}\n\t\t}\n\t\tif (!expired.length) {\n\t\t\treturn\n\t\t}\n\t\tfor (let key of expired) {\n\t\t    delete this.cached[key]\n\t\t}\n\t\tthis.writeAll(this.cached)\n\t}\n}\n"],"sourceRoot":"/source/"}