{"version":3,"sources":["common/oneesama.js"],"names":["System","register","_export","_classCallCheck","instance","Constructor","TypeError","_taggedTemplateLiteral","strings","raw","Object","freeze","defineProperties","value","_createClass","_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","_templateObject12","_templateObject13","_templateObject14","_templateObject15","_templateObject16","_templateObject17","_templateObject18","_templateObject19","_templateObject20","_templateObject21","_","index","util","_imports","config","pad","parseHTML","break_re","ref_re","searchBase","OneeSama","setters","execute","target","props","i","length","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","require","imports","RegExp","WORD_LENGTH_LIMIT","String","replace","board","link_targets","models","class","url","type","symbol","base","l","model","args","this","extend","hooks","name","func","hs","indexOf","push","param","call","data","cls","arguments","undefined","setModel","locked","editing","num","monogatari","state","image","mod","body","backlinks","banned","op","large","header","modInfo","subject","escape","time","postNavigation","full","expansionLinks","html","auth","email","href","encodeURI","resolveName","mnemonic","trip","lang","anon","hotConfig","staff_aliases","_time","title","text","readable","readableTime","rTime","relativeTime","Date","now","d","getDate","year","getMonth","getFullYear","week","getDay","getHours","getMinutes","seconds","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","getUTCHours","getUTCMinutes","getUTCSeconds","then","Math","floor","isFuture","just_now","divide","unit","ago","unit_year","mnem","post","postURL","expand","lastN","last","info","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","action","formatLog","err","banMessage","_body","fragment","frag","_this","lines","split","line","startsWith","forEach","word","parseWord","bit","ref","match","redString","parseHashes","dest","linkClass","test","slice","link","m","tamashii","parseInt","attrs","rel","dice","linkify","bits","dice_re","parse_dice","queueRoll","readable_dice","eLinkify","padWord","len","escaped","links","postRef","reveal","showThumb","thumbStyle","figcaption","IMAGE_HATS","thumbnail","list","commaList","audio","readable_filesize","size","dims","apng","hiddenToggle","imageSearch","imageLink","ext","imageURl","thumbPath","parts","mid","thumb","imagePaths","_imgPaths","mediaURL","MEDIA_URL","src","spoil","imgnm","fullName","tooLong","SECONDARY_MEDIA_URL","download","paths","width","height","thumbWidth","thumbHeight","spoiler","spoilToggle","sp","spoilerInfo","autoGif","linkAttrs","imgAttrs","style","highDef","desc_html","inner","innerCls","asideLink","module","exports"],"mappings":"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","file":"common/oneesama.js","sourcesContent":["/*\n Rendering singleton both server and client-side\n */\n\nconst _ = require('underscore'),\n\tindex = require('./index'),\n\tutil = require('./util'),\n\t{config} = imports,\n\t{pad, parseHTML} = util;\n\nconst break_re = new RegExp(\"(\\\\S{\" + index.WORD_LENGTH_LIMIT + \"})\");\n\n// `>>>/${link}/` referal links and embeds\nconst ref_re = (function () {\n\tlet ref_re = String.raw`>>(\\d+|>\\/watch\\?v=[\\w-]{11}(?:#t=[\\dhms]{1,9})?\n\t\t|>\\/soundcloud\\/[\\w-]{1,40}\\/[\\w-]{1,80}|>\\/pastebin\\/\\w+`\n\t\t\t.replace(/[\\n\\t]+/gm, '');\n\n\tfor (let board in config.link_targets) {\n\t\tref_re += String.raw`|>\\/${board}\\/(?:\\w+\\/?)?`;\n\t}\n\n\tref_re += ')';\n\treturn new RegExp(ref_re);\n})();\n\n// Generate the static part of image search links\nconst searchBase = (function() {\n\tconst models = [\n\t\t{\n\t\t\tclass: 'google',\n\t\t\turl: 'https://www.google.com/searchbyimage?image_url=',\n\t\t\ttype: 'thumb',\n\t\t\tsymbol: 'G'\n\t\t},\n\t\t{\n\t\t\tclass: 'iqdb',\n\t\t\turl: 'http://iqdb.org/?url=',\n\t\t\ttype: 'thumb',\n\t\t\tsymbol: 'Iq'\n\t\t},\n\t\t{\n\t\t\tclass: 'saucenao',\n\t\t\turl: 'http://saucenao.com/search.php?db=999&url=',\n\t\t\ttype: 'thumb',\n\t\t\tsymbol: 'Sn'\n\t\t},\n\t\t{\n\t\t\tclass: 'desustorage',\n\t\t\ttype: 'MD5',\n\t\t\turl: 'https://desustorage.org/_/search/image/',\n\t\t\tsymbol: 'Ds'\n\t\t},\n\t\t{\n\t\t\tclass: 'exhentai',\n\t\t\ttype: 'SHA1',\n\t\t\turl: 'http://exhentai.org/?fs_similar=1&fs_exp=1&f_shash=',\n\t\t\tsymbol: 'Ex'\n\t\t}\n\t];\n\n\tlet base = [];\n\tfor (let i = 0, l = models.length; i < l; i++) {\n\t\tlet model = models[i];\n\t\tbase[i] = [\n\t\t\tparseHTML\n\t\t\t`<a target=\"_blank\"\n\t\t\t\t\trel=\"nofollow\"\n\t\t\t\t\tclass=\"imageSearch ${model.class}\"\n\t\t\t\t\thref=\"${model.url}`,\n\t\t\tmodel.type,\n\t\t\t`\">${model.symbol}</a>`\n\t\t];\n\t}\n\treturn base;\n})();\n\nclass OneeSama {\n\tconstructor(args) {\n\t\t_.extend(this, args);\n\t\tthis.hooks = {};\n\t}\n\thook(name, func) {\n\t\tlet hs = this.hooks[name];\n\t\tif (!hs)\n\t\t\tthis.hooks[name] = [func];\n\t\telse if (hs.indexOf(func) < 0)\n\t\t\ths.push(func);\n\t}\n\ttrigger(name, param) {\n\t\tlet hs = this.hooks[name];\n\t\tif (!hs)\n\t\t\treturn;\n\t\tfor (var i = 0; i < hs.length; i++)\n\t\t\ths[i].call(this, param);\n\t}\n\t// Render OP\n\tsection(data, cls = '') {\n\t\tthis.setModel(data);\n\t\tif (data.locked)\n\t\t\tcls += ' locked';\n\t\tif (data.editing)\n\t\t\tcls += ' editing';\n\t\treturn parseHTML\n\t\t\t`<section id=\"p${data.num}\" class=\"${cls}\">\n\t\t\t\t<div class=\"background glass\">\n\t\t\t\t\t${this.monogatari(data)}\n\t\t\t\t\t<span class=\"omit\"></span>\n\t\t\t\t</div>\n\t\t\t</section>`;\n\t}\n\t// Render reply\n\tarticle(data) {\n\t\tthis.setModel(data);\n\t\tlet cls = 'glass';\n\t\tif (data.editing)\n\t\t\tcls += ' editing';\n\t\treturn parseHTML\n\t\t\t`<article id=\"p${data.num}\" class=\"${cls}\">\n\t\t\t\t${this.monogatari(data)}\n\t\t\t</article>`;\n\t}\n\t// Set the current model of the posts we are parsing\n\tsetModel(model) {\n\t\tthis.model = model;\n\n\t\t// Initial post state [new_line, no_qoute, no_spoiler, no_dice]\n\t\tthis.state = [0, 0, 0, 0];\n\t\treturn this;\n\t}\n\t// Render common post components\n\tmonogatari(data) {\n\t\tconst {image, mod, body, backlinks, banned} = data;\n\n\t\t// Larger thumbnails for thread images\n\t\tif (image && !data.op)\n\t\t\timage.large = true;\n\n\t\treturn parseHTML\n\t\t\t`${this.header(data)}\n\t\t\t${image && this.image(image)}\n\t\t\t<div class=\"container\">\n\t\t\t\t${mod && this.modInfo(mod)}\n\t\t\t\t<blockquote>\n\t\t\t\t\t${this.body(body)}\n\t\t\t\t</blockquote>\n\t\t\t\t<small>\n\t\t\t\t\t${this.backlinks(backlinks)}\n\t\t\t\t</small>\n\t\t\t\t${banned && this.banned()}\n\t\t\t</div>`;\n\t}\n\theader(data) {\n\t\treturn parseHTML\n\t\t\t`<header>\n\t\t\t\t<input type=\"checkbox\" class=\"postCheckbox\">\n\t\t\t\t${data.subject && `<h3>「${_.escape(data.subject)}」</h3>`}\n\t\t\t\t${this.name(data)}\n\t\t\t\t${this.time(data.time)}\n\t\t\t\t${this.postNavigation(data)}\n\t\t\t\t${!this.full && !data.op && this.expansionLinks(data.num)}\n\t\t\t</header>\n\t\t\t<span class=\"oi control\" data-glyph=\"chevron-bottom\"></span>`;\n\t}\n\tname(data) {\n\t\tlet html = '<b class=\"name';\n\t\tconst {auth, email} = data;\n\t\tif (auth)\n\t\t\thtml += ` ${auth === 'admin' ? 'admin' : 'moderator'}`;\n\t\thtml += '\">';\n\t\tif (email) {\n\t\t\thtml += parseHTML `<a ${{\n\t\t\t\tclass: 'email',\n\t\t\t\thref: 'mailto:' + encodeURI(email),\n\t\t\t\ttarget: 'blank'\n\t\t\t}}>`;\n\t\t}\n\t\thtml += this.resolveName(data);\n\t\tif (email)\n\t\t\thtml += '</a>';\n\t\thtml += '</b>';\n\t\tif (data.mnemonic)\n\t\t\thtml += ' ' + this.mnemonic(data.mnemonic);\n\t\treturn html;\n\t}\n\tresolveName(data) {\n\t\tlet html = '';\n\t\tconst {trip, name, auth} = data;\n\t\tif (name || !trip) {\n\t\t\tif (name)\n\t\t\t\thtml += _.escape(name);\n\t\t\telse\n\t\t\t\thtml += this.lang.anon;\n\t\t\tif(trip)\n\t\t\t\thtml += ' ';\n\t\t}\n\t\tif (trip)\n\t\t\thtml += `<code>${_.escape(trip)}</code>`;\n\t\tif (auth)\n\t\t\thtml += ` ## ${imports.hotConfig.staff_aliases[auth] || auth}`;\n\t\treturn html;\n\t}\n\ttime(time) {\n\t\t// Format according to client's relative post timestamp setting\n\t\tlet title, text;\n\t\tconst readable = this.readableTime(time);\n\t\tif (this.rTime) {\n\t\t\ttitle = readable;\n\t\t\ttext = this.relativeTime(time, Date.now());\n\t\t}\n\t\treturn parseHTML\n\t\t\t`<time title=\"${title}\">\n\t\t\t\t${text || readable}\n\t\t\t</time>`;\n\t}\n\treadableTime(time) {\n\t\tlet d = new Date(time);\n\t\treturn pad(d.getDate()) + ' '\n\t\t\t+ this.lang.year[d.getMonth()] + ' '\n\t\t\t+ d.getFullYear()\n\t\t\t+ `(${this.lang.week[d.getDay()]})`\n\t\t\t+`${pad(d.getHours())}:${pad(d.getMinutes())}`;\n\t}\n\treadableUTCTime(d, seconds) {\n\t\tlet html = pad(d.getUTCDate()) + ' '\n\t\t\t+ this.lang.year[d.getUTCMonth()] + ' '\n\t\t\t+ d.getUTCFullYear()\n\t\t\t+ `(${this.lang.week[d.getUTCDay()]})`\n\t\t\t+`${pad(d.getUTCHours())}:${pad(d.getUTCMinutes())}`;\n\t\tif (seconds)\n\t\t\thtml += `:${pad(d.getUTCSeconds())}`;\n\t\thtml += ' UTC';\n\t\treturn html;\n\t}\n\t// Readable elapsed time since post\n\trelativeTime(then, now) {\n\t\tlet time = Math.floor((now - then) / 60000),\n\t\t\tisFuture;\n\t\tif (time < 1) {\n\t\t\t// Assume to be client clock imprecission\n\t\t\tif (time > -5)\n\t\t\t\treturn this.lang.just_now;\n\t\t\telse {\n\t\t\t\tisFuture = true;\n\t\t\t\ttime = -time;\n\t\t\t}\n\t\t}\n\n\t\tconst divide = [60, 24, 30, 12],\n\t\t\tunit = ['minute', 'hour', 'day', 'month'];\n\t\tfor (let i = 0; i < divide.length; i++) {\n\t\t\tif (time < divide[i])\n\t\t\t\treturn this.lang.ago(time, this.lang['unit_' + unit[i]],\n\t\t\t\t\tisFuture);\n\t\t\ttime = Math.floor(time / divide[i]);\n\t\t}\n\n\t\treturn this.lang.ago(time, this.lang.unit_year, isFuture);\n\t}\n\tmnemonic(mnem) {\n\t\treturn `<b class=\"mod addr\">${mnem}</b>`;\n\t}\n\tpostNavigation(post) {\n\t\tconst num = post.num,\n\t\t\top = post.op;\n\t\treturn parseHTML\n\t\t\t`<nav>\n\t\t\t\t<a href=\"${this.postURL(num, op)}\" class=\"history\">\n\t\t\t\t\tNo.\n\t\t\t\t</a>\n\t\t\t\t<a href=\"${this.postURL(num, op)}\" class=\"quote\">\n\t\t\t\t\t${num}\n\t\t\t\t</a>\n\t\t\t</nav>`;\n\t}\n\tpostURL(num, op) {\n\t\top = op || num;\n\t\treturn `${this.op == op ? '' : op}#${num}`;\n\t}\n\texpansionLinks(num) {\n\t\treturn parseHTML\n\t\t\t`<span class=\"act expansionLinks\">\n\t\t\t\t<a href=\"${num}\" class=\"history\">\n\t\t\t\t\t${this.lang.expand}\n\t\t\t\t</a>\n\t\t\t\t] [\n\t\t\t\t<a href=\"${num}?last=${this.lastN}\" class=\"history\">\n\t\t\t\t\t${this.lang.last} ${this.lastN}\n\t\t\t\t</a>\n\t\t\t</span>`;\n\t}\n\t// Append moderation information. Only exposed to authenticated staff.\n\tmodInfo(info) {\n\t\tlet html = '<b class=\"modLog admin\">';\n\t\tfor (let action of info) {\n\t\t\thtml += `${this.lang.mod.formatLog(action)}<br>`;\n\t\t}\n\t\thtml += '</b>';\n\t\treturn html;\n\t}\n\tbanned() {\n\t\treturn `<b class=\"admin banMessage\">${this.lang.mod.banMessage}</b>`;\n\t}\n\t// Render full blockqoute contents\n\tbody(body) {\n\t\tlet html = this.fragment(body);\n\t\tif (this.state[1])\n\t\t\thtml += '</em>';\n\t\tif (this.state[2])\n\t\t\thtml += '</del>';\n\t\treturn html;\n\t}\n\t// Parse commited blockqoute fragment\n\tfragment(frag) {\n\t\tconst lines = frag.split('\\n'),\n\t\t\t{state} = this;\n\t\tlet html = '';\n\t\tfor (let i = 0; i < lines.length; i++) {\n\t\t\t// Start a new line\n\t\t\tif (state[0] && i % 2) {\n\t\t\t\t// Close qoute\n\t\t\t\tif (state[1] % 2) {\n\t\t\t\t\thtml += '</em>';\n\t\t\t\t\tstate[1]++;\n\t\t\t\t}\n\t\t\t\thtml += '<br>';\n\t\t\t\tstate[0] = 0;\n\t\t\t}\n\n\t\t\t// Quote or line starts with link/embed\n\t\t\tlet line = lines[i];\n\t\t\tif (!state[0] && line.startsWith('>')) {\n\t\t\t\thtml += '<em>';\n\t\t\t\tstate[1]++;\n\t\t\t}\n\n\t\t\t// Bodies may be empty\n\t\t\tif (frag) {\n\t\t\t\tline.split(' ').forEach(word => html += this.parseWord(word));\n\t\t\t\tstate[0] = 1;\n\t\t\t}\n\t\t}\n\t\treturn html;\n\t}\n\tparseWord(word) {\n\t\tconst split = word.split(/\\[\\/?spoiler]/i);\n\t\tlet html = '';\n\t\tfor (let i = 0; i < split.length; i++) {\n\t\t\t// Insert spoiler tags\n\t\t\tif (i % 2) {\n\t\t\t\thtml += `<${this.state[2] % 2 ? '/' : ''}del>`;\n\n\t\t\t\t// Callback  needs to be executed with the curent state for\n\t\t\t\t// live client-side appends\n\t\t\t\tthis.state[2]++;\n\t\t\t}\n\t\t\tlet bit = split[i];\n\t\t\tconst ref = bit.match(ref_re);\n\t\t\tif (ref) {\n\t\t\t\thtml += this.redString(ref[1]);\n\t\t\t\tbit = bit.replace(ref_re, '');\n\t\t\t}\n\t\t\thtml += this.parseHashes(bit);\n\t\t}\n\t\treturn html;\n\t}\n\t// Resolve internal and external URL references\n\tredString(ref) {\n\t\tlet dest, linkClass;\n\t\tif (/^>\\/watch/.test(ref)) {\n\t\t\tdest = 'https://www.youtube.com/' + ref.slice(2);\n\t\t\tlinkClass = 'embed watch';\n\t\t}\n\t\telse if (/^>\\/soundcloud/.test(ref)) {\n\t\t\tdest = 'https://soundcloud.com/' + ref.slice(13);\n\t\t\tlinkClass = 'embed soundcloud';\n\t\t}\n\t\telse if (/^>\\/pastebin/.test(ref)) {\n\t\t\tdest = 'https://pastebin.com/' + ref.slice(11);\n\t\t\tlinkClass = 'embed pastebin';\n\t\t}\n\n\t\t// Linkify other `>>>/${link}/` URLs\n\t\tfor (let link in config.link_targets) {\n\t\t\tconst m = ref.match(new RegExp(String\n\t\t\t\t.raw`^>\\/(${link})\\/(\\w+\\/?)?`));\n\t\t\tif (!m)\n\t\t\t\tcontinue;\n\t\t\tdest = config.link_targets[link];\n\t\t\tif (m[2])\n\t\t\t\tdest += m[2];\n\t\t\tbreak;\n\t\t}\n\n\t\tif (!dest)\n\t\t\treturn this.tamashii(parseInt(ref, 10));\n\n\t\tconst attrs = {\n\t\t\thref: encodeURI(dest),\n\t\t\ttarget: '_blank',\n\t\t\trel: 'nofollow',\n\t\t\tclass: linkClass\n\t\t};\n\t\treturn parseHTML\n\t\t\t`<a ${attrs}>\n\t\t\t\t>>${_.escape(ref)}\n\t\t\t</a>`;\n\t}\n\t// Render hash commands\n\tparseHashes(text) {\n\t\tif (!this.model.dice)\n\t\t\treturn this.linkify(text);\n\n\t\tlet html = '';\n\t\tconst bits = text.split(util.dice_re);\n\t\tfor (let i = 0; i < bits.length; i++) {\n\t\t\tconst bit = bits[i];\n\t\t\tif (!(i % 2) || !util.parse_dice(bit))\n\t\t\t\thtml += this.linkify(bit);\n\t\t\telse if (this.queueRoll)\n\t\t\t\tthis.queueRoll(bit);\n\t\t\telse {\n\t\t\t\tif (this.state[0])\n\t\t\t\t\thtml += ' ';\n\t\t\t\tconst dice = this.model.dice[this.state[3]++];\n\t\t\t\thtml += `<strong>${util.readable_dice(bit, dice)}</strong>`;\n\t\t\t}\n\t\t}\n\t\treturn html;\n\t}\n\t// Render external URLs as links\n\tlinkify(text) {\n\t\t// Disabled in client options\n\t\tif (!this.eLinkify)\n\t\t\treturn this.padWord(_.escape(text));\n\n\t\tlet html = '';\n\t\tconst bits = text.split(/(https?:\\/\\/[^\\s\"<>]*[^\\s\"<>'.,!?:;])/);\n\t\tfor (let i = 0, len = bits.length; i < len; i++) {\n\t\t\tlet escaped = _.escape(bits[i]);\n\t\t\tif (i % 2) {\n\t\t\t\thtml += parseHTML\n\t\t\t\t\t`<a href=\"${escaped}\" rel=\"nofollow\" target=\"_blank\">\n\t\t\t\t\t\t${this.padWord(escaped)}\n\t\t\t\t\t</a>`;\n\t\t\t}\n\t\t\telse if (escaped)\n\t\t\t\thtml += this.padWord(escaped);\n\t\t}\n\t\treturn html;\n\t}\n\tpadWord(word) {\n\t\tif (this.state[0])\n\t\t\tword = ' ' + word;\n\t\treturn word;\n\t}\n\tbacklinks(links) {\n\t\tif (!links)\n\t\t\treturn '';\n\t\tlet html = '';\n\t\tfor (let num in links) {\n\t\t\tif (html)\n\t\t\t\thtml += ' ';\n\t\t\thtml += this.postRef(num, links[num]);\n\t\t}\n\t\treturn html;\n\t}\n\t// Central image rendering method\n\timage(data, reveal) {\n\t\tconst showThumb = this.thumbStyle !== 'hide' || reveal;\n\t\treturn parseHTML\n\t\t\t`<figure>\n\t\t\t\t${this.figcaption(data, reveal)}\n\t\t\t\t${showThumb && config.IMAGE_HATS && '<span class=\"hat\"></span>'}\n\t\t\t\t${showThumb && this.thumbnail(data)}\n\t\t\t</figure>`;\n\t}\n\t// Image header\n\tfigcaption(data, reveal) {\n\t\tconst list = util.commaList([\n\t\t\tdata.audio && '\\u266B',\n\t\t\tdata.length,\n\t\t\tutil.readable_filesize(data.size),\n\t\t\t`${data.dims[0]}x${data.dims[1]}`,\n\t\t\tdata.apng && 'APNG'\n\t\t]);\n\t\treturn parseHTML\n\t\t\t`<figcaption>\n\t\t\t\t${this.thumbStyle === 'hide' && this.hiddenToggle(reveal)}\n\t\t\t\t${this.imageSearch(data)}\n\t\t\t\t<span>\n\t\t\t\t\t(${list})\n\t\t\t\t</span>\n\t\t\t\t${this.imageLink(data)}\n\t\t\t</figcaption>`;\n\t}\n\thiddenToggle(reveal) {\n\t\treturn parseHTML\n\t\t\t`<a class=\"imageToggle\">\n\t\t\t\t[${this.lang[reveal ? 'hide' : 'show']}]\n\t\t\t</a>`;\n\t}\n\timageSearch(data) {\n\t\tlet html = '';\n\t\tlet base = searchBase;\n\t\t// Only render google for PDFs and MP3s\n\t\tif (['.pdf', '.mp3'].indexOf(data.ext) > -1)\n\t\t\tbase = [base[0]];\n\t\t// Only use HTTP for thumbnail image search, because IQDB and\n\t\t// Saucenao can't into certain SSL cyphers\n\t\tconst imageURl = this.thumbPath(data)\n\t\tfor (let i = 0, l = base.length; i < l; i++) {\n\t\t\tlet parts = base[i];\n\t\t\thtml += parts[0]\n\t\t\t\t+ encodeURI(parts[1] !== 'thumb' ?  data[parts[1]] : imageURl)\n\t\t\t\t+ parts[2];\n\t\t}\n\n\t\treturn html;\n\t}\n\t// Get thumbnail path, even if no thumbnail generated\n\tthumbPath(data, mid) {\n\t\tlet type = 'thumb';\n\t\tif (mid && data.mid)\n\t\t\ttype = 'mid';\n\t\telse if (!data.thumb)\n\t\t\ttype = 'src';\n\n\t\treturn this.imagePaths()[type] + data[type];\n\t}\n\timagePaths() {\n\t\tif (!this._imgPaths) {\n\t\t\tconst mediaURL = config.MEDIA_URL;\n\t\t\tthis._imgPaths = {\n\t\t\t\tsrc: mediaURL + 'src/',\n\t\t\t\tthumb: mediaURL + 'thumb/',\n\t\t\t\tmid: mediaURL + 'mid/',\n\t\t\t\tspoil: mediaURL + 'spoil/spoiler'\n\t\t\t};\n\t\t}\n\t\treturn this._imgPaths;\n\t}\n\timageLink(data) {\n\t\tlet name = '',\n\t\t\timgnm = data.imgnm;\n\t\tconst m = imgnm.match(/^(.*)\\.\\w{3,4}$/);\n\t\tif (m)\n\t\t\tname = m[1];\n\t\tconst fullName = _.escape(imgnm),\n\t\t\ttooLong = name.length >= 38;\n\t\tif (tooLong)\n\t\t\timgnm = _.escape(name.slice(0, 30))\n\t\t\t\t+ '(&hellip;)'\n\t\t\t\t+ _.escape(data.ext);\n\t\tconst attrs = {\n\t\t\thref: `${config.SECONDARY_MEDIA_URL}src/${data.src}`,\n\t\t\trel: 'nofollow',\n\t\t\tdownload: fullName\n\t\t};\n\t\tif (tooLong)\n\t\t\tattrs.title = fullName;\n\n\t\treturn parseHTML\n\t\t\t`<a ${attrs}>\n\t\t\t\t${imgnm}\n\t\t\t</a>`;\n\t}\n\tthumbnail(data, href) {\n\t\tconst paths = this.imagePaths(),\n\t\t\tdims = data.dims;\n\t\tlet src = paths.src + (data.src),\n\t\t\tthumb,\n\t\t\twidth = dims[0],\n\t\t\theight = dims[1],\n\t\t\tthumbWidth = dims[2],\n\t\t\tthumbHeight = dims[3];\n\n\t\t// Spoilered and spoilers enabled\n\t\tif (data.spoiler && this.spoilToggle) {\n\t\t\tlet sp = this.spoilerInfo(data);\n\t\t\tthumb = sp.thumb;\n\t\t\tthumbWidth = sp.dims[0];\n\t\t\tthumbHeight = sp.dims[1];\n\t\t}\n\t\t// Animated GIF thumbnails\n\t\telse if (data.ext === '.gif' && this.autoGif)\n\t\t\tthumb = src;\n\t\telse\n\t\t\tthumb = this.thumbPath(data, this.thumbStyle !== 'small');\n\n\t\t// Source image smaller than thumbnail and other fallbacks\n\t\tif (!thumbWidth) {\n\t\t\tthumbWidth = width;\n\t\t\tthumbHeight = height;\n\t\t}\n\n\t\tlet linkAttrs = {\n\t\t\ttarget: '_blank',\n\t\t\trel: 'nofollow',\n\t\t\thref: href || src\n\t\t};\n\t\tlet imgAttrs = {\n\t\t\tsrc: thumb,\n\t\t\twidth: thumbWidth,\n\t\t\theight: thumbHeight\n\t\t};\n\t\t// Catalog pages\n\t\tif (href) {\n\t\t\t// Handle the thumbnails with the HTML5 History controller\n\t\t\tlinkAttrs.class = 'history';\n\t\t\t// No image hover previews\n\t\t\timgAttrs.class = 'expanded';\n\t\t\tif(this.thumbStyle == 'hide')\n\t\t\t\timgAttrs.style= 'display: none';\n\t\t}\n\n\t\treturn parseHTML\n\t\t\t`<a ${linkAttrs}>\n\t\t\t\t<img ${imgAttrs}>\n\t\t\t</a>`\n\t}\n\tspoilerInfo(data) {\n\t\tlet highDef = data.large || this.thumbStyle !== 'small';\n\t\treturn {\n\t\t\tthumb: parseHTML\n\t\t\t\t`${this.imagePaths().spoil}${highDef && 's'}${data.spoiler}.png`,\n\t\t\tdims: config[data.large ? 'THUMB_DIMENSIONS' : 'PINKY_DIMENSIONS']\n\t\t};\n\t}\n\tpostRef(num, op, desc_html) {\n\t\tlet ref = '&gt;&gt;' + num;\n\t\tif (desc_html)\n\t\t\tref += ' ' + desc_html;\n\t\tif (this.op && this.op != op)\n\t\t\tref += ' \\u27a1';\n\t\telse if (num == op && this.op == op)\n\t\t\tref += ' (OP)';\n\t\treturn `<a href=\"${this.postURL(num, op)}\" class=\"history\">${ref}</a>`;\n\t}\n\tasideLink(inner, href, cls, innerCls) {\n\t\treturn parseHTML\n\t\t\t`<aside class=\"act glass ${cls}\">\n\t\t\t\t<a ${href && `href=\"${href}\"`}\n\t\t\t\t\t${innerCls && ` class=\"${innerCls}\"`}\n\t\t\t\t>\n\t\t\t\t\t${this.lang[inner] || inner}\n\t\t\t\t</a>\n\t\t\t</aside>`\n\t}\n\treplyBox() {\n\t\treturn this.asideLink('reply', null, 'posting');\n\t}\n\tnewThreadBox() {\n\t\treturn this.asideLink('newThread', null, 'posting');\n\t}\n}\nmodule.exports = OneeSama;\n"],"sourceRoot":"/source/"}