{"version":3,"sources":["options.js"],"names":["System","register","_export","extend","each","find","Backbone","defer","ModalView","once","opts","render","options","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","spec","setters","_underscore","_backbone","_main","_modal","_util","_opts","_render","execute","localStorage","removeItem","Model","undefined","Symbol","iterator","next","done","value","OptionModel","err","OptionsView"],"mappings":"AAAA,YAAaA,QAAOC,UAAU,aAAa,WAAW,OAAO,WAAW,UAAU,SAAS,YAAY,SAASC,GAAS,GAAIC,GAAOC,EAAKC,EAAKC,EAASC,EAAMC,EAAUC,EAAKC,EAAKC,EAAOC,EAAQC,EAA0BC,EAAkBC,EAAeC,EAAUC,EAAMC,CAAK,QAAQC,SAAS,SAASC,GAAajB,EAAOiB,EAAYjB,OAAOC,EAAKgB,EAAYhB,KAAKC,EAAKe,EAAYf,MAAO,SAASgB,GAAWf,EAASe,GAAY,SAASC,GAAOf,EAAMe,EAAMf,OAAQ,SAASgB,GAAQf,EAAUe,EAAAA,YAAiB,SAASC,GAAOf,EAAKe,EAAMf,MAAO,SAASgB,GAAOf,EAAKe,EAAAA,YAAgB,SAASC,GAASf,EAAOe,EAAAA,aAAmBC,QAAQ,WAAWC,aAAaC,WAAW,WAAWjB,EAAQ,GAAIN,GAASwB,MAAQ5B,EAAQ,UAAUU,GAASC,GAA0B,EAAKC,GAAkB,EAAMC,EAAegB,MAAU,KAAI,IAAIf,EAmBhyBN,EAAIsB,OAAAC,cAAApB,GAAAI,EAAAD,EAAAkB,QAAAC,MAAAtB,GAAA,EAAAK,EAAAD,EAAAmB,MAAA,GAAAC,aAAAnB,GAAA,MAAAoB,GAAAxB,GAAA,EAAAC,EAAAuB,EAAA,QAAA,KAAAzB,GAAAG,EAAAA,WAAAA,EAAAA,YAAA,QAAA,GAAAF,EAAA,KAAAC,IAAAR,EAAA,WAAA,MAAA,IAAAgC","file":"options.js","sourcesContent":["/*\n * Houses both the actual options controler and the options panel renderring\n * logic\n */\n\nimport {extend, each, find} from 'underscore'\nimport * as Backbone from 'backbone'\nimport {defer} from 'main'\nimport ModalView from '../modal'\nimport {once} from '../util'\nimport opts from './opts'\nimport render from './render'\n\n// Delete legacy options localStorage entry, if any\nlocalStorage.removeItem(\"options\")\nconst options = new Backbone.Model()\nexport default options\n\n// Create and option model for each object in the array\nfor (let spec of opts) {\n\tnew OptionModel(spec)\n}\n\n// Expensive comutation and not emediatly needed. Put off till later.\ndefer(() => new OptionsView())\n"],"sourceRoot":"/source/"}