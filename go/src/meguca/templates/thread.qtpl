{% import "strconv" %}
{% import "meguca/lang" %}
{% import "meguca/common" %}
{% import "meguca/config" %}

{% func renderThread(postHTML []byte, id uint64,board string, ln lang.Pack) %}{% stripspace %}
	{% code conf := config.GetBoardConfigs(board) %}
	<form id="new-reply-form" action="/createReply" method="post" enctype="multipart/form-data" class="top-margin hidden">
		<input name="board" type="text" value="{%s= board %}" hidden>
		<input name="op" type="text" value="{%s= strconv.FormatUint(id, 10) %}" hidden>
		{%= noscriptPostCreationFields(ln) %}
		{% if !conf.TextOnly %}
			{%= uploadForm(ln.Common.Posts) %}
		{% endif %}
		{%= captcha(ln.UI) %}
		{%= submit(true, ln.UI) %}
	</form>
	<span class="aside-container top-margin">
		<span class="act" id="top">
			<a href="#bottom">
				{%s= ln.UI["bottom"] %}
			</a>
		</span>
		<span class="act">
			<a href="." class="history">
				{%s= ln.UI["return"] %}
			</a>
		</span>
		<span class="act">
			<a href="catalog" class="history">
				{%s= ln.UI["catalog"] %}
			</a>
		</span>
		<span id="expand-images" class="act">
			<a>
				{%s= ln.Common.Posts["expandImages"] %}
			</a>
		</span>
		{%= hoverReveal("span", conf.Notice, ln.UI["showNotice"]) %}
		{%= hoverReveal("span", conf.Rules, ln.UI["rules"]) %}
	</span>
	<hr>
	{%z= postHTML %}
	<div id="bottom-spacer"></div>
	<aside class="act posting glass">
		<a>
			{%s= ln.UI["reply"] %}
		</a>
	</aside>
	<hr>
	<span class="aside-container">
		<span class="act" id="bottom">
			<a href="." class="history">
				{%s= ln.UI["return"] %}
			</a>
		</span>
		<span class="act">
			<a href="catalog" class="history">
				{%s= ln.UI["catalog"] %}
			</a>
		</span>
		<span class="act">
			<a href="#top">
				{%s= ln.UI["top"] %}
			</a>
		</span>
		<span class="act">
			<a href="?last=100" class="history reload">
				{%s= ln.Common.UI["last"] %}{% space %}100
			</a>
		</span>
		<span id="lock" style="visibility: hidden;">
			{%s= ln.UI["lockedToBottom"] %}
		</span>
	</span>
{% endstripspace %}{% endfunc %}

ThreadPosts renders the post content of a thread. Separate function to allow
caching of generated posts.
{% func ThreadPosts(t common.Thread, json []byte, omit, imageOmit int) %}{% stripspace %}
	<section id="thread-container">
		{% code root := config.Get().RootURL %}
		{% code post := common.StandalonePost{
			OP: t.ID,
			Post: t.Post,
		} %}
		{%= renderArticle(post, omit, imageOmit, t.Subject, root, false) %}
		{% for _, p := range t.Posts %}
			{% code post.Post = p %}
			{%= renderArticle(post, 0, 0, "", root, false) %}
		{% endfor %}
		<script id="post-data" type="application/json">
			{%z= json %}
		</script>
	</section>
	<script id="board-configs" type="application/json">
		{%z= config.GetBoardConfigs(t.Board).JSON %}
	</script>
{% endstripspace %}{% endfunc %}
