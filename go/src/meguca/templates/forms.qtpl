{% import "meguca/config" %}
{% import "meguca/lang" %}

OwnedBoard renders a form for selecting one of several boards owned by the user
{% func OwnedBoard(boards config.BoardTitles, lang map[string]string) %}{% stripspace %}
	{% if len(boards) != 0 %}
		<select name="boards" required>
			{% for _, b := range boards %}
				<option value="{%s= b.ID %}">
					{%= formatTitle(b.ID, b.Title) %}
				</option>
			{% endfor %}
		</select>
		<br>
		<input type="submit" value="{%s= lang["submit"] %}">
	{% else %}
		{%s= lang["ownNoBoards"] %}
		<br>
		<br>
	{% endif %}
	<input type="button" name="cancel" value="{%s= lang["cancel"] %}">
	<div class="form-response admin"></div>
{% endstripspace %}{% endfunc %}

{% func formatTitle(id, title string) %}{% stripspace %}
	/{%s= id %}/{% space %}-{% space %}{%s title %}
{% endstripspace %}{% endfunc %}

BoardNavigation renders a board selection and search form
{% func BoardNavigation(lang map[string]string) %}{% stripspace %}
	<input type="text" class="full-width" name="search" placeholder="{%s= lang["search"] %}">
	<br>
	<form>
		{%= submit(true, lang) %}
		<br>
		{% for _, b := range config.GetBoardTitles() %}
			<label>
				<input type="checkbox" name="{%s= b.ID %}">
				<a href="/{%s= b.ID %}/" class="history">
					{%= formatTitle(b.ID, b.Title) %}
				</a>
				<br>
			</label>
		{% endfor %}
	</form>
{% endstripspace %}{% endfunc %}

CreateBoard renders a the form for creating new boards
{% func CreateBoard(ln lang.Pack) %}{% stripspace %}
	{%= table(specs["createBoard"], ln) %}
	{%= CaptchaConfirmation(ln) %}
{% endstripspace %}{% endfunc %}

CaptchaConfirmation renders a confirmation form with an optional captcha
{% func CaptchaConfirmation(ln lang.Pack) %}{% stripspace %}
	{%= captcha("confirmation", ln.UI) %}
	{%= submit(true, ln.UI) %}
{% endstripspace %}{% endfunc %}

{% func captcha(id string, lang map[string]string) %}{% stripspace %}
	{% code conf := config.Get() %}
	{% if !conf.Captcha %}
		{% return %}
	{% endif %}
	<div class="captcha-container">
		<div class="g-recaptcha" data-sitekey="{%s= conf.CaptchaPublicKey %}"></div>
		<noscript>
			<div>
				<div class="g-recaptcha-container">
					<div>
						<iframe src="https://www.google.com/recaptcha/api/fallback?k={%s= conf.CaptchaPublicKey %}" frameborder="0" scrolling="no"></iframe>
					</div>
				</div>
				<div class="g-recaptcha-response-container">
					<textarea name="g-recaptcha-response" class="g-recaptcha-response"></textarea>
				</div>
			</div>
		</noscript>
	</div>
{% endstripspace %}{% endfunc %}

Form for inputting key-value map-like data
{% func keyValueForm(k, v string) %}{% stripspace %}
	<span>
		<input type="text" class="map-field" value="{%s k %}">
		<input type="text" class="map-field" value="{%s v %}">
		<a class="map-remove">
			[X]
		</a>
		<br>
	</span>
{% endstripspace %}{% endfunc %}

Form for inputting one array-like form item
{% func arrayItemForm(v string) %}{% stripspace %}
	<span>
		<input type="text" class="array-field" value="{%s v %}">
		<a class="array-remove">
			[X]
		</a>
		<br>
	</span>
{% endstripspace %}{% endfunc %}

Form formatted as a table, with cancel and submit buttons
{% func tableForm(specs []inputSpec, needCaptcha bool, ln lang.Pack) %}{% stripspace %}
	{%= table(specs, ln) %}
	{% if needCaptcha %}
		{%= captcha("ajax", ln.UI) %}
	{% endif %}
	{%= submit(true, ln.UI) %}
{% endstripspace %}{% endfunc %}

Render a map form for inputting map-like data
{% func renderMap(spec inputSpec, ln lang.Pack) %}{% stripspace %}
	<div class="map-form" name="{%s= spec.ID %}" title="{%s= ln.Forms[spec.ID][1] %}">
		{% for k, v := range spec.Val.(map[string]string) %}
			{%= keyValueForm(k, v) %}
		{% endfor %}
		<a class="map-add">
			{%s= ln.UI["add"] %}
		</a>
		<br>
	</div>
{% endstripspace %}{% endfunc %}

Render form for inputting array-like data
{% func renderArray(spec inputSpec, ln lang.Pack) %}{% stripspace %}
	<div class="array-form" name="{%s= spec.ID %}" title="{%s= ln.Forms[spec.ID][1] %}">
		{% for _, v := range spec.Val.([]string) %}
			{%= arrayItemForm(v) %}
		{% endfor %}
		<a class="array-add">
			{%s= ln.UI["add"] %}
		</a>
		<br>
	</div>
{% endstripspace %}{% endfunc %}

Render submit and cancel buttons
{% func submit(cancel bool, ln map[string]string) %}{% stripspace %}
	<input type="submit" value="{%s= ln["submit"] %}">
	{% if cancel %}
		<input type="button" name="cancel" value="{%s= ln["cancel"] %}">
	{% endif %}
	<div class="form-response admin"></div>
{% endstripspace %}{% endfunc %}
