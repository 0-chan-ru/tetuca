{% import "strconv" %}
{% import "meguca/config" %}
{% import "meguca/common" %}
{% import "meguca/lang" %}
{% import "meguca/imager/assets" %}

{% func renderBoard(threadHTML []byte, id, title string, conf config.BoardConfContainer, catalog bool, ln lang.Pack) %}{% stripspace %}
	{% comment %}
		Not implemented yet
		<h1 class="image-banner">
			<img src="/assets/banners/{%s conf.Banner %}">
		</h1>
	{% endcomment %}
	<h1 id="page-title">
		{%s= title %}
	</h1>
	<span class="aside-container">
		<aside id="thread-form-container" class="glass">
			<span class="act">
				<a class="new-thread-button">
					{%s= ln.UI["newThread"] %}
				</a>
			</span>
			<form id="new-thread-form" action="/createThread" class="hidden">
				{% if id == "all" %}
					<select name="board" required>
						{% for _, b := range config.GetBoardTitles() %}
							<option value="{%s= b.ID %}">
								{%= formatTitle(b.ID, b.Title) %}
							</option>
						{% endfor %}
					</select>
					<br>
				{% endif %}
				<input name="subject" placeholder="{%s= ln.UI["subject"] %}" required type="text" maxlength="100">
				<br>
				<noscript>
					{% for _, s := range specs["noscriptPostCreation"] %}
						{%= input(s, ln) %}
						<br>
					{% endfor %}
				</noscript>
				{% if id == "all" || !conf.TextOnly %}
					<span class="upload-container">
						<span data-id="spoiler">
							<label>
								<input type="checkbox" name="spoiler">
								{%s= ln.Common.Posts["spoiler"] %}
							</label>
						</span>
						<strong class="upload-status"></strong>
						<br>
						<input type="file" name="image" accept="image/png, image/gif, image/jpeg, video/webm, video/ogg, audio/ogg, application/ogg, video/mp4, audio/mp4, audio/mp3, application/zip, application/x-7z-compressed, application/x-xz, application/x-gzip">
						<br>
					</span>
				{% endif %}
				{%= captcha() %}
				{%= submit(true, ln.UI) %}
			</form>
		</aside>
		<aside id="refresh" class="act glass">
			<a>
				{%s= ln.Common.UI["refresh"] %}
			</a>
		</aside>
		<aside class="act glass">
			{% if catalog %}
				<a href="." class="history">
					{%s= ln.UI["return"] %}
				</a>
			{% else %}
				<a href="catalog" class="history">
					{%s= ln.UI["catalog"] %}
				</a>
			{% endif %}
		</aside>
		{%= hoverReveal(conf.Notice, ln.UI["showNotice"]) %}
		{%= hoverReveal(conf.Rules, ln.UI["rules"]) %}
		<span id="catalog-controls" class="margin-spaced">
			<input type="text" name="search" placeholder="{%s= ln.UI["search"] %}" title="{%s= ln.UI["searchTooltip"] %}">
			<select name="sortMode">
				{% for i, s := range [...]string{"bump", "lastReply", "creation", "replyCount", "fileCount"} %}
					<option value="{%s= s %}">
						{%s= ln.SortModes[i] %}
					</option>
				{% endfor %}
			</select>
		</span>
	</span>
	<noscript>
		TODO: Noscript thread creation
	</noscript>
	<hr>
	{%z= threadHTML %}
	<script id="board-configs" type="application/json">
		{%z= conf.JSON %}
	</script>
	<hr>
{% endstripspace %}{% endfunc %}

CatalogThreads renders thread content for a catalog page. Separate function to
allow caching of generated posts.
{% func CatalogThreads(b []common.Thread, json []byte) %}{% stripspace %}
	<div id="catalog">
		{% for _, t := range b %}
			{% code idStr:= strconv.FormatUint(t.ID, 10) %}
			<article id="p{%s= idStr %}" {%= postClass(t.Post) %} data-id="{%s= idStr %}">
				{%= deletedToggle() %}
				{% if t.Image != nil %}
					<figure>
						{% code img := *t.Image %}
						<a class="history" href="/{%s= t.Board %}/{%s= idStr %}">
							{% if img.Spoiler %}
								<img src="/assets/spoil/default.jpg" width="150" height="150" class="catalog">
							{% else %}
								<img width="{%s= strconv.FormatUint(uint64(img.Dims[2]), 10) %}" height="{%s= strconv.FormatUint(uint64(img.Dims[3]), 10) %}" class="catalog" src="{%s= assets.ThumbPath(img.ThumbType, img.SHA1) %}">
							{% endif %}
						</a>
					</figure>
				{% endif %}
				<span class="spaced thread-links hide-empty">
					<b class="board">
						/{%s= t.Board %}/
					</b>
					<span class="counters">
						{%s= strconv.FormatUint(uint64(t.PostCtr), 10) %}
						/
						{%s= strconv.FormatUint(uint64(t.ImageCtr), 10) %}
					</span>
					{% if t.Image == nil %}
						{%= expandLink(t.Board, idStr) %}
					{% endif %}
					{%= last100Link(t.Board, idStr) %}
				</span>
				<br>
				<h3>
					「{%s t.Subject %}」
				</h3>
				<blockquote>
					{%s t.Body %}
				</blockquote>
			</article>
		{% endfor %}
		<script id="post-data" type="application/json">
			{%z= json %}
		</script>
	</div>
{% endstripspace %}{% endfunc %}

IndexThreads renders abbreviated threads for display on board index pages
{% func IndexThreads(threads []common.Thread, json []byte) %}{% stripspace %}
	{% code root := config.Get().RootURL %}
	<div id="index-thread-container">
		{% for _, t := range threads %}
			{% code omit, imageOmit := CalculateOmit(t) %}
			{% code idStr := strconv.FormatUint(t.ID, 10) %}
			<section class="index-thread{% if t.Deleted %}{% space %}deleted{% endif %}" data-id="{%s= idStr %}">
				{%= deletedToggle() %}
				{% code post := common.StandalonePost{
					Board: t.Board,
					OP: t.ID,
					Post: t.Post,
				} %}
				{%= renderArticle(post, omit, imageOmit, t.Subject, root, true) %}
				{% for _, p := range t.Posts %}
					{% code post.Post = p %}
					{%= renderArticle(post, 0, 0, "", root, true) %}
				{% endfor %}
				<aside class="act posting glass">
					<a href="/all/{%s= idStr %}?last=100#bottom">
						Reply
					</a>
				</aside>
				<hr>
			</section>
		{% endfor %}
		<script id="post-data" type="application/json">
			{%z= json %}
		</script>
	</div>
{% endstripspace %}{% endfunc %}

Notice widget, that reveals text on hover
{% func hoverReveal(text, label string) %}{% stripspace %}
	{% if text == "" %}
		{% return %}
	{% endif %}
	<aside class="glass hover-reveal">
		<span class="act">
			{%s= label %}
		</span>
		<span class="popup-menu glass">
			{%s text %}
		</span>
	</aside>
{% endstripspace %}{% endfunc %}
