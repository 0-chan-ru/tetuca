// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: images.go
// DO NOT EDIT!

package common

import (
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *Image) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *Image) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteByte('{')
	if mj.Spoiler != false {
		if mj.Spoiler {
			buf.WriteString(`"spoiler":true`)
		} else {
			buf.WriteString(`"spoiler":false`)
		}
		buf.WriteByte(',')
	}
	buf.WriteString(`"name":`)
	fflib.WriteJsonString(buf, string(mj.Name))
	buf.WriteByte(',')
	if mj.APNG != false {
		if mj.APNG {
			buf.WriteString(`"apng":true`)
		} else {
			buf.WriteString(`"apng":false`)
		}
		buf.WriteByte(',')
	}
	if mj.Audio != false {
		if mj.Audio {
			buf.WriteString(`"audio":true`)
		} else {
			buf.WriteString(`"audio":false`)
		}
		buf.WriteByte(',')
	}
	if mj.Video != false {
		if mj.Video {
			buf.WriteString(`"video":true`)
		} else {
			buf.WriteString(`"video":false`)
		}
		buf.WriteByte(',')
	}
	buf.WriteString(`"fileType":`)
	fflib.FormatBits2(buf, uint64(mj.FileType), 10, false)
	buf.WriteString(`,"thumbType":`)
	fflib.FormatBits2(buf, uint64(mj.ThumbType), 10, false)
	buf.WriteByte(',')
	if mj.Length != 0 {
		buf.WriteString(`"length":`)
		fflib.FormatBits2(buf, uint64(mj.Length), 10, false)
		buf.WriteByte(',')
	}
	buf.WriteString(`"dims":`)
	buf.WriteString(`[`)
	for i, v := range mj.Dims {
		if i != 0 {
			buf.WriteString(`,`)
		}
		fflib.FormatBits2(buf, uint64(v), 10, false)
	}
	buf.WriteString(`]`)
	buf.WriteString(`,"size":`)
	fflib.FormatBits2(buf, uint64(mj.Size), 10, mj.Size < 0)
	buf.WriteString(`,"MD5":`)
	fflib.WriteJsonString(buf, string(mj.MD5))
	buf.WriteString(`,"SHA1":`)
	fflib.WriteJsonString(buf, string(mj.SHA1))
	buf.WriteByte('}')
	return nil
}

func (mj *ImageCommon) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *ImageCommon) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteByte('{')
	if mj.APNG != false {
		if mj.APNG {
			buf.WriteString(`"apng":true`)
		} else {
			buf.WriteString(`"apng":false`)
		}
		buf.WriteByte(',')
	}
	if mj.Audio != false {
		if mj.Audio {
			buf.WriteString(`"audio":true`)
		} else {
			buf.WriteString(`"audio":false`)
		}
		buf.WriteByte(',')
	}
	if mj.Video != false {
		if mj.Video {
			buf.WriteString(`"video":true`)
		} else {
			buf.WriteString(`"video":false`)
		}
		buf.WriteByte(',')
	}
	buf.WriteString(`"fileType":`)
	fflib.FormatBits2(buf, uint64(mj.FileType), 10, false)
	buf.WriteString(`,"thumbType":`)
	fflib.FormatBits2(buf, uint64(mj.ThumbType), 10, false)
	buf.WriteByte(',')
	if mj.Length != 0 {
		buf.WriteString(`"length":`)
		fflib.FormatBits2(buf, uint64(mj.Length), 10, false)
		buf.WriteByte(',')
	}
	buf.WriteString(`"dims":`)
	buf.WriteString(`[`)
	for i, v := range mj.Dims {
		if i != 0 {
			buf.WriteString(`,`)
		}
		fflib.FormatBits2(buf, uint64(v), 10, false)
	}
	buf.WriteString(`]`)
	buf.WriteString(`,"size":`)
	fflib.FormatBits2(buf, uint64(mj.Size), 10, mj.Size < 0)
	buf.WriteString(`,"MD5":`)
	fflib.WriteJsonString(buf, string(mj.MD5))
	buf.WriteString(`,"SHA1":`)
	fflib.WriteJsonString(buf, string(mj.SHA1))
	buf.WriteByte('}')
	return nil
}

func (mj *ProtoImage) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *ProtoImage) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"Posts":`)
	fflib.FormatBits2(buf, uint64(mj.Posts), 10, false)
	buf.WriteByte(',')
	if mj.APNG != false {
		if mj.APNG {
			buf.WriteString(`"apng":true`)
		} else {
			buf.WriteString(`"apng":false`)
		}
		buf.WriteByte(',')
	}
	if mj.Audio != false {
		if mj.Audio {
			buf.WriteString(`"audio":true`)
		} else {
			buf.WriteString(`"audio":false`)
		}
		buf.WriteByte(',')
	}
	if mj.Video != false {
		if mj.Video {
			buf.WriteString(`"video":true`)
		} else {
			buf.WriteString(`"video":false`)
		}
		buf.WriteByte(',')
	}
	buf.WriteString(`"fileType":`)
	fflib.FormatBits2(buf, uint64(mj.FileType), 10, false)
	buf.WriteString(`,"thumbType":`)
	fflib.FormatBits2(buf, uint64(mj.ThumbType), 10, false)
	buf.WriteByte(',')
	if mj.Length != 0 {
		buf.WriteString(`"length":`)
		fflib.FormatBits2(buf, uint64(mj.Length), 10, false)
		buf.WriteByte(',')
	}
	buf.WriteString(`"dims":`)
	buf.WriteString(`[`)
	for i, v := range mj.Dims {
		if i != 0 {
			buf.WriteString(`,`)
		}
		fflib.FormatBits2(buf, uint64(v), 10, false)
	}
	buf.WriteString(`]`)
	buf.WriteString(`,"size":`)
	fflib.FormatBits2(buf, uint64(mj.Size), 10, mj.Size < 0)
	buf.WriteString(`,"MD5":`)
	fflib.WriteJsonString(buf, string(mj.MD5))
	buf.WriteString(`,"SHA1":`)
	fflib.WriteJsonString(buf, string(mj.SHA1))
	buf.WriteByte('}')
	return nil
}
