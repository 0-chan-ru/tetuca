{% import "github.com/bakape/meguca/config" %}
{% import "github.com/bakape/meguca/lang" %}

OwnedBoard renders a form for selecting one of several boards owned by the
user
{% func OwnedBoard(boards config.BoardTitles, lang map[string]string) %}{% stripspace %}
	{% if len(boards) != 0 %}
		<select name="boards" required>
			{% for _, b := range boards %}
				<option value="{%s= b.ID %}">
					{%= formatTitle(b.ID, b.Title) %}
				</option>
			{% endfor %}
		</select>
		<br>
		<input type="submit" value="{%s= lang["submit"] %}">
	{% else %}
		{%s= lang["ownNoBoards"] %}
		<br>
		<br>
	{% endif %}
	<input type="button" name="cancel" value="{%s= lang["cancel"] %}">
	<div class="form-response admin"></div>
{% endstripspace %}{% endfunc %}

{% func formatTitle(id, title string) %}{% stripspace %}
	/{%s= id %}/ - {%s title %}
{% endstripspace %}{% endfunc %}

BoardNavigation renders a board selection and search form
{% func BoardNavigation(lang map[string]string) %}{% stripspace %}
	<input type="text" class="full-width" name="search" placeholder="{%s= lang["search"] %}">
	<br>
	<form>
		{%= submit(true, lang) %}
		<br>
		{% for _, b := range config.GetBoardTitles() %}
			<label>
				<input type="checkbox" name="{%s= b.ID %}">
				<a href="/{%s= b.ID %}/" class="history">
					{%= formatTitle(b.ID, b.Title) %}
				</a>
				<br>
			</label>
		{% endfor %}
	</form>
{% endstripspace %}{% endfunc %}

CreateBoard renders a the form for creating new boards
{% func CreateBoard(ln lang.Pack) %}{% stripspace %}
	{%= table(specs["createBoard"], ln) %}
	{%= CaptchaConfirmation(ln) %}
{% endstripspace %}{% endfunc %}

CaptchaConfirmation renders a confirmation form with an optional captcha
{% func CaptchaConfirmation(ln lang.Pack) %}{% stripspace %}
	{%= captcha("confirmation", ln.UI) %}
	{%= submit(true, ln.UI) %}
{% endstripspace %}{% endfunc %}

{% func captcha(id string, lang map[string]string) %}{% stripspace %}
	{% code conf := config.Get() %}
	{% if !conf.Captcha %}
		{% return %}
	{% endif %}
	<div class="captcha-container" id="captcha-{%s= id %}">
		<div id="adcopy-outer-{%s= id %}">
			<div id="adcopy-puzzle-image-{%s= id %}" class="captcha-image" title="{%s= lang["reloadCaptcha"] %}"></div>
			<div id="adcopy-puzzle-audio-{%s= id %}" class="hidden"></div>
			<div id="adcopy-pixel-image-{%s= id %}" class="hidden"></div>
			<div>
				<span id="adcopy-instr-{%s= id %}" class="hidden"></span>
			</div>
			<input id="adcopy_response-{%s= id %}" name="adcopy_response" class="full-width" type="text" placeholder="{%s= lang["focusForCaptcha"] %}" required>
			<input type="hidden" name="adcopy_challenge" id="adcopy_challenge-{%s= id %}" hidden>
			<a id="adcopy-link-refresh-{%s= id %}" class="hidden"></a>
			<a id="adcopy-link-audio-{%s= id %}" class="hidden"></a>
			<a id="adcopy-link-image-{%s= id %}" class="hidden"></a>
			<a id="adcopy-link-info-{%s= id %}" class="hidden"></a>
			<!-- Temporary, till better noscript support >
				<noscript>
					<iframe src="https://api-secure.solvemedia.com/papi/challenge.noscript?k={%s= conf.CaptchaPublicKey %}"
			height="260" width="350" frameborder="0"></iframe>
					<br>
					<input name="adcopy_challenge" type="text" required>
				</noscript>
			<-->
		</div>
	</div>
{% endstripspace %}{% endfunc %}

Form for inputting key-value map-like data
{% func keyValueForm(k, v string) %}{% stripspace %}
	<span>
		<input type="text" class="map-field" value="{%s k %}">
		<input type="text" class="map-field" value="{%s v %}">
		<a class="map-remove">
			[X]
		</a>
		<br>
	</span>
{% endstripspace %}{% endfunc %}

Form formatted as a table, with cancel and submit buttons
{% func tableForm(specs []inputSpec, needCaptcha bool, ln lang.Pack) %}{% stripspace %}
	{%= table(specs, ln) %}
	{% if needCaptcha %}
		{%= captcha("ajax", ln.UI) %}
	{% endif %}
	{%= submit(true, ln.UI) %}
{% endstripspace %}{% endfunc %}

Render a map form for inputting map-like data
{% func renderMap(spec inputSpec, ln lang.Pack) %}{% stripspace %}
	<div class="map-form" name="{%s= spec.ID %}" title="{%s= ln.Forms[spec.ID][1] %}">
		{% for k, v := range spec.Val.(map[string]string) %}
			{%= keyValueForm(k, v) %}
		{% endfor %}
		<a class="map-add">
			{%s= ln.UI["add"] %}
		</a>
		<br>
	</div>
{% endstripspace %}{% endfunc %}

Render submit and cancel buttons
{% func submit(cancel bool, ln map[string]string) %}{% stripspace %}
	<input type="submit" value="{%s= ln["submit"] %}">
	{% if cancel %}
		<input type="button" name="cancel" value="{%s= ln["cancel"] %}">
	{% endif %}
	<div class="form-response admin"></div>
{% endstripspace %}{% endfunc %}
